"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScreenCaptureParameters2 = exports.ScreenCaptureParameters = exports.ScreenAudioParameters = exports.RtmpStreamingEvent = exports.RtmpStreamPublishState = exports.RtmpStreamPublishErrorType = exports.RtcStats = exports.RtcImage = exports.RemoteVideoStateReason = exports.RemoteVideoState = exports.RemoteVideoDownscaleLevel = exports.RemoteUserState = exports.RemoteAudioStats = exports.RemoteAudioStateReason = exports.RemoteAudioState = exports.Rectangle = exports.QualityType = exports.QualityAdaptIndication = exports.PermissionType = exports.PeerDownlinkInfo = exports.Packet = exports.OrientationMode = exports.NetworkType = exports.MaxUserAccountLengthType = exports.LowlightEnhanceOptions = exports.LowLightEnhanceMode = exports.LowLightEnhanceLevel = exports.LocalVideoStreamState = exports.LocalVideoStreamError = exports.LocalTranscoderConfiguration = exports.LocalAudioStreamState = exports.LocalAudioStreamError = exports.LocalAudioStats = exports.LiveTranscoding = exports.LiveStreamAdvancedFeature = exports.LighteningContrastLevel = exports.LicenseErrorType = exports.LastmileProbeResultState = exports.LastmileProbeResult = exports.LastmileProbeOneWayResult = exports.LastmileProbeConfig = exports.InterfaceIdType = exports.HeadphoneEqualizerPreset = exports.H264PacketizeMode = exports.FrameWidth = exports.FrameRate = exports.FrameHeight = exports.FitModeType = exports.ExperienceQualityType = exports.ExperiencePoorReason = exports.ErrorCodeType = exports.EncryptionMode = exports.EncryptionErrorType = exports.EncryptionConfig = exports.EncodingPreference = exports.EncodedVideoFrameInfo = exports.EncodedAudioFrameInfo = exports.EncodedAudioFrameAdvancedSettings = exports.EchoTestConfiguration = exports.EarMonitoringFilterType = exports.DownlinkNetworkInfo = exports.DeviceInfo = exports.DegradationPreference = exports.DataStreamConfig = exports.ConnectionStateType = exports.ConnectionChangedReasonType = exports.CompressionPreference = exports.ColorEnhanceOptions = exports.ClientRoleType = exports.ClientRoleOptions = exports.ClientRoleChangeFailedReason = exports.ChannelProfileType = exports.ChannelMediaRelayState = exports.ChannelMediaRelayEvent = exports.ChannelMediaRelayError = exports.ChannelMediaRelayConfiguration = exports.ChannelMediaInfo = exports.CaptureBrightnessLevelType = exports.BeautyOptions = exports.BackgroundSourceType = exports.BackgroundBlurDegree = exports.AudioVolumeInfo = exports.AudioSessionOperationRestriction = exports.AudioScenarioType = exports.AudioSampleRateType = exports.AudioRecordingQualityType = exports.AudioRecordingConfiguration = exports.AudioProfileType = exports.AudioPcmDataInfo = exports.AudioFileRecordingType = exports.AudioEncodingType = exports.AudioEncodedFrameObserverPosition = exports.AudioEncodedFrameObserverConfig = exports.AudioEffectPreset = exports.AudioCodecType = exports.AudioCodecProfileType = exports.AudienceLatencyLevelType = exports.AreaCodeEx = exports.AreaCode = exports.AdvanceOptions = void 0;
exports.WlaccSuggestAction = exports.WlaccMessageReason = exports.WlAccStats = exports.WatermarkRatio = exports.WatermarkOptions = exports.WatermarkFitMode = exports.WarnCodeType = exports.VoiceConversionPreset = exports.VoiceBeautifierPreset = exports.VirtualBackgroundSource = exports.VideoViewSetupMode = exports.VideoTrackInfo = exports.VideoSubscriptionOptions = exports.VideoStreamType = exports.VideoSourceType = exports.VideoOrientation = exports.VideoMirrorModeType = exports.VideoFrameType = exports.VideoFormat = exports.VideoEncoderConfiguration = exports.VideoDimensions = exports.VideoDenoiserOptions = exports.VideoDenoiserMode = exports.VideoDenoiserLevel = exports.VideoContentHint = exports.VideoCodecTypeForStream = exports.VideoCodecType = exports.VideoCodecProfileType = exports.VideoCanvas = exports.UserOfflineReasonType = exports.UserInfo = exports.UploadErrorReason = exports.UplinkNetworkInfo = exports.TranscodingVideoStream = exports.TranscodingUser = exports.ThreadPriorityType = exports.TCcMode = exports.StreamSubscribeState = exports.StreamPublishState = exports.SpatialAudioParams = exports.SimulcastStreamMode = exports.SimulcastStreamConfig = exports.SenderOptions = exports.SegmentationProperty = exports.SegModelType = exports.ScreenVideoParameters = exports.ScreenScenarioType = void 0;
require("./extension/AgoraBaseExtension");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
/**
 * The channel profile.
 */
let ChannelProfileType;
/**
 * @ignore
 */
exports.ChannelProfileType = ChannelProfileType;
(function (ChannelProfileType) {
  ChannelProfileType[ChannelProfileType["ChannelProfileCommunication"] = 0] = "ChannelProfileCommunication";
  ChannelProfileType[ChannelProfileType["ChannelProfileLiveBroadcasting"] = 1] = "ChannelProfileLiveBroadcasting";
  ChannelProfileType[ChannelProfileType["ChannelProfileGame"] = 2] = "ChannelProfileGame";
  ChannelProfileType[ChannelProfileType["ChannelProfileCloudGaming"] = 3] = "ChannelProfileCloudGaming";
  ChannelProfileType[ChannelProfileType["ChannelProfileCommunication1v1"] = 4] = "ChannelProfileCommunication1v1";
})(ChannelProfileType || (exports.ChannelProfileType = ChannelProfileType = {}));
let WarnCodeType;
/**
 * Error codes.
 * An error code indicates that the SDK encountered an unrecoverable error that requires application intervention. For example, an error is returned when the camera fails to open, and the app needs to inform the user that the camera cannot be used.
 */
exports.WarnCodeType = WarnCodeType;
(function (WarnCodeType) {
  WarnCodeType[WarnCodeType["WarnInvalidView"] = 8] = "WarnInvalidView";
  WarnCodeType[WarnCodeType["WarnInitVideo"] = 16] = "WarnInitVideo";
  WarnCodeType[WarnCodeType["WarnPending"] = 20] = "WarnPending";
  WarnCodeType[WarnCodeType["WarnNoAvailableChannel"] = 103] = "WarnNoAvailableChannel";
  WarnCodeType[WarnCodeType["WarnLookupChannelTimeout"] = 104] = "WarnLookupChannelTimeout";
  WarnCodeType[WarnCodeType["WarnLookupChannelRejected"] = 105] = "WarnLookupChannelRejected";
  WarnCodeType[WarnCodeType["WarnOpenChannelTimeout"] = 106] = "WarnOpenChannelTimeout";
  WarnCodeType[WarnCodeType["WarnOpenChannelRejected"] = 107] = "WarnOpenChannelRejected";
  WarnCodeType[WarnCodeType["WarnSwitchLiveVideoTimeout"] = 111] = "WarnSwitchLiveVideoTimeout";
  WarnCodeType[WarnCodeType["WarnSetClientRoleTimeout"] = 118] = "WarnSetClientRoleTimeout";
  WarnCodeType[WarnCodeType["WarnOpenChannelInvalidTicket"] = 121] = "WarnOpenChannelInvalidTicket";
  WarnCodeType[WarnCodeType["WarnOpenChannelTryNextVos"] = 122] = "WarnOpenChannelTryNextVos";
  WarnCodeType[WarnCodeType["WarnChannelConnectionUnrecoverable"] = 131] = "WarnChannelConnectionUnrecoverable";
  WarnCodeType[WarnCodeType["WarnChannelConnectionIpChanged"] = 132] = "WarnChannelConnectionIpChanged";
  WarnCodeType[WarnCodeType["WarnChannelConnectionPortChanged"] = 133] = "WarnChannelConnectionPortChanged";
  WarnCodeType[WarnCodeType["WarnChannelSocketError"] = 134] = "WarnChannelSocketError";
  WarnCodeType[WarnCodeType["WarnAudioMixingOpenError"] = 701] = "WarnAudioMixingOpenError";
  WarnCodeType[WarnCodeType["WarnAdmRuntimePlayoutWarning"] = 1014] = "WarnAdmRuntimePlayoutWarning";
  WarnCodeType[WarnCodeType["WarnAdmRuntimeRecordingWarning"] = 1016] = "WarnAdmRuntimeRecordingWarning";
  WarnCodeType[WarnCodeType["WarnAdmRecordAudioSilence"] = 1019] = "WarnAdmRecordAudioSilence";
  WarnCodeType[WarnCodeType["WarnAdmPlayoutMalfunction"] = 1020] = "WarnAdmPlayoutMalfunction";
  WarnCodeType[WarnCodeType["WarnAdmRecordMalfunction"] = 1021] = "WarnAdmRecordMalfunction";
  WarnCodeType[WarnCodeType["WarnAdmRecordAudioLowlevel"] = 1031] = "WarnAdmRecordAudioLowlevel";
  WarnCodeType[WarnCodeType["WarnAdmPlayoutAudioLowlevel"] = 1032] = "WarnAdmPlayoutAudioLowlevel";
  WarnCodeType[WarnCodeType["WarnAdmWindowsNoDataReadyEvent"] = 1040] = "WarnAdmWindowsNoDataReadyEvent";
  WarnCodeType[WarnCodeType["WarnApmHowling"] = 1051] = "WarnApmHowling";
  WarnCodeType[WarnCodeType["WarnAdmGlitchState"] = 1052] = "WarnAdmGlitchState";
  WarnCodeType[WarnCodeType["WarnAdmImproperSettings"] = 1053] = "WarnAdmImproperSettings";
  WarnCodeType[WarnCodeType["WarnAdmWinCoreNoRecordingDevice"] = 1322] = "WarnAdmWinCoreNoRecordingDevice";
  WarnCodeType[WarnCodeType["WarnAdmWinCoreNoPlayoutDevice"] = 1323] = "WarnAdmWinCoreNoPlayoutDevice";
  WarnCodeType[WarnCodeType["WarnAdmWinCoreImproperCaptureRelease"] = 1324] = "WarnAdmWinCoreImproperCaptureRelease";
})(WarnCodeType || (exports.WarnCodeType = WarnCodeType = {}));
let ErrorCodeType;
/**
 * @ignore
 */
exports.ErrorCodeType = ErrorCodeType;
(function (ErrorCodeType) {
  ErrorCodeType[ErrorCodeType["ErrOk"] = 0] = "ErrOk";
  ErrorCodeType[ErrorCodeType["ErrFailed"] = 1] = "ErrFailed";
  ErrorCodeType[ErrorCodeType["ErrInvalidArgument"] = 2] = "ErrInvalidArgument";
  ErrorCodeType[ErrorCodeType["ErrNotReady"] = 3] = "ErrNotReady";
  ErrorCodeType[ErrorCodeType["ErrNotSupported"] = 4] = "ErrNotSupported";
  ErrorCodeType[ErrorCodeType["ErrRefused"] = 5] = "ErrRefused";
  ErrorCodeType[ErrorCodeType["ErrBufferTooSmall"] = 6] = "ErrBufferTooSmall";
  ErrorCodeType[ErrorCodeType["ErrNotInitialized"] = 7] = "ErrNotInitialized";
  ErrorCodeType[ErrorCodeType["ErrInvalidState"] = 8] = "ErrInvalidState";
  ErrorCodeType[ErrorCodeType["ErrNoPermission"] = 9] = "ErrNoPermission";
  ErrorCodeType[ErrorCodeType["ErrTimedout"] = 10] = "ErrTimedout";
  ErrorCodeType[ErrorCodeType["ErrCanceled"] = 11] = "ErrCanceled";
  ErrorCodeType[ErrorCodeType["ErrTooOften"] = 12] = "ErrTooOften";
  ErrorCodeType[ErrorCodeType["ErrBindSocket"] = 13] = "ErrBindSocket";
  ErrorCodeType[ErrorCodeType["ErrNetDown"] = 14] = "ErrNetDown";
  ErrorCodeType[ErrorCodeType["ErrJoinChannelRejected"] = 17] = "ErrJoinChannelRejected";
  ErrorCodeType[ErrorCodeType["ErrLeaveChannelRejected"] = 18] = "ErrLeaveChannelRejected";
  ErrorCodeType[ErrorCodeType["ErrAlreadyInUse"] = 19] = "ErrAlreadyInUse";
  ErrorCodeType[ErrorCodeType["ErrAborted"] = 20] = "ErrAborted";
  ErrorCodeType[ErrorCodeType["ErrInitNetEngine"] = 21] = "ErrInitNetEngine";
  ErrorCodeType[ErrorCodeType["ErrResourceLimited"] = 22] = "ErrResourceLimited";
  ErrorCodeType[ErrorCodeType["ErrInvalidAppId"] = 101] = "ErrInvalidAppId";
  ErrorCodeType[ErrorCodeType["ErrInvalidChannelName"] = 102] = "ErrInvalidChannelName";
  ErrorCodeType[ErrorCodeType["ErrNoServerResources"] = 103] = "ErrNoServerResources";
  ErrorCodeType[ErrorCodeType["ErrTokenExpired"] = 109] = "ErrTokenExpired";
  ErrorCodeType[ErrorCodeType["ErrInvalidToken"] = 110] = "ErrInvalidToken";
  ErrorCodeType[ErrorCodeType["ErrConnectionInterrupted"] = 111] = "ErrConnectionInterrupted";
  ErrorCodeType[ErrorCodeType["ErrConnectionLost"] = 112] = "ErrConnectionLost";
  ErrorCodeType[ErrorCodeType["ErrNotInChannel"] = 113] = "ErrNotInChannel";
  ErrorCodeType[ErrorCodeType["ErrSizeTooLarge"] = 114] = "ErrSizeTooLarge";
  ErrorCodeType[ErrorCodeType["ErrBitrateLimit"] = 115] = "ErrBitrateLimit";
  ErrorCodeType[ErrorCodeType["ErrTooManyDataStreams"] = 116] = "ErrTooManyDataStreams";
  ErrorCodeType[ErrorCodeType["ErrStreamMessageTimeout"] = 117] = "ErrStreamMessageTimeout";
  ErrorCodeType[ErrorCodeType["ErrSetClientRoleNotAuthorized"] = 119] = "ErrSetClientRoleNotAuthorized";
  ErrorCodeType[ErrorCodeType["ErrDecryptionFailed"] = 120] = "ErrDecryptionFailed";
  ErrorCodeType[ErrorCodeType["ErrInvalidUserId"] = 121] = "ErrInvalidUserId";
  ErrorCodeType[ErrorCodeType["ErrClientIsBannedByServer"] = 123] = "ErrClientIsBannedByServer";
  ErrorCodeType[ErrorCodeType["ErrEncryptedStreamNotAllowedPublish"] = 130] = "ErrEncryptedStreamNotAllowedPublish";
  ErrorCodeType[ErrorCodeType["ErrLicenseCredentialInvalid"] = 131] = "ErrLicenseCredentialInvalid";
  ErrorCodeType[ErrorCodeType["ErrInvalidUserAccount"] = 134] = "ErrInvalidUserAccount";
  ErrorCodeType[ErrorCodeType["ErrModuleNotFound"] = 157] = "ErrModuleNotFound";
  ErrorCodeType[ErrorCodeType["ErrCertRaw"] = 157] = "ErrCertRaw";
  ErrorCodeType[ErrorCodeType["ErrCertJsonPart"] = 158] = "ErrCertJsonPart";
  ErrorCodeType[ErrorCodeType["ErrCertJsonInval"] = 159] = "ErrCertJsonInval";
  ErrorCodeType[ErrorCodeType["ErrCertJsonNomem"] = 160] = "ErrCertJsonNomem";
  ErrorCodeType[ErrorCodeType["ErrCertCustom"] = 161] = "ErrCertCustom";
  ErrorCodeType[ErrorCodeType["ErrCertCredential"] = 162] = "ErrCertCredential";
  ErrorCodeType[ErrorCodeType["ErrCertSign"] = 163] = "ErrCertSign";
  ErrorCodeType[ErrorCodeType["ErrCertFail"] = 164] = "ErrCertFail";
  ErrorCodeType[ErrorCodeType["ErrCertBuf"] = 165] = "ErrCertBuf";
  ErrorCodeType[ErrorCodeType["ErrCertNull"] = 166] = "ErrCertNull";
  ErrorCodeType[ErrorCodeType["ErrCertDuedate"] = 167] = "ErrCertDuedate";
  ErrorCodeType[ErrorCodeType["ErrCertRequest"] = 168] = "ErrCertRequest";
  ErrorCodeType[ErrorCodeType["ErrPcmsendFormat"] = 200] = "ErrPcmsendFormat";
  ErrorCodeType[ErrorCodeType["ErrPcmsendBufferoverflow"] = 201] = "ErrPcmsendBufferoverflow";
  ErrorCodeType[ErrorCodeType["ErrLoginAlreadyLogin"] = 428] = "ErrLoginAlreadyLogin";
  ErrorCodeType[ErrorCodeType["ErrLoadMediaEngine"] = 1001] = "ErrLoadMediaEngine";
  ErrorCodeType[ErrorCodeType["ErrAdmGeneralError"] = 1005] = "ErrAdmGeneralError";
  ErrorCodeType[ErrorCodeType["ErrAdmInitPlayout"] = 1008] = "ErrAdmInitPlayout";
  ErrorCodeType[ErrorCodeType["ErrAdmStartPlayout"] = 1009] = "ErrAdmStartPlayout";
  ErrorCodeType[ErrorCodeType["ErrAdmStopPlayout"] = 1010] = "ErrAdmStopPlayout";
  ErrorCodeType[ErrorCodeType["ErrAdmInitRecording"] = 1011] = "ErrAdmInitRecording";
  ErrorCodeType[ErrorCodeType["ErrAdmStartRecording"] = 1012] = "ErrAdmStartRecording";
  ErrorCodeType[ErrorCodeType["ErrAdmStopRecording"] = 1013] = "ErrAdmStopRecording";
  ErrorCodeType[ErrorCodeType["ErrVdmCameraNotAuthorized"] = 1501] = "ErrVdmCameraNotAuthorized";
})(ErrorCodeType || (exports.ErrorCodeType = ErrorCodeType = {}));
let LicenseErrorType;
/**
 * The operation permissions of the SDK on the audio session.
 */
exports.LicenseErrorType = LicenseErrorType;
(function (LicenseErrorType) {
  LicenseErrorType[LicenseErrorType["LicenseErrInvalid"] = 1] = "LicenseErrInvalid";
  LicenseErrorType[LicenseErrorType["LicenseErrExpire"] = 2] = "LicenseErrExpire";
  LicenseErrorType[LicenseErrorType["LicenseErrMinutesExceed"] = 3] = "LicenseErrMinutesExceed";
  LicenseErrorType[LicenseErrorType["LicenseErrLimitedPeriod"] = 4] = "LicenseErrLimitedPeriod";
  LicenseErrorType[LicenseErrorType["LicenseErrDiffDevices"] = 5] = "LicenseErrDiffDevices";
  LicenseErrorType[LicenseErrorType["LicenseErrInternal"] = 99] = "LicenseErrInternal";
})(LicenseErrorType || (exports.LicenseErrorType = LicenseErrorType = {}));
let AudioSessionOperationRestriction;
/**
 * Reasons for a user being offline.
 */
exports.AudioSessionOperationRestriction = AudioSessionOperationRestriction;
(function (AudioSessionOperationRestriction) {
  AudioSessionOperationRestriction[AudioSessionOperationRestriction["AudioSessionOperationRestrictionNone"] = 0] = "AudioSessionOperationRestrictionNone";
  AudioSessionOperationRestriction[AudioSessionOperationRestriction["AudioSessionOperationRestrictionSetCategory"] = 1] = "AudioSessionOperationRestrictionSetCategory";
  AudioSessionOperationRestriction[AudioSessionOperationRestriction["AudioSessionOperationRestrictionConfigureSession"] = 2] = "AudioSessionOperationRestrictionConfigureSession";
  AudioSessionOperationRestriction[AudioSessionOperationRestriction["AudioSessionOperationRestrictionDeactivateSession"] = 4] = "AudioSessionOperationRestrictionDeactivateSession";
  AudioSessionOperationRestriction[AudioSessionOperationRestriction["AudioSessionOperationRestrictionAll"] = 128] = "AudioSessionOperationRestrictionAll";
})(AudioSessionOperationRestriction || (exports.AudioSessionOperationRestriction = AudioSessionOperationRestriction = {}));
let UserOfflineReasonType;
/**
 * The interface class.
 */
exports.UserOfflineReasonType = UserOfflineReasonType;
(function (UserOfflineReasonType) {
  UserOfflineReasonType[UserOfflineReasonType["UserOfflineQuit"] = 0] = "UserOfflineQuit";
  UserOfflineReasonType[UserOfflineReasonType["UserOfflineDropped"] = 1] = "UserOfflineDropped";
  UserOfflineReasonType[UserOfflineReasonType["UserOfflineBecomeAudience"] = 2] = "UserOfflineBecomeAudience";
})(UserOfflineReasonType || (exports.UserOfflineReasonType = UserOfflineReasonType = {}));
let InterfaceIdType;
/**
 * Network quality types.
 */
exports.InterfaceIdType = InterfaceIdType;
(function (InterfaceIdType) {
  InterfaceIdType[InterfaceIdType["AgoraIidAudioDeviceManager"] = 1] = "AgoraIidAudioDeviceManager";
  InterfaceIdType[InterfaceIdType["AgoraIidVideoDeviceManager"] = 2] = "AgoraIidVideoDeviceManager";
  InterfaceIdType[InterfaceIdType["AgoraIidParameterEngine"] = 3] = "AgoraIidParameterEngine";
  InterfaceIdType[InterfaceIdType["AgoraIidMediaEngine"] = 4] = "AgoraIidMediaEngine";
  InterfaceIdType[InterfaceIdType["AgoraIidAudioEngine"] = 5] = "AgoraIidAudioEngine";
  InterfaceIdType[InterfaceIdType["AgoraIidVideoEngine"] = 6] = "AgoraIidVideoEngine";
  InterfaceIdType[InterfaceIdType["AgoraIidRtcConnection"] = 7] = "AgoraIidRtcConnection";
  InterfaceIdType[InterfaceIdType["AgoraIidSignalingEngine"] = 8] = "AgoraIidSignalingEngine";
  InterfaceIdType[InterfaceIdType["AgoraIidMediaEngineRegulator"] = 9] = "AgoraIidMediaEngineRegulator";
  InterfaceIdType[InterfaceIdType["AgoraIidCloudSpatialAudio"] = 10] = "AgoraIidCloudSpatialAudio";
  InterfaceIdType[InterfaceIdType["AgoraIidLocalSpatialAudio"] = 11] = "AgoraIidLocalSpatialAudio";
  InterfaceIdType[InterfaceIdType["AgoraIidMediaRecorder"] = 12] = "AgoraIidMediaRecorder";
  InterfaceIdType[InterfaceIdType["AgoraIidStateSync"] = 13] = "AgoraIidStateSync";
  InterfaceIdType[InterfaceIdType["AgoraIidMetachatService"] = 14] = "AgoraIidMetachatService";
  InterfaceIdType[InterfaceIdType["AgoraIidMusicContentCenter"] = 15] = "AgoraIidMusicContentCenter";
})(InterfaceIdType || (exports.InterfaceIdType = InterfaceIdType = {}));
let QualityType;
/**
 * @ignore
 */
exports.QualityType = QualityType;
(function (QualityType) {
  QualityType[QualityType["QualityUnknown"] = 0] = "QualityUnknown";
  QualityType[QualityType["QualityExcellent"] = 1] = "QualityExcellent";
  QualityType[QualityType["QualityGood"] = 2] = "QualityGood";
  QualityType[QualityType["QualityPoor"] = 3] = "QualityPoor";
  QualityType[QualityType["QualityBad"] = 4] = "QualityBad";
  QualityType[QualityType["QualityVbad"] = 5] = "QualityVbad";
  QualityType[QualityType["QualityDown"] = 6] = "QualityDown";
  QualityType[QualityType["QualityUnsupported"] = 7] = "QualityUnsupported";
  QualityType[QualityType["QualityDetecting"] = 8] = "QualityDetecting";
})(QualityType || (exports.QualityType = QualityType = {}));
let FitModeType;
/**
 * The clockwise rotation of the video.
 */
exports.FitModeType = FitModeType;
(function (FitModeType) {
  FitModeType[FitModeType["ModeCover"] = 1] = "ModeCover";
  FitModeType[FitModeType["ModeContain"] = 2] = "ModeContain";
})(FitModeType || (exports.FitModeType = FitModeType = {}));
let VideoOrientation;
/**
 * Video frame rate.
 */
exports.VideoOrientation = VideoOrientation;
(function (VideoOrientation) {
  VideoOrientation[VideoOrientation["VideoOrientation0"] = 0] = "VideoOrientation0";
  VideoOrientation[VideoOrientation["VideoOrientation90"] = 90] = "VideoOrientation90";
  VideoOrientation[VideoOrientation["VideoOrientation180"] = 180] = "VideoOrientation180";
  VideoOrientation[VideoOrientation["VideoOrientation270"] = 270] = "VideoOrientation270";
})(VideoOrientation || (exports.VideoOrientation = VideoOrientation = {}));
let FrameRate;
/**
 * @ignore
 */
exports.FrameRate = FrameRate;
(function (FrameRate) {
  FrameRate[FrameRate["FrameRateFps1"] = 1] = "FrameRateFps1";
  FrameRate[FrameRate["FrameRateFps7"] = 7] = "FrameRateFps7";
  FrameRate[FrameRate["FrameRateFps10"] = 10] = "FrameRateFps10";
  FrameRate[FrameRate["FrameRateFps15"] = 15] = "FrameRateFps15";
  FrameRate[FrameRate["FrameRateFps24"] = 24] = "FrameRateFps24";
  FrameRate[FrameRate["FrameRateFps30"] = 30] = "FrameRateFps30";
  FrameRate[FrameRate["FrameRateFps60"] = 60] = "FrameRateFps60";
})(FrameRate || (exports.FrameRate = FrameRate = {}));
let FrameWidth;
/**
 * @ignore
 */
exports.FrameWidth = FrameWidth;
(function (FrameWidth) {
  FrameWidth[FrameWidth["FrameWidth640"] = 640] = "FrameWidth640";
})(FrameWidth || (exports.FrameWidth = FrameWidth = {}));
let FrameHeight;
/**
 * The video frame type.
 */
exports.FrameHeight = FrameHeight;
(function (FrameHeight) {
  FrameHeight[FrameHeight["FrameHeight360"] = 360] = "FrameHeight360";
})(FrameHeight || (exports.FrameHeight = FrameHeight = {}));
let VideoFrameType;
/**
 * Video output orientation mode.
 */
exports.VideoFrameType = VideoFrameType;
(function (VideoFrameType) {
  VideoFrameType[VideoFrameType["VideoFrameTypeBlankFrame"] = 0] = "VideoFrameTypeBlankFrame";
  VideoFrameType[VideoFrameType["VideoFrameTypeKeyFrame"] = 3] = "VideoFrameTypeKeyFrame";
  VideoFrameType[VideoFrameType["VideoFrameTypeDeltaFrame"] = 4] = "VideoFrameTypeDeltaFrame";
  VideoFrameType[VideoFrameType["VideoFrameTypeBFrame"] = 5] = "VideoFrameTypeBFrame";
  VideoFrameType[VideoFrameType["VideoFrameTypeDroppableFrame"] = 6] = "VideoFrameTypeDroppableFrame";
  VideoFrameType[VideoFrameType["VideoFrameTypeUnknow"] = 7] = "VideoFrameTypeUnknow";
})(VideoFrameType || (exports.VideoFrameType = VideoFrameType = {}));
let OrientationMode;
/**
 * Video degradation preferences when the bandwidth is a constraint.
 */
exports.OrientationMode = OrientationMode;
(function (OrientationMode) {
  OrientationMode[OrientationMode["OrientationModeAdaptive"] = 0] = "OrientationModeAdaptive";
  OrientationMode[OrientationMode["OrientationModeFixedLandscape"] = 1] = "OrientationModeFixedLandscape";
  OrientationMode[OrientationMode["OrientationModeFixedPortrait"] = 2] = "OrientationModeFixedPortrait";
})(OrientationMode || (exports.OrientationMode = OrientationMode = {}));
let DegradationPreference;
/**
 * The video dimension.
 */
exports.DegradationPreference = DegradationPreference;
(function (DegradationPreference) {
  DegradationPreference[DegradationPreference["MaintainQuality"] = 0] = "MaintainQuality";
  DegradationPreference[DegradationPreference["MaintainFramerate"] = 1] = "MaintainFramerate";
  DegradationPreference[DegradationPreference["MaintainBalanced"] = 2] = "MaintainBalanced";
  DegradationPreference[DegradationPreference["MaintainResolution"] = 3] = "MaintainResolution";
  DegradationPreference[DegradationPreference["Disabled"] = 100] = "Disabled";
})(DegradationPreference || (exports.DegradationPreference = DegradationPreference = {}));
class VideoDimensions {
  constructor() {
    _defineProperty(this, "width", void 0);
    _defineProperty(this, "height", void 0);
  }
}

/**
 * Video codec types.
 */
exports.VideoDimensions = VideoDimensions;
let VideoCodecType;
/**
 * @ignore
 */
exports.VideoCodecType = VideoCodecType;
(function (VideoCodecType) {
  VideoCodecType[VideoCodecType["VideoCodecNone"] = 0] = "VideoCodecNone";
  VideoCodecType[VideoCodecType["VideoCodecVp8"] = 1] = "VideoCodecVp8";
  VideoCodecType[VideoCodecType["VideoCodecH264"] = 2] = "VideoCodecH264";
  VideoCodecType[VideoCodecType["VideoCodecH265"] = 3] = "VideoCodecH265";
  VideoCodecType[VideoCodecType["VideoCodecGeneric"] = 6] = "VideoCodecGeneric";
  VideoCodecType[VideoCodecType["VideoCodecGenericH264"] = 7] = "VideoCodecGenericH264";
  VideoCodecType[VideoCodecType["VideoCodecAv1"] = 12] = "VideoCodecAv1";
  VideoCodecType[VideoCodecType["VideoCodecVp9"] = 13] = "VideoCodecVp9";
  VideoCodecType[VideoCodecType["VideoCodecGenericJpeg"] = 20] = "VideoCodecGenericJpeg";
})(VideoCodecType || (exports.VideoCodecType = VideoCodecType = {}));
let TCcMode;
/**
 * @ignore
 */
exports.TCcMode = TCcMode;
(function (TCcMode) {
  TCcMode[TCcMode["CcEnabled"] = 0] = "CcEnabled";
  TCcMode[TCcMode["CcDisabled"] = 1] = "CcDisabled";
})(TCcMode || (exports.TCcMode = TCcMode = {}));
class SenderOptions {
  constructor() {
    _defineProperty(this, "ccMode", void 0);
    _defineProperty(this, "codecType", void 0);
    _defineProperty(this, "targetBitrate", void 0);
  }
}

/**
 * The codec type of audio.
 */
exports.SenderOptions = SenderOptions;
let AudioCodecType;
/**
 * Audio encoding type.
 */
exports.AudioCodecType = AudioCodecType;
(function (AudioCodecType) {
  AudioCodecType[AudioCodecType["AudioCodecOpus"] = 1] = "AudioCodecOpus";
  AudioCodecType[AudioCodecType["AudioCodecPcma"] = 3] = "AudioCodecPcma";
  AudioCodecType[AudioCodecType["AudioCodecPcmu"] = 4] = "AudioCodecPcmu";
  AudioCodecType[AudioCodecType["AudioCodecG722"] = 5] = "AudioCodecG722";
  AudioCodecType[AudioCodecType["AudioCodecAaclc"] = 8] = "AudioCodecAaclc";
  AudioCodecType[AudioCodecType["AudioCodecHeaac"] = 9] = "AudioCodecHeaac";
  AudioCodecType[AudioCodecType["AudioCodecJc1"] = 10] = "AudioCodecJc1";
  AudioCodecType[AudioCodecType["AudioCodecHeaac2"] = 11] = "AudioCodecHeaac2";
  AudioCodecType[AudioCodecType["AudioCodecLpcnet"] = 12] = "AudioCodecLpcnet";
})(AudioCodecType || (exports.AudioCodecType = AudioCodecType = {}));
let AudioEncodingType;
/**
 * The adaptation mode of the watermark.
 */
exports.AudioEncodingType = AudioEncodingType;
(function (AudioEncodingType) {
  AudioEncodingType[AudioEncodingType["AudioEncodingTypeAac16000Low"] = 65793] = "AudioEncodingTypeAac16000Low";
  AudioEncodingType[AudioEncodingType["AudioEncodingTypeAac16000Medium"] = 65794] = "AudioEncodingTypeAac16000Medium";
  AudioEncodingType[AudioEncodingType["AudioEncodingTypeAac32000Low"] = 66049] = "AudioEncodingTypeAac32000Low";
  AudioEncodingType[AudioEncodingType["AudioEncodingTypeAac32000Medium"] = 66050] = "AudioEncodingTypeAac32000Medium";
  AudioEncodingType[AudioEncodingType["AudioEncodingTypeAac32000High"] = 66051] = "AudioEncodingTypeAac32000High";
  AudioEncodingType[AudioEncodingType["AudioEncodingTypeAac48000Medium"] = 66306] = "AudioEncodingTypeAac48000Medium";
  AudioEncodingType[AudioEncodingType["AudioEncodingTypeAac48000High"] = 66307] = "AudioEncodingTypeAac48000High";
  AudioEncodingType[AudioEncodingType["AudioEncodingTypeOpus16000Low"] = 131329] = "AudioEncodingTypeOpus16000Low";
  AudioEncodingType[AudioEncodingType["AudioEncodingTypeOpus16000Medium"] = 131330] = "AudioEncodingTypeOpus16000Medium";
  AudioEncodingType[AudioEncodingType["AudioEncodingTypeOpus48000Medium"] = 131842] = "AudioEncodingTypeOpus48000Medium";
  AudioEncodingType[AudioEncodingType["AudioEncodingTypeOpus48000High"] = 131843] = "AudioEncodingTypeOpus48000High";
})(AudioEncodingType || (exports.AudioEncodingType = AudioEncodingType = {}));
let WatermarkFitMode;
/**
 * @ignore
 */
exports.WatermarkFitMode = WatermarkFitMode;
(function (WatermarkFitMode) {
  WatermarkFitMode[WatermarkFitMode["FitModeCoverPosition"] = 0] = "FitModeCoverPosition";
  WatermarkFitMode[WatermarkFitMode["FitModeUseImageRatio"] = 1] = "FitModeUseImageRatio";
})(WatermarkFitMode || (exports.WatermarkFitMode = WatermarkFitMode = {}));
class EncodedAudioFrameAdvancedSettings {
  constructor() {
    _defineProperty(this, "speech", void 0);
    _defineProperty(this, "sendEvenIfEmpty", void 0);
  }
}

/**
 * Audio information after encoding.
 */
exports.EncodedAudioFrameAdvancedSettings = EncodedAudioFrameAdvancedSettings;
class EncodedAudioFrameInfo {
  constructor() {
    _defineProperty(this, "codec", void 0);
    _defineProperty(this, "sampleRateHz", void 0);
    _defineProperty(this, "samplesPerChannel", void 0);
    _defineProperty(this, "numberOfChannels", void 0);
    _defineProperty(this, "advancedSettings", void 0);
    _defineProperty(this, "captureTimeMs", void 0);
  }
}

/**
 * @ignore
 */
exports.EncodedAudioFrameInfo = EncodedAudioFrameInfo;
class AudioPcmDataInfo {
  constructor() {
    _defineProperty(this, "samplesPerChannel", void 0);
    _defineProperty(this, "channelNum", void 0);
    _defineProperty(this, "samplesOut", void 0);
    _defineProperty(this, "elapsedTimeMs", void 0);
    _defineProperty(this, "ntpTimeMs", void 0);
  }
}

/**
 * @ignore
 */
exports.AudioPcmDataInfo = AudioPcmDataInfo;
let H264PacketizeMode;
/**
 * The type of video streams.
 */
exports.H264PacketizeMode = H264PacketizeMode;
(function (H264PacketizeMode) {
  H264PacketizeMode[H264PacketizeMode["NonInterleaved"] = 0] = "NonInterleaved";
  H264PacketizeMode[H264PacketizeMode["SingleNalUnit"] = 1] = "SingleNalUnit";
})(H264PacketizeMode || (exports.H264PacketizeMode = H264PacketizeMode = {}));
let VideoStreamType;
/**
 * Video subscription options.
 */
exports.VideoStreamType = VideoStreamType;
(function (VideoStreamType) {
  VideoStreamType[VideoStreamType["VideoStreamHigh"] = 0] = "VideoStreamHigh";
  VideoStreamType[VideoStreamType["VideoStreamLow"] = 1] = "VideoStreamLow";
})(VideoStreamType || (exports.VideoStreamType = VideoStreamType = {}));
class VideoSubscriptionOptions {
  constructor() {
    _defineProperty(this, "type", void 0);
    _defineProperty(this, "encodedFrameOnly", void 0);
  }
}

/**
 * Information about externally encoded video frames.
 */
exports.VideoSubscriptionOptions = VideoSubscriptionOptions;
class EncodedVideoFrameInfo {
  constructor() {
    _defineProperty(this, "codecType", void 0);
    _defineProperty(this, "width", void 0);
    _defineProperty(this, "height", void 0);
    _defineProperty(this, "framesPerSecond", void 0);
    _defineProperty(this, "frameType", void 0);
    _defineProperty(this, "rotation", void 0);
    _defineProperty(this, "trackId", void 0);
    _defineProperty(this, "captureTimeMs", void 0);
    _defineProperty(this, "decodeTimeMs", void 0);
    _defineProperty(this, "uid", void 0);
    _defineProperty(this, "streamType", void 0);
  }
}

/**
 * Compression preference for video encoding.
 */
exports.EncodedVideoFrameInfo = EncodedVideoFrameInfo;
let CompressionPreference;
/**
 * Video encoder preference.
 */
exports.CompressionPreference = CompressionPreference;
(function (CompressionPreference) {
  CompressionPreference[CompressionPreference["PreferLowLatency"] = 0] = "PreferLowLatency";
  CompressionPreference[CompressionPreference["PreferQuality"] = 1] = "PreferQuality";
})(CompressionPreference || (exports.CompressionPreference = CompressionPreference = {}));
let EncodingPreference;
/**
 * Advanced options for video encoding.
 */
exports.EncodingPreference = EncodingPreference;
(function (EncodingPreference) {
  EncodingPreference[EncodingPreference["PreferAuto"] = -1] = "PreferAuto";
  EncodingPreference[EncodingPreference["PreferSoftware"] = 0] = "PreferSoftware";
  EncodingPreference[EncodingPreference["PreferHardware"] = 1] = "PreferHardware";
})(EncodingPreference || (exports.EncodingPreference = EncodingPreference = {}));
class AdvanceOptions {
  constructor() {
    _defineProperty(this, "encodingPreference", void 0);
    _defineProperty(this, "compressionPreference", void 0);
  }
}

/**
 * Video mirror mode.
 */
exports.AdvanceOptions = AdvanceOptions;
let VideoMirrorModeType;
/**
 * Video encoder configurations.
 */
exports.VideoMirrorModeType = VideoMirrorModeType;
(function (VideoMirrorModeType) {
  VideoMirrorModeType[VideoMirrorModeType["VideoMirrorModeAuto"] = 0] = "VideoMirrorModeAuto";
  VideoMirrorModeType[VideoMirrorModeType["VideoMirrorModeEnabled"] = 1] = "VideoMirrorModeEnabled";
  VideoMirrorModeType[VideoMirrorModeType["VideoMirrorModeDisabled"] = 2] = "VideoMirrorModeDisabled";
})(VideoMirrorModeType || (exports.VideoMirrorModeType = VideoMirrorModeType = {}));
class VideoEncoderConfiguration {
  constructor() {
    _defineProperty(this, "codecType", void 0);
    _defineProperty(this, "dimensions", void 0);
    _defineProperty(this, "frameRate", void 0);
    _defineProperty(this, "bitrate", void 0);
    _defineProperty(this, "minBitrate", void 0);
    _defineProperty(this, "orientationMode", void 0);
    _defineProperty(this, "degradationPreference", void 0);
    _defineProperty(this, "mirrorMode", void 0);
    _defineProperty(this, "advanceOptions", void 0);
  }
}

/**
 * The configurations for the data stream.
 * The following table shows the SDK behaviors under different parameter settings:
 */
exports.VideoEncoderConfiguration = VideoEncoderConfiguration;
class DataStreamConfig {
  constructor() {
    _defineProperty(this, "syncWithAudio", void 0);
    _defineProperty(this, "ordered", void 0);
  }
}

/**
 * The mode in which the video stream is sent.
 */
exports.DataStreamConfig = DataStreamConfig;
let SimulcastStreamMode;
/**
 * The configuration of the low-quality video stream.
 */
exports.SimulcastStreamMode = SimulcastStreamMode;
(function (SimulcastStreamMode) {
  SimulcastStreamMode[SimulcastStreamMode["AutoSimulcastStream"] = -1] = "AutoSimulcastStream";
  SimulcastStreamMode[SimulcastStreamMode["DisableSimulcastStream"] = 0] = "DisableSimulcastStream";
  SimulcastStreamMode[SimulcastStreamMode["EnableSimulcastStream"] = 1] = "EnableSimulcastStream";
})(SimulcastStreamMode || (exports.SimulcastStreamMode = SimulcastStreamMode = {}));
class SimulcastStreamConfig {
  constructor() {
    _defineProperty(this, "dimensions", void 0);
    _defineProperty(this, "kBitrate", void 0);
    _defineProperty(this, "framerate", void 0);
  }
}

/**
 * The location of the target area relative to the screen or window. If you do not set this parameter, the SDK selects the whole screen or window.
 */
exports.SimulcastStreamConfig = SimulcastStreamConfig;
class Rectangle {
  constructor() {
    _defineProperty(this, "x", void 0);
    _defineProperty(this, "y", void 0);
    _defineProperty(this, "width", void 0);
    _defineProperty(this, "height", void 0);
  }
}

/**
 * The position and size of the watermark on the screen.
 * The position and size of the watermark on the screen are determined by xRatio, yRatio, and widthRatio:(xRatio, yRatio) refers to the coordinates of the upper left corner of the watermark, which determines the distance from the upper left corner of the watermark to the upper left corner of the screen.The widthRatio determines the width of the watermark.
 */
exports.Rectangle = Rectangle;
class WatermarkRatio {
  constructor() {
    _defineProperty(this, "xRatio", void 0);
    _defineProperty(this, "yRatio", void 0);
    _defineProperty(this, "widthRatio", void 0);
  }
}

/**
 * Configurations of the watermark image.
 */
exports.WatermarkRatio = WatermarkRatio;
class WatermarkOptions {
  constructor() {
    _defineProperty(this, "visibleInPreview", void 0);
    _defineProperty(this, "positionInLandscapeMode", void 0);
    _defineProperty(this, "positionInPortraitMode", void 0);
    _defineProperty(this, "watermarkRatio", void 0);
    _defineProperty(this, "mode", void 0);
  }
}

/**
 * Statistics of the channel.
 */
exports.WatermarkOptions = WatermarkOptions;
class RtcStats {
  constructor() {
    _defineProperty(this, "duration", void 0);
    _defineProperty(this, "txBytes", void 0);
    _defineProperty(this, "rxBytes", void 0);
    _defineProperty(this, "txAudioBytes", void 0);
    _defineProperty(this, "txVideoBytes", void 0);
    _defineProperty(this, "rxAudioBytes", void 0);
    _defineProperty(this, "rxVideoBytes", void 0);
    _defineProperty(this, "txKBitRate", void 0);
    _defineProperty(this, "rxKBitRate", void 0);
    _defineProperty(this, "rxAudioKBitRate", void 0);
    _defineProperty(this, "txAudioKBitRate", void 0);
    _defineProperty(this, "rxVideoKBitRate", void 0);
    _defineProperty(this, "txVideoKBitRate", void 0);
    _defineProperty(this, "lastmileDelay", void 0);
    _defineProperty(this, "userCount", void 0);
    _defineProperty(this, "cpuAppUsage", void 0);
    _defineProperty(this, "cpuTotalUsage", void 0);
    _defineProperty(this, "gatewayRtt", void 0);
    _defineProperty(this, "memoryAppUsageRatio", void 0);
    _defineProperty(this, "memoryTotalUsageRatio", void 0);
    _defineProperty(this, "memoryAppUsageInKbytes", void 0);
    _defineProperty(this, "connectTimeMs", void 0);
    _defineProperty(this, "firstAudioPacketDuration", void 0);
    _defineProperty(this, "firstVideoPacketDuration", void 0);
    _defineProperty(this, "firstVideoKeyFramePacketDuration", void 0);
    _defineProperty(this, "packetsBeforeFirstKeyFramePacket", void 0);
    _defineProperty(this, "firstAudioPacketDurationAfterUnmute", void 0);
    _defineProperty(this, "firstVideoPacketDurationAfterUnmute", void 0);
    _defineProperty(this, "firstVideoKeyFramePacketDurationAfterUnmute", void 0);
    _defineProperty(this, "firstVideoKeyFrameDecodedDurationAfterUnmute", void 0);
    _defineProperty(this, "firstVideoKeyFrameRenderedDurationAfterUnmute", void 0);
    _defineProperty(this, "txPacketLossRate", void 0);
    _defineProperty(this, "rxPacketLossRate", void 0);
  }
}

/**
 * The capture type of the custom video source.
 */
exports.RtcStats = RtcStats;
let VideoSourceType;
/**
 * The user role in the interactive live streaming.
 */
exports.VideoSourceType = VideoSourceType;
(function (VideoSourceType) {
  VideoSourceType[VideoSourceType["VideoSourceCameraPrimary"] = 0] = "VideoSourceCameraPrimary";
  VideoSourceType[VideoSourceType["VideoSourceCamera"] = 0] = "VideoSourceCamera";
  VideoSourceType[VideoSourceType["VideoSourceCameraSecondary"] = 1] = "VideoSourceCameraSecondary";
  VideoSourceType[VideoSourceType["VideoSourceScreenPrimary"] = 2] = "VideoSourceScreenPrimary";
  VideoSourceType[VideoSourceType["VideoSourceScreen"] = 2] = "VideoSourceScreen";
  VideoSourceType[VideoSourceType["VideoSourceScreenSecondary"] = 3] = "VideoSourceScreenSecondary";
  VideoSourceType[VideoSourceType["VideoSourceCustom"] = 4] = "VideoSourceCustom";
  VideoSourceType[VideoSourceType["VideoSourceMediaPlayer"] = 5] = "VideoSourceMediaPlayer";
  VideoSourceType[VideoSourceType["VideoSourceRtcImagePng"] = 6] = "VideoSourceRtcImagePng";
  VideoSourceType[VideoSourceType["VideoSourceRtcImageJpeg"] = 7] = "VideoSourceRtcImageJpeg";
  VideoSourceType[VideoSourceType["VideoSourceRtcImageGif"] = 8] = "VideoSourceRtcImageGif";
  VideoSourceType[VideoSourceType["VideoSourceRemote"] = 9] = "VideoSourceRemote";
  VideoSourceType[VideoSourceType["VideoSourceTranscoded"] = 10] = "VideoSourceTranscoded";
  VideoSourceType[VideoSourceType["VideoSourceUnknown"] = 100] = "VideoSourceUnknown";
})(VideoSourceType || (exports.VideoSourceType = VideoSourceType = {}));
let ClientRoleType;
/**
 * Quality change of the local video in terms of target frame rate and target bit rate since last count.
 */
exports.ClientRoleType = ClientRoleType;
(function (ClientRoleType) {
  ClientRoleType[ClientRoleType["ClientRoleBroadcaster"] = 1] = "ClientRoleBroadcaster";
  ClientRoleType[ClientRoleType["ClientRoleAudience"] = 2] = "ClientRoleAudience";
})(ClientRoleType || (exports.ClientRoleType = ClientRoleType = {}));
let QualityAdaptIndication;
/**
 * The latency level of an audience member in interactive live streaming. This enum takes effect only when the user role is set to ClientRoleAudience .
 */
exports.QualityAdaptIndication = QualityAdaptIndication;
(function (QualityAdaptIndication) {
  QualityAdaptIndication[QualityAdaptIndication["AdaptNone"] = 0] = "AdaptNone";
  QualityAdaptIndication[QualityAdaptIndication["AdaptUpBandwidth"] = 1] = "AdaptUpBandwidth";
  QualityAdaptIndication[QualityAdaptIndication["AdaptDownBandwidth"] = 2] = "AdaptDownBandwidth";
})(QualityAdaptIndication || (exports.QualityAdaptIndication = QualityAdaptIndication = {}));
let AudienceLatencyLevelType;
/**
 * The detailed options of a user.
 */
exports.AudienceLatencyLevelType = AudienceLatencyLevelType;
(function (AudienceLatencyLevelType) {
  AudienceLatencyLevelType[AudienceLatencyLevelType["AudienceLatencyLevelLowLatency"] = 1] = "AudienceLatencyLevelLowLatency";
  AudienceLatencyLevelType[AudienceLatencyLevelType["AudienceLatencyLevelUltraLowLatency"] = 2] = "AudienceLatencyLevelUltraLowLatency";
})(AudienceLatencyLevelType || (exports.AudienceLatencyLevelType = AudienceLatencyLevelType = {}));
class ClientRoleOptions {
  constructor() {
    _defineProperty(this, "audienceLatencyLevel", void 0);
  }
}

/**
 * The Quality of Experience (QoE) of the local user when receiving a remote audio stream.
 */
exports.ClientRoleOptions = ClientRoleOptions;
let ExperienceQualityType;
/**
 * Reasons why the QoE of the local user when receiving a remote audio stream is poor.
 */
exports.ExperienceQualityType = ExperienceQualityType;
(function (ExperienceQualityType) {
  ExperienceQualityType[ExperienceQualityType["ExperienceQualityGood"] = 0] = "ExperienceQualityGood";
  ExperienceQualityType[ExperienceQualityType["ExperienceQualityBad"] = 1] = "ExperienceQualityBad";
})(ExperienceQualityType || (exports.ExperienceQualityType = ExperienceQualityType = {}));
let ExperiencePoorReason;
/**
 * Audio statistics of the remote user.
 */
exports.ExperiencePoorReason = ExperiencePoorReason;
(function (ExperiencePoorReason) {
  ExperiencePoorReason[ExperiencePoorReason["ExperienceReasonNone"] = 0] = "ExperienceReasonNone";
  ExperiencePoorReason[ExperiencePoorReason["RemoteNetworkQualityPoor"] = 1] = "RemoteNetworkQualityPoor";
  ExperiencePoorReason[ExperiencePoorReason["LocalNetworkQualityPoor"] = 2] = "LocalNetworkQualityPoor";
  ExperiencePoorReason[ExperiencePoorReason["WirelessSignalPoor"] = 4] = "WirelessSignalPoor";
  ExperiencePoorReason[ExperiencePoorReason["WifiBluetoothCoexist"] = 8] = "WifiBluetoothCoexist";
})(ExperiencePoorReason || (exports.ExperiencePoorReason = ExperiencePoorReason = {}));
class RemoteAudioStats {
  constructor() {
    _defineProperty(this, "uid", void 0);
    _defineProperty(this, "quality", void 0);
    _defineProperty(this, "networkTransportDelay", void 0);
    _defineProperty(this, "jitterBufferDelay", void 0);
    _defineProperty(this, "audioLossRate", void 0);
    _defineProperty(this, "numChannels", void 0);
    _defineProperty(this, "receivedSampleRate", void 0);
    _defineProperty(this, "receivedBitrate", void 0);
    _defineProperty(this, "totalFrozenTime", void 0);
    _defineProperty(this, "frozenRate", void 0);
    _defineProperty(this, "mosValue", void 0);
    _defineProperty(this, "totalActiveTime", void 0);
    _defineProperty(this, "publishDuration", void 0);
    _defineProperty(this, "qoeQuality", void 0);
    _defineProperty(this, "qualityChangedReason", void 0);
  }
}

/**
 * The audio profile.
 */
exports.RemoteAudioStats = RemoteAudioStats;
let AudioProfileType;
/**
 * The audio scenarios.
 */
exports.AudioProfileType = AudioProfileType;
(function (AudioProfileType) {
  AudioProfileType[AudioProfileType["AudioProfileDefault"] = 0] = "AudioProfileDefault";
  AudioProfileType[AudioProfileType["AudioProfileSpeechStandard"] = 1] = "AudioProfileSpeechStandard";
  AudioProfileType[AudioProfileType["AudioProfileMusicStandard"] = 2] = "AudioProfileMusicStandard";
  AudioProfileType[AudioProfileType["AudioProfileMusicStandardStereo"] = 3] = "AudioProfileMusicStandardStereo";
  AudioProfileType[AudioProfileType["AudioProfileMusicHighQuality"] = 4] = "AudioProfileMusicHighQuality";
  AudioProfileType[AudioProfileType["AudioProfileMusicHighQualityStereo"] = 5] = "AudioProfileMusicHighQualityStereo";
  AudioProfileType[AudioProfileType["AudioProfileIot"] = 6] = "AudioProfileIot";
  AudioProfileType[AudioProfileType["AudioProfileNum"] = 7] = "AudioProfileNum";
})(AudioProfileType || (exports.AudioProfileType = AudioProfileType = {}));
let AudioScenarioType;
/**
 * The format of the video frame.
 */
exports.AudioScenarioType = AudioScenarioType;
(function (AudioScenarioType) {
  AudioScenarioType[AudioScenarioType["AudioScenarioDefault"] = 0] = "AudioScenarioDefault";
  AudioScenarioType[AudioScenarioType["AudioScenarioGameStreaming"] = 3] = "AudioScenarioGameStreaming";
  AudioScenarioType[AudioScenarioType["AudioScenarioChatroom"] = 5] = "AudioScenarioChatroom";
  AudioScenarioType[AudioScenarioType["AudioScenarioChorus"] = 7] = "AudioScenarioChorus";
  AudioScenarioType[AudioScenarioType["AudioScenarioMeeting"] = 8] = "AudioScenarioMeeting";
  AudioScenarioType[AudioScenarioType["AudioScenarioNum"] = 9] = "AudioScenarioNum";
})(AudioScenarioType || (exports.AudioScenarioType = AudioScenarioType = {}));
class VideoFormat {
  constructor() {
    _defineProperty(this, "width", void 0);
    _defineProperty(this, "height", void 0);
    _defineProperty(this, "fps", void 0);
  }
}

/**
 * The content hint for screen sharing.
 */
exports.VideoFormat = VideoFormat;
let VideoContentHint;
/**
 * The screen sharing scenario.
 */
exports.VideoContentHint = VideoContentHint;
(function (VideoContentHint) {
  VideoContentHint[VideoContentHint["ContentHintNone"] = 0] = "ContentHintNone";
  VideoContentHint[VideoContentHint["ContentHintMotion"] = 1] = "ContentHintMotion";
  VideoContentHint[VideoContentHint["ContentHintDetails"] = 2] = "ContentHintDetails";
})(VideoContentHint || (exports.VideoContentHint = VideoContentHint = {}));
let ScreenScenarioType;
/**
 * The brightness level of the video image captured by the local camera.
 */
exports.ScreenScenarioType = ScreenScenarioType;
(function (ScreenScenarioType) {
  ScreenScenarioType[ScreenScenarioType["ScreenScenarioDocument"] = 1] = "ScreenScenarioDocument";
  ScreenScenarioType[ScreenScenarioType["ScreenScenarioGaming"] = 2] = "ScreenScenarioGaming";
  ScreenScenarioType[ScreenScenarioType["ScreenScenarioVideo"] = 3] = "ScreenScenarioVideo";
  ScreenScenarioType[ScreenScenarioType["ScreenScenarioRdc"] = 4] = "ScreenScenarioRdc";
})(ScreenScenarioType || (exports.ScreenScenarioType = ScreenScenarioType = {}));
let CaptureBrightnessLevelType;
/**
 * The state of the local audio.
 */
exports.CaptureBrightnessLevelType = CaptureBrightnessLevelType;
(function (CaptureBrightnessLevelType) {
  CaptureBrightnessLevelType[CaptureBrightnessLevelType["CaptureBrightnessLevelInvalid"] = -1] = "CaptureBrightnessLevelInvalid";
  CaptureBrightnessLevelType[CaptureBrightnessLevelType["CaptureBrightnessLevelNormal"] = 0] = "CaptureBrightnessLevelNormal";
  CaptureBrightnessLevelType[CaptureBrightnessLevelType["CaptureBrightnessLevelBright"] = 1] = "CaptureBrightnessLevelBright";
  CaptureBrightnessLevelType[CaptureBrightnessLevelType["CaptureBrightnessLevelDark"] = 2] = "CaptureBrightnessLevelDark";
})(CaptureBrightnessLevelType || (exports.CaptureBrightnessLevelType = CaptureBrightnessLevelType = {}));
let LocalAudioStreamState;
/**
 * Local audio state error codes.
 */
exports.LocalAudioStreamState = LocalAudioStreamState;
(function (LocalAudioStreamState) {
  LocalAudioStreamState[LocalAudioStreamState["LocalAudioStreamStateStopped"] = 0] = "LocalAudioStreamStateStopped";
  LocalAudioStreamState[LocalAudioStreamState["LocalAudioStreamStateRecording"] = 1] = "LocalAudioStreamStateRecording";
  LocalAudioStreamState[LocalAudioStreamState["LocalAudioStreamStateEncoding"] = 2] = "LocalAudioStreamStateEncoding";
  LocalAudioStreamState[LocalAudioStreamState["LocalAudioStreamStateFailed"] = 3] = "LocalAudioStreamStateFailed";
})(LocalAudioStreamState || (exports.LocalAudioStreamState = LocalAudioStreamState = {}));
let LocalAudioStreamError;
/**
 * Local video state types.
 */
exports.LocalAudioStreamError = LocalAudioStreamError;
(function (LocalAudioStreamError) {
  LocalAudioStreamError[LocalAudioStreamError["LocalAudioStreamErrorOk"] = 0] = "LocalAudioStreamErrorOk";
  LocalAudioStreamError[LocalAudioStreamError["LocalAudioStreamErrorFailure"] = 1] = "LocalAudioStreamErrorFailure";
  LocalAudioStreamError[LocalAudioStreamError["LocalAudioStreamErrorDeviceNoPermission"] = 2] = "LocalAudioStreamErrorDeviceNoPermission";
  LocalAudioStreamError[LocalAudioStreamError["LocalAudioStreamErrorDeviceBusy"] = 3] = "LocalAudioStreamErrorDeviceBusy";
  LocalAudioStreamError[LocalAudioStreamError["LocalAudioStreamErrorRecordFailure"] = 4] = "LocalAudioStreamErrorRecordFailure";
  LocalAudioStreamError[LocalAudioStreamError["LocalAudioStreamErrorEncodeFailure"] = 5] = "LocalAudioStreamErrorEncodeFailure";
  LocalAudioStreamError[LocalAudioStreamError["LocalAudioStreamErrorNoRecordingDevice"] = 6] = "LocalAudioStreamErrorNoRecordingDevice";
  LocalAudioStreamError[LocalAudioStreamError["LocalAudioStreamErrorNoPlayoutDevice"] = 7] = "LocalAudioStreamErrorNoPlayoutDevice";
  LocalAudioStreamError[LocalAudioStreamError["LocalAudioStreamErrorInterrupted"] = 8] = "LocalAudioStreamErrorInterrupted";
  LocalAudioStreamError[LocalAudioStreamError["LocalAudioStreamErrorRecordInvalidId"] = 9] = "LocalAudioStreamErrorRecordInvalidId";
  LocalAudioStreamError[LocalAudioStreamError["LocalAudioStreamErrorPlayoutInvalidId"] = 10] = "LocalAudioStreamErrorPlayoutInvalidId";
})(LocalAudioStreamError || (exports.LocalAudioStreamError = LocalAudioStreamError = {}));
let LocalVideoStreamState;
/**
 * Local video state error codes.
 */
exports.LocalVideoStreamState = LocalVideoStreamState;
(function (LocalVideoStreamState) {
  LocalVideoStreamState[LocalVideoStreamState["LocalVideoStreamStateStopped"] = 0] = "LocalVideoStreamStateStopped";
  LocalVideoStreamState[LocalVideoStreamState["LocalVideoStreamStateCapturing"] = 1] = "LocalVideoStreamStateCapturing";
  LocalVideoStreamState[LocalVideoStreamState["LocalVideoStreamStateEncoding"] = 2] = "LocalVideoStreamStateEncoding";
  LocalVideoStreamState[LocalVideoStreamState["LocalVideoStreamStateFailed"] = 3] = "LocalVideoStreamStateFailed";
})(LocalVideoStreamState || (exports.LocalVideoStreamState = LocalVideoStreamState = {}));
let LocalVideoStreamError;
/**
 * Remote audio states.
 */
exports.LocalVideoStreamError = LocalVideoStreamError;
(function (LocalVideoStreamError) {
  LocalVideoStreamError[LocalVideoStreamError["LocalVideoStreamErrorOk"] = 0] = "LocalVideoStreamErrorOk";
  LocalVideoStreamError[LocalVideoStreamError["LocalVideoStreamErrorFailure"] = 1] = "LocalVideoStreamErrorFailure";
  LocalVideoStreamError[LocalVideoStreamError["LocalVideoStreamErrorDeviceNoPermission"] = 2] = "LocalVideoStreamErrorDeviceNoPermission";
  LocalVideoStreamError[LocalVideoStreamError["LocalVideoStreamErrorDeviceBusy"] = 3] = "LocalVideoStreamErrorDeviceBusy";
  LocalVideoStreamError[LocalVideoStreamError["LocalVideoStreamErrorCaptureFailure"] = 4] = "LocalVideoStreamErrorCaptureFailure";
  LocalVideoStreamError[LocalVideoStreamError["LocalVideoStreamErrorEncodeFailure"] = 5] = "LocalVideoStreamErrorEncodeFailure";
  LocalVideoStreamError[LocalVideoStreamError["LocalVideoStreamErrorCaptureInbackground"] = 6] = "LocalVideoStreamErrorCaptureInbackground";
  LocalVideoStreamError[LocalVideoStreamError["LocalVideoStreamErrorCaptureMultipleForegroundApps"] = 7] = "LocalVideoStreamErrorCaptureMultipleForegroundApps";
  LocalVideoStreamError[LocalVideoStreamError["LocalVideoStreamErrorDeviceNotFound"] = 8] = "LocalVideoStreamErrorDeviceNotFound";
  LocalVideoStreamError[LocalVideoStreamError["LocalVideoStreamErrorDeviceDisconnected"] = 9] = "LocalVideoStreamErrorDeviceDisconnected";
  LocalVideoStreamError[LocalVideoStreamError["LocalVideoStreamErrorDeviceInvalidId"] = 10] = "LocalVideoStreamErrorDeviceInvalidId";
  LocalVideoStreamError[LocalVideoStreamError["LocalVideoStreamErrorDeviceSystemPressure"] = 101] = "LocalVideoStreamErrorDeviceSystemPressure";
  LocalVideoStreamError[LocalVideoStreamError["LocalVideoStreamErrorScreenCaptureWindowMinimized"] = 11] = "LocalVideoStreamErrorScreenCaptureWindowMinimized";
  LocalVideoStreamError[LocalVideoStreamError["LocalVideoStreamErrorScreenCaptureWindowClosed"] = 12] = "LocalVideoStreamErrorScreenCaptureWindowClosed";
  LocalVideoStreamError[LocalVideoStreamError["LocalVideoStreamErrorScreenCaptureWindowOccluded"] = 13] = "LocalVideoStreamErrorScreenCaptureWindowOccluded";
  LocalVideoStreamError[LocalVideoStreamError["LocalVideoStreamErrorScreenCaptureWindowNotSupported"] = 20] = "LocalVideoStreamErrorScreenCaptureWindowNotSupported";
  LocalVideoStreamError[LocalVideoStreamError["LocalVideoStreamErrorScreenCaptureFailure"] = 21] = "LocalVideoStreamErrorScreenCaptureFailure";
  LocalVideoStreamError[LocalVideoStreamError["LocalVideoStreamErrorScreenCaptureNoPermission"] = 22] = "LocalVideoStreamErrorScreenCaptureNoPermission";
})(LocalVideoStreamError || (exports.LocalVideoStreamError = LocalVideoStreamError = {}));
let RemoteAudioState;
/**
 * The reason for the remote audio state change.
 */
exports.RemoteAudioState = RemoteAudioState;
(function (RemoteAudioState) {
  RemoteAudioState[RemoteAudioState["RemoteAudioStateStopped"] = 0] = "RemoteAudioStateStopped";
  RemoteAudioState[RemoteAudioState["RemoteAudioStateStarting"] = 1] = "RemoteAudioStateStarting";
  RemoteAudioState[RemoteAudioState["RemoteAudioStateDecoding"] = 2] = "RemoteAudioStateDecoding";
  RemoteAudioState[RemoteAudioState["RemoteAudioStateFrozen"] = 3] = "RemoteAudioStateFrozen";
  RemoteAudioState[RemoteAudioState["RemoteAudioStateFailed"] = 4] = "RemoteAudioStateFailed";
})(RemoteAudioState || (exports.RemoteAudioState = RemoteAudioState = {}));
let RemoteAudioStateReason;
/**
 * The state of the remote video.
 */
exports.RemoteAudioStateReason = RemoteAudioStateReason;
(function (RemoteAudioStateReason) {
  RemoteAudioStateReason[RemoteAudioStateReason["RemoteAudioReasonInternal"] = 0] = "RemoteAudioReasonInternal";
  RemoteAudioStateReason[RemoteAudioStateReason["RemoteAudioReasonNetworkCongestion"] = 1] = "RemoteAudioReasonNetworkCongestion";
  RemoteAudioStateReason[RemoteAudioStateReason["RemoteAudioReasonNetworkRecovery"] = 2] = "RemoteAudioReasonNetworkRecovery";
  RemoteAudioStateReason[RemoteAudioStateReason["RemoteAudioReasonLocalMuted"] = 3] = "RemoteAudioReasonLocalMuted";
  RemoteAudioStateReason[RemoteAudioStateReason["RemoteAudioReasonLocalUnmuted"] = 4] = "RemoteAudioReasonLocalUnmuted";
  RemoteAudioStateReason[RemoteAudioStateReason["RemoteAudioReasonRemoteMuted"] = 5] = "RemoteAudioReasonRemoteMuted";
  RemoteAudioStateReason[RemoteAudioStateReason["RemoteAudioReasonRemoteUnmuted"] = 6] = "RemoteAudioReasonRemoteUnmuted";
  RemoteAudioStateReason[RemoteAudioStateReason["RemoteAudioReasonRemoteOffline"] = 7] = "RemoteAudioReasonRemoteOffline";
})(RemoteAudioStateReason || (exports.RemoteAudioStateReason = RemoteAudioStateReason = {}));
let RemoteVideoState;
/**
 * The reason for the remote video state change.
 */
exports.RemoteVideoState = RemoteVideoState;
(function (RemoteVideoState) {
  RemoteVideoState[RemoteVideoState["RemoteVideoStateStopped"] = 0] = "RemoteVideoStateStopped";
  RemoteVideoState[RemoteVideoState["RemoteVideoStateStarting"] = 1] = "RemoteVideoStateStarting";
  RemoteVideoState[RemoteVideoState["RemoteVideoStateDecoding"] = 2] = "RemoteVideoStateDecoding";
  RemoteVideoState[RemoteVideoState["RemoteVideoStateFrozen"] = 3] = "RemoteVideoStateFrozen";
  RemoteVideoState[RemoteVideoState["RemoteVideoStateFailed"] = 4] = "RemoteVideoStateFailed";
})(RemoteVideoState || (exports.RemoteVideoState = RemoteVideoState = {}));
let RemoteVideoStateReason;
/**
 * @ignore
 */
exports.RemoteVideoStateReason = RemoteVideoStateReason;
(function (RemoteVideoStateReason) {
  RemoteVideoStateReason[RemoteVideoStateReason["RemoteVideoStateReasonInternal"] = 0] = "RemoteVideoStateReasonInternal";
  RemoteVideoStateReason[RemoteVideoStateReason["RemoteVideoStateReasonNetworkCongestion"] = 1] = "RemoteVideoStateReasonNetworkCongestion";
  RemoteVideoStateReason[RemoteVideoStateReason["RemoteVideoStateReasonNetworkRecovery"] = 2] = "RemoteVideoStateReasonNetworkRecovery";
  RemoteVideoStateReason[RemoteVideoStateReason["RemoteVideoStateReasonLocalMuted"] = 3] = "RemoteVideoStateReasonLocalMuted";
  RemoteVideoStateReason[RemoteVideoStateReason["RemoteVideoStateReasonLocalUnmuted"] = 4] = "RemoteVideoStateReasonLocalUnmuted";
  RemoteVideoStateReason[RemoteVideoStateReason["RemoteVideoStateReasonRemoteMuted"] = 5] = "RemoteVideoStateReasonRemoteMuted";
  RemoteVideoStateReason[RemoteVideoStateReason["RemoteVideoStateReasonRemoteUnmuted"] = 6] = "RemoteVideoStateReasonRemoteUnmuted";
  RemoteVideoStateReason[RemoteVideoStateReason["RemoteVideoStateReasonRemoteOffline"] = 7] = "RemoteVideoStateReasonRemoteOffline";
  RemoteVideoStateReason[RemoteVideoStateReason["RemoteVideoStateReasonAudioFallback"] = 8] = "RemoteVideoStateReasonAudioFallback";
  RemoteVideoStateReason[RemoteVideoStateReason["RemoteVideoStateReasonAudioFallbackRecovery"] = 9] = "RemoteVideoStateReasonAudioFallbackRecovery";
  RemoteVideoStateReason[RemoteVideoStateReason["RemoteVideoStateReasonVideoStreamTypeChangeToLow"] = 10] = "RemoteVideoStateReasonVideoStreamTypeChangeToLow";
  RemoteVideoStateReason[RemoteVideoStateReason["RemoteVideoStateReasonVideoStreamTypeChangeToHigh"] = 11] = "RemoteVideoStateReasonVideoStreamTypeChangeToHigh";
  RemoteVideoStateReason[RemoteVideoStateReason["RemoteVideoStateReasonSdkInBackground"] = 12] = "RemoteVideoStateReasonSdkInBackground";
})(RemoteVideoStateReason || (exports.RemoteVideoStateReason = RemoteVideoStateReason = {}));
let RemoteUserState;
/**
 * @ignore
 */
exports.RemoteUserState = RemoteUserState;
(function (RemoteUserState) {
  RemoteUserState[RemoteUserState["UserStateMuteAudio"] = 1] = "UserStateMuteAudio";
  RemoteUserState[RemoteUserState["UserStateMuteVideo"] = 2] = "UserStateMuteVideo";
  RemoteUserState[RemoteUserState["UserStateEnableVideo"] = 16] = "UserStateEnableVideo";
  RemoteUserState[RemoteUserState["UserStateEnableLocalVideo"] = 256] = "UserStateEnableLocalVideo";
})(RemoteUserState || (exports.RemoteUserState = RemoteUserState = {}));
class VideoTrackInfo {
  constructor() {
    _defineProperty(this, "isLocal", void 0);
    _defineProperty(this, "ownerUid", void 0);
    _defineProperty(this, "trackId", void 0);
    _defineProperty(this, "channelId", void 0);
    _defineProperty(this, "streamType", void 0);
    _defineProperty(this, "codecType", void 0);
    _defineProperty(this, "encodedFrameOnly", void 0);
    _defineProperty(this, "sourceType", void 0);
    _defineProperty(this, "observationPosition", void 0);
  }
}

/**
 * @ignore
 */
exports.VideoTrackInfo = VideoTrackInfo;
let RemoteVideoDownscaleLevel;
/**
 * The volume information of users.
 */
exports.RemoteVideoDownscaleLevel = RemoteVideoDownscaleLevel;
(function (RemoteVideoDownscaleLevel) {
  RemoteVideoDownscaleLevel[RemoteVideoDownscaleLevel["RemoteVideoDownscaleLevelNone"] = 0] = "RemoteVideoDownscaleLevelNone";
  RemoteVideoDownscaleLevel[RemoteVideoDownscaleLevel["RemoteVideoDownscaleLevel1"] = 1] = "RemoteVideoDownscaleLevel1";
  RemoteVideoDownscaleLevel[RemoteVideoDownscaleLevel["RemoteVideoDownscaleLevel2"] = 2] = "RemoteVideoDownscaleLevel2";
  RemoteVideoDownscaleLevel[RemoteVideoDownscaleLevel["RemoteVideoDownscaleLevel3"] = 3] = "RemoteVideoDownscaleLevel3";
  RemoteVideoDownscaleLevel[RemoteVideoDownscaleLevel["RemoteVideoDownscaleLevel4"] = 4] = "RemoteVideoDownscaleLevel4";
})(RemoteVideoDownscaleLevel || (exports.RemoteVideoDownscaleLevel = RemoteVideoDownscaleLevel = {}));
class AudioVolumeInfo {
  constructor() {
    _defineProperty(this, "uid", void 0);
    _defineProperty(this, "volume", void 0);
    _defineProperty(this, "vad", void 0);
    _defineProperty(this, "voicePitch", void 0);
  }
}

/**
 * The audio device information.
 * This class is for Android only.
 */
exports.AudioVolumeInfo = AudioVolumeInfo;
class DeviceInfo {
  constructor() {
    _defineProperty(this, "isLowLatencyAudioSupported", void 0);
  }
}

/**
 * @ignore
 */
exports.DeviceInfo = DeviceInfo;
class Packet {
  constructor() {
    _defineProperty(this, "buffer", void 0);
    _defineProperty(this, "size", void 0);
  }
}

/**
 * The audio sampling rate of the stream to be pushed to the CDN.
 */
exports.Packet = Packet;
let AudioSampleRateType;
/**
 * The codec type of the output video.
 */
exports.AudioSampleRateType = AudioSampleRateType;
(function (AudioSampleRateType) {
  AudioSampleRateType[AudioSampleRateType["AudioSampleRate32000"] = 32000] = "AudioSampleRate32000";
  AudioSampleRateType[AudioSampleRateType["AudioSampleRate44100"] = 44100] = "AudioSampleRate44100";
  AudioSampleRateType[AudioSampleRateType["AudioSampleRate48000"] = 48000] = "AudioSampleRate48000";
})(AudioSampleRateType || (exports.AudioSampleRateType = AudioSampleRateType = {}));
let VideoCodecTypeForStream;
/**
 * Video codec profile types.
 */
exports.VideoCodecTypeForStream = VideoCodecTypeForStream;
(function (VideoCodecTypeForStream) {
  VideoCodecTypeForStream[VideoCodecTypeForStream["VideoCodecH264ForStream"] = 1] = "VideoCodecH264ForStream";
  VideoCodecTypeForStream[VideoCodecTypeForStream["VideoCodecH265ForStream"] = 2] = "VideoCodecH265ForStream";
})(VideoCodecTypeForStream || (exports.VideoCodecTypeForStream = VideoCodecTypeForStream = {}));
let VideoCodecProfileType;
/**
 * Self-defined audio codec profile.
 */
exports.VideoCodecProfileType = VideoCodecProfileType;
(function (VideoCodecProfileType) {
  VideoCodecProfileType[VideoCodecProfileType["VideoCodecProfileBaseline"] = 66] = "VideoCodecProfileBaseline";
  VideoCodecProfileType[VideoCodecProfileType["VideoCodecProfileMain"] = 77] = "VideoCodecProfileMain";
  VideoCodecProfileType[VideoCodecProfileType["VideoCodecProfileHigh"] = 100] = "VideoCodecProfileHigh";
})(VideoCodecProfileType || (exports.VideoCodecProfileType = VideoCodecProfileType = {}));
let AudioCodecProfileType;
/**
 * Local audio statistics.
 */
exports.AudioCodecProfileType = AudioCodecProfileType;
(function (AudioCodecProfileType) {
  AudioCodecProfileType[AudioCodecProfileType["AudioCodecProfileLcAac"] = 0] = "AudioCodecProfileLcAac";
  AudioCodecProfileType[AudioCodecProfileType["AudioCodecProfileHeAac"] = 1] = "AudioCodecProfileHeAac";
  AudioCodecProfileType[AudioCodecProfileType["AudioCodecProfileHeAacV2"] = 2] = "AudioCodecProfileHeAacV2";
})(AudioCodecProfileType || (exports.AudioCodecProfileType = AudioCodecProfileType = {}));
class LocalAudioStats {
  constructor() {
    _defineProperty(this, "numChannels", void 0);
    _defineProperty(this, "sentSampleRate", void 0);
    _defineProperty(this, "sentBitrate", void 0);
    _defineProperty(this, "internalCodec", void 0);
    _defineProperty(this, "txPacketLossRate", void 0);
    _defineProperty(this, "audioDeviceDelay", void 0);
  }
}

/**
 * States of the Media Push.
 */
exports.LocalAudioStats = LocalAudioStats;
let RtmpStreamPublishState;
/**
 * Error codes of the RTMP or RTMPS streaming.
 */
exports.RtmpStreamPublishState = RtmpStreamPublishState;
(function (RtmpStreamPublishState) {
  RtmpStreamPublishState[RtmpStreamPublishState["RtmpStreamPublishStateIdle"] = 0] = "RtmpStreamPublishStateIdle";
  RtmpStreamPublishState[RtmpStreamPublishState["RtmpStreamPublishStateConnecting"] = 1] = "RtmpStreamPublishStateConnecting";
  RtmpStreamPublishState[RtmpStreamPublishState["RtmpStreamPublishStateRunning"] = 2] = "RtmpStreamPublishStateRunning";
  RtmpStreamPublishState[RtmpStreamPublishState["RtmpStreamPublishStateRecovering"] = 3] = "RtmpStreamPublishStateRecovering";
  RtmpStreamPublishState[RtmpStreamPublishState["RtmpStreamPublishStateFailure"] = 4] = "RtmpStreamPublishStateFailure";
  RtmpStreamPublishState[RtmpStreamPublishState["RtmpStreamPublishStateDisconnecting"] = 5] = "RtmpStreamPublishStateDisconnecting";
})(RtmpStreamPublishState || (exports.RtmpStreamPublishState = RtmpStreamPublishState = {}));
let RtmpStreamPublishErrorType;
/**
 * Events during the media push.
 */
exports.RtmpStreamPublishErrorType = RtmpStreamPublishErrorType;
(function (RtmpStreamPublishErrorType) {
  RtmpStreamPublishErrorType[RtmpStreamPublishErrorType["RtmpStreamPublishErrorOk"] = 0] = "RtmpStreamPublishErrorOk";
  RtmpStreamPublishErrorType[RtmpStreamPublishErrorType["RtmpStreamPublishErrorInvalidArgument"] = 1] = "RtmpStreamPublishErrorInvalidArgument";
  RtmpStreamPublishErrorType[RtmpStreamPublishErrorType["RtmpStreamPublishErrorEncryptedStreamNotAllowed"] = 2] = "RtmpStreamPublishErrorEncryptedStreamNotAllowed";
  RtmpStreamPublishErrorType[RtmpStreamPublishErrorType["RtmpStreamPublishErrorConnectionTimeout"] = 3] = "RtmpStreamPublishErrorConnectionTimeout";
  RtmpStreamPublishErrorType[RtmpStreamPublishErrorType["RtmpStreamPublishErrorInternalServerError"] = 4] = "RtmpStreamPublishErrorInternalServerError";
  RtmpStreamPublishErrorType[RtmpStreamPublishErrorType["RtmpStreamPublishErrorRtmpServerError"] = 5] = "RtmpStreamPublishErrorRtmpServerError";
  RtmpStreamPublishErrorType[RtmpStreamPublishErrorType["RtmpStreamPublishErrorTooOften"] = 6] = "RtmpStreamPublishErrorTooOften";
  RtmpStreamPublishErrorType[RtmpStreamPublishErrorType["RtmpStreamPublishErrorReachLimit"] = 7] = "RtmpStreamPublishErrorReachLimit";
  RtmpStreamPublishErrorType[RtmpStreamPublishErrorType["RtmpStreamPublishErrorNotAuthorized"] = 8] = "RtmpStreamPublishErrorNotAuthorized";
  RtmpStreamPublishErrorType[RtmpStreamPublishErrorType["RtmpStreamPublishErrorStreamNotFound"] = 9] = "RtmpStreamPublishErrorStreamNotFound";
  RtmpStreamPublishErrorType[RtmpStreamPublishErrorType["RtmpStreamPublishErrorFormatNotSupported"] = 10] = "RtmpStreamPublishErrorFormatNotSupported";
  RtmpStreamPublishErrorType[RtmpStreamPublishErrorType["RtmpStreamPublishErrorNotBroadcaster"] = 11] = "RtmpStreamPublishErrorNotBroadcaster";
  RtmpStreamPublishErrorType[RtmpStreamPublishErrorType["RtmpStreamPublishErrorTranscodingNoMixStream"] = 13] = "RtmpStreamPublishErrorTranscodingNoMixStream";
  RtmpStreamPublishErrorType[RtmpStreamPublishErrorType["RtmpStreamPublishErrorNetDown"] = 14] = "RtmpStreamPublishErrorNetDown";
  RtmpStreamPublishErrorType[RtmpStreamPublishErrorType["RtmpStreamPublishErrorInvalidAppid"] = 15] = "RtmpStreamPublishErrorInvalidAppid";
  RtmpStreamPublishErrorType[RtmpStreamPublishErrorType["RtmpStreamPublishErrorInvalidPrivilege"] = 16] = "RtmpStreamPublishErrorInvalidPrivilege";
  RtmpStreamPublishErrorType[RtmpStreamPublishErrorType["RtmpStreamUnpublishErrorOk"] = 100] = "RtmpStreamUnpublishErrorOk";
})(RtmpStreamPublishErrorType || (exports.RtmpStreamPublishErrorType = RtmpStreamPublishErrorType = {}));
let RtmpStreamingEvent;
/**
 * Image properties.
 * This class sets the properties of the watermark and background images in the live video.
 */
exports.RtmpStreamingEvent = RtmpStreamingEvent;
(function (RtmpStreamingEvent) {
  RtmpStreamingEvent[RtmpStreamingEvent["RtmpStreamingEventFailedLoadImage"] = 1] = "RtmpStreamingEventFailedLoadImage";
  RtmpStreamingEvent[RtmpStreamingEvent["RtmpStreamingEventUrlAlreadyInUse"] = 2] = "RtmpStreamingEventUrlAlreadyInUse";
  RtmpStreamingEvent[RtmpStreamingEvent["RtmpStreamingEventAdvancedFeatureNotSupport"] = 3] = "RtmpStreamingEventAdvancedFeatureNotSupport";
  RtmpStreamingEvent[RtmpStreamingEvent["RtmpStreamingEventRequestTooOften"] = 4] = "RtmpStreamingEventRequestTooOften";
})(RtmpStreamingEvent || (exports.RtmpStreamingEvent = RtmpStreamingEvent = {}));
class RtcImage {
  constructor() {
    _defineProperty(this, "url", void 0);
    _defineProperty(this, "x", void 0);
    _defineProperty(this, "y", void 0);
    _defineProperty(this, "width", void 0);
    _defineProperty(this, "height", void 0);
    _defineProperty(this, "zOrder", void 0);
    _defineProperty(this, "alpha", void 0);
  }
}

/**
 * The configuration for advanced features of the RTMP or RTMPS streaming with transcoding.
 * If you want to enable the advanced features of streaming with transcoding, contact .
 */
exports.RtcImage = RtcImage;
class LiveStreamAdvancedFeature {
  constructor() {
    _defineProperty(this, "featureName", void 0);
    _defineProperty(this, "opened", void 0);
  }
}

/**
 * Connection states.
 */
exports.LiveStreamAdvancedFeature = LiveStreamAdvancedFeature;
let ConnectionStateType;
/**
 * Transcoding configurations of each host.
 */
exports.ConnectionStateType = ConnectionStateType;
(function (ConnectionStateType) {
  ConnectionStateType[ConnectionStateType["ConnectionStateDisconnected"] = 1] = "ConnectionStateDisconnected";
  ConnectionStateType[ConnectionStateType["ConnectionStateConnecting"] = 2] = "ConnectionStateConnecting";
  ConnectionStateType[ConnectionStateType["ConnectionStateConnected"] = 3] = "ConnectionStateConnected";
  ConnectionStateType[ConnectionStateType["ConnectionStateReconnecting"] = 4] = "ConnectionStateReconnecting";
  ConnectionStateType[ConnectionStateType["ConnectionStateFailed"] = 5] = "ConnectionStateFailed";
})(ConnectionStateType || (exports.ConnectionStateType = ConnectionStateType = {}));
class TranscodingUser {
  constructor() {
    _defineProperty(this, "uid", void 0);
    _defineProperty(this, "x", void 0);
    _defineProperty(this, "y", void 0);
    _defineProperty(this, "width", void 0);
    _defineProperty(this, "height", void 0);
    _defineProperty(this, "zOrder", void 0);
    _defineProperty(this, "alpha", void 0);
    _defineProperty(this, "audioChannel", void 0);
  }
}

/**
 * Transcoding configurations for Media Push.
 */
exports.TranscodingUser = TranscodingUser;
class LiveTranscoding {
  constructor() {
    _defineProperty(this, "width", void 0);
    _defineProperty(this, "height", void 0);
    _defineProperty(this, "videoBitrate", void 0);
    _defineProperty(this, "videoFramerate", void 0);
    _defineProperty(this, "lowLatency", void 0);
    _defineProperty(this, "videoGop", void 0);
    _defineProperty(this, "videoCodecProfile", void 0);
    _defineProperty(this, "backgroundColor", void 0);
    _defineProperty(this, "videoCodecType", void 0);
    _defineProperty(this, "userCount", void 0);
    _defineProperty(this, "transcodingUsers", void 0);
    _defineProperty(this, "transcodingExtraInfo", void 0);
    _defineProperty(this, "metadata", void 0);
    _defineProperty(this, "watermark", void 0);
    _defineProperty(this, "watermarkCount", void 0);
    _defineProperty(this, "backgroundImage", void 0);
    _defineProperty(this, "backgroundImageCount", void 0);
    _defineProperty(this, "audioSampleRate", void 0);
    _defineProperty(this, "audioBitrate", void 0);
    _defineProperty(this, "audioChannels", void 0);
    _defineProperty(this, "audioCodecProfile", void 0);
    _defineProperty(this, "advancedFeatures", void 0);
    _defineProperty(this, "advancedFeatureCount", void 0);
  }
}

/**
 * The video streams for the video mixing on the local client.
 */
exports.LiveTranscoding = LiveTranscoding;
class TranscodingVideoStream {
  constructor() {
    _defineProperty(this, "sourceType", void 0);
    _defineProperty(this, "remoteUserUid", void 0);
    _defineProperty(this, "imageUrl", void 0);
    _defineProperty(this, "x", void 0);
    _defineProperty(this, "y", void 0);
    _defineProperty(this, "width", void 0);
    _defineProperty(this, "height", void 0);
    _defineProperty(this, "zOrder", void 0);
    _defineProperty(this, "alpha", void 0);
    _defineProperty(this, "mirror", void 0);
  }
}

/**
 * The configuration of the video mixing on the local client.
 */
exports.TranscodingVideoStream = TranscodingVideoStream;
class LocalTranscoderConfiguration {
  constructor() {
    _defineProperty(this, "streamCount", void 0);
    _defineProperty(this, "VideoInputStreams", void 0);
    _defineProperty(this, "videoOutputConfiguration", void 0);
    _defineProperty(this, "syncWithPrimaryCamera", void 0);
  }
}

/**
 * Configurations of the last-mile network test.
 */
exports.LocalTranscoderConfiguration = LocalTranscoderConfiguration;
class LastmileProbeConfig {
  constructor() {
    _defineProperty(this, "probeUplink", void 0);
    _defineProperty(this, "probeDownlink", void 0);
    _defineProperty(this, "expectedUplinkBitrate", void 0);
    _defineProperty(this, "expectedDownlinkBitrate", void 0);
  }
}

/**
 * The status of the last-mile probe test.
 */
exports.LastmileProbeConfig = LastmileProbeConfig;
let LastmileProbeResultState;
/**
 * Results of the uplink or downlink last-mile network test.
 */
exports.LastmileProbeResultState = LastmileProbeResultState;
(function (LastmileProbeResultState) {
  LastmileProbeResultState[LastmileProbeResultState["LastmileProbeResultComplete"] = 1] = "LastmileProbeResultComplete";
  LastmileProbeResultState[LastmileProbeResultState["LastmileProbeResultIncompleteNoBwe"] = 2] = "LastmileProbeResultIncompleteNoBwe";
  LastmileProbeResultState[LastmileProbeResultState["LastmileProbeResultUnavailable"] = 3] = "LastmileProbeResultUnavailable";
})(LastmileProbeResultState || (exports.LastmileProbeResultState = LastmileProbeResultState = {}));
class LastmileProbeOneWayResult {
  constructor() {
    _defineProperty(this, "packetLossRate", void 0);
    _defineProperty(this, "jitter", void 0);
    _defineProperty(this, "availableBandwidth", void 0);
  }
}

/**
 * Results of the uplink and downlink last-mile network tests.
 */
exports.LastmileProbeOneWayResult = LastmileProbeOneWayResult;
class LastmileProbeResult {
  constructor() {
    _defineProperty(this, "state", void 0);
    _defineProperty(this, "uplinkReport", void 0);
    _defineProperty(this, "downlinkReport", void 0);
    _defineProperty(this, "rtt", void 0);
  }
}

/**
 * Reasons causing the change of the connection state.
 */
exports.LastmileProbeResult = LastmileProbeResult;
let ConnectionChangedReasonType;
/**
 * The reason for a user role switch failure.
 */
exports.ConnectionChangedReasonType = ConnectionChangedReasonType;
(function (ConnectionChangedReasonType) {
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedConnecting"] = 0] = "ConnectionChangedConnecting";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedJoinSuccess"] = 1] = "ConnectionChangedJoinSuccess";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedInterrupted"] = 2] = "ConnectionChangedInterrupted";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedBannedByServer"] = 3] = "ConnectionChangedBannedByServer";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedJoinFailed"] = 4] = "ConnectionChangedJoinFailed";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedLeaveChannel"] = 5] = "ConnectionChangedLeaveChannel";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedInvalidAppId"] = 6] = "ConnectionChangedInvalidAppId";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedInvalidChannelName"] = 7] = "ConnectionChangedInvalidChannelName";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedInvalidToken"] = 8] = "ConnectionChangedInvalidToken";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedTokenExpired"] = 9] = "ConnectionChangedTokenExpired";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedRejectedByServer"] = 10] = "ConnectionChangedRejectedByServer";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedSettingProxyServer"] = 11] = "ConnectionChangedSettingProxyServer";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedRenewToken"] = 12] = "ConnectionChangedRenewToken";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedClientIpAddressChanged"] = 13] = "ConnectionChangedClientIpAddressChanged";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedKeepAliveTimeout"] = 14] = "ConnectionChangedKeepAliveTimeout";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedRejoinSuccess"] = 15] = "ConnectionChangedRejoinSuccess";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedLost"] = 16] = "ConnectionChangedLost";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedEchoTest"] = 17] = "ConnectionChangedEchoTest";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedClientIpAddressChangedByUser"] = 18] = "ConnectionChangedClientIpAddressChangedByUser";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedSameUidLogin"] = 19] = "ConnectionChangedSameUidLogin";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedTooManyBroadcasters"] = 20] = "ConnectionChangedTooManyBroadcasters";
  ConnectionChangedReasonType[ConnectionChangedReasonType["ConnectionChangedLicenseVerifyFailed"] = 21] = "ConnectionChangedLicenseVerifyFailed";
})(ConnectionChangedReasonType || (exports.ConnectionChangedReasonType = ConnectionChangedReasonType = {}));
let ClientRoleChangeFailedReason;
/**
 * @ignore
 */
exports.ClientRoleChangeFailedReason = ClientRoleChangeFailedReason;
(function (ClientRoleChangeFailedReason) {
  ClientRoleChangeFailedReason[ClientRoleChangeFailedReason["ClientRoleChangeFailedTooManyBroadcasters"] = 1] = "ClientRoleChangeFailedTooManyBroadcasters";
  ClientRoleChangeFailedReason[ClientRoleChangeFailedReason["ClientRoleChangeFailedNotAuthorized"] = 2] = "ClientRoleChangeFailedNotAuthorized";
  ClientRoleChangeFailedReason[ClientRoleChangeFailedReason["ClientRoleChangeFailedRequestTimeOut"] = 3] = "ClientRoleChangeFailedRequestTimeOut";
  ClientRoleChangeFailedReason[ClientRoleChangeFailedReason["ClientRoleChangeFailedConnectionFailed"] = 4] = "ClientRoleChangeFailedConnectionFailed";
})(ClientRoleChangeFailedReason || (exports.ClientRoleChangeFailedReason = ClientRoleChangeFailedReason = {}));
let WlaccMessageReason;
/**
 * @ignore
 */
exports.WlaccMessageReason = WlaccMessageReason;
(function (WlaccMessageReason) {
  WlaccMessageReason[WlaccMessageReason["WlaccMessageReasonWeakSignal"] = 0] = "WlaccMessageReasonWeakSignal";
  WlaccMessageReason[WlaccMessageReason["WlaccMessageReasonChannelCongestion"] = 1] = "WlaccMessageReasonChannelCongestion";
})(WlaccMessageReason || (exports.WlaccMessageReason = WlaccMessageReason = {}));
let WlaccSuggestAction;
/**
 * @ignore
 */
exports.WlaccSuggestAction = WlaccSuggestAction;
(function (WlaccSuggestAction) {
  WlaccSuggestAction[WlaccSuggestAction["WlaccSuggestActionCloseToWifi"] = 0] = "WlaccSuggestActionCloseToWifi";
  WlaccSuggestAction[WlaccSuggestAction["WlaccSuggestActionConnectSsid"] = 1] = "WlaccSuggestActionConnectSsid";
  WlaccSuggestAction[WlaccSuggestAction["WlaccSuggestActionCheck5g"] = 2] = "WlaccSuggestActionCheck5g";
  WlaccSuggestAction[WlaccSuggestAction["WlaccSuggestActionModifySsid"] = 3] = "WlaccSuggestActionModifySsid";
})(WlaccSuggestAction || (exports.WlaccSuggestAction = WlaccSuggestAction = {}));
class WlAccStats {
  constructor() {
    _defineProperty(this, "e2eDelayPercent", void 0);
    _defineProperty(this, "frozenRatioPercent", void 0);
    _defineProperty(this, "lossRatePercent", void 0);
  }
}

/**
 * Network type.
 */
exports.WlAccStats = WlAccStats;
let NetworkType;
/**
 * Setting mode of the view.
 */
exports.NetworkType = NetworkType;
(function (NetworkType) {
  NetworkType[NetworkType["NetworkTypeUnknown"] = -1] = "NetworkTypeUnknown";
  NetworkType[NetworkType["NetworkTypeDisconnected"] = 0] = "NetworkTypeDisconnected";
  NetworkType[NetworkType["NetworkTypeLan"] = 1] = "NetworkTypeLan";
  NetworkType[NetworkType["NetworkTypeWifi"] = 2] = "NetworkTypeWifi";
  NetworkType[NetworkType["NetworkTypeMobile2g"] = 3] = "NetworkTypeMobile2g";
  NetworkType[NetworkType["NetworkTypeMobile3g"] = 4] = "NetworkTypeMobile3g";
  NetworkType[NetworkType["NetworkTypeMobile4g"] = 5] = "NetworkTypeMobile4g";
})(NetworkType || (exports.NetworkType = NetworkType = {}));
let VideoViewSetupMode;
/**
 * Attributes of video canvas object.
 */
exports.VideoViewSetupMode = VideoViewSetupMode;
(function (VideoViewSetupMode) {
  VideoViewSetupMode[VideoViewSetupMode["VideoViewSetupReplace"] = 0] = "VideoViewSetupReplace";
  VideoViewSetupMode[VideoViewSetupMode["VideoViewSetupAdd"] = 1] = "VideoViewSetupAdd";
  VideoViewSetupMode[VideoViewSetupMode["VideoViewSetupRemove"] = 2] = "VideoViewSetupRemove";
})(VideoViewSetupMode || (exports.VideoViewSetupMode = VideoViewSetupMode = {}));
class VideoCanvas {
  constructor() {
    _defineProperty(this, "view", void 0);
    _defineProperty(this, "uid", void 0);
    _defineProperty(this, "renderMode", void 0);
    _defineProperty(this, "mirrorMode", void 0);
    _defineProperty(this, "setupMode", void 0);
    _defineProperty(this, "sourceType", void 0);
    _defineProperty(this, "mediaPlayerId", void 0);
    _defineProperty(this, "cropArea", void 0);
  }
}

/**
 * The contrast level.
 */
exports.VideoCanvas = VideoCanvas;
let LighteningContrastLevel;
/**
 * Image enhancement options.
 */
exports.LighteningContrastLevel = LighteningContrastLevel;
(function (LighteningContrastLevel) {
  LighteningContrastLevel[LighteningContrastLevel["LighteningContrastLow"] = 0] = "LighteningContrastLow";
  LighteningContrastLevel[LighteningContrastLevel["LighteningContrastNormal"] = 1] = "LighteningContrastNormal";
  LighteningContrastLevel[LighteningContrastLevel["LighteningContrastHigh"] = 2] = "LighteningContrastHigh";
})(LighteningContrastLevel || (exports.LighteningContrastLevel = LighteningContrastLevel = {}));
class BeautyOptions {
  constructor() {
    _defineProperty(this, "lighteningContrastLevel", void 0);
    _defineProperty(this, "lighteningLevel", void 0);
    _defineProperty(this, "smoothnessLevel", void 0);
    _defineProperty(this, "rednessLevel", void 0);
    _defineProperty(this, "sharpnessLevel", void 0);
  }
}

/**
 * The low-light enhancement mode.
 */
exports.BeautyOptions = BeautyOptions;
let LowLightEnhanceMode;
/**
 * The low-light enhancement level.
 */
exports.LowLightEnhanceMode = LowLightEnhanceMode;
(function (LowLightEnhanceMode) {
  LowLightEnhanceMode[LowLightEnhanceMode["LowLightEnhanceAuto"] = 0] = "LowLightEnhanceAuto";
  LowLightEnhanceMode[LowLightEnhanceMode["LowLightEnhanceManual"] = 1] = "LowLightEnhanceManual";
})(LowLightEnhanceMode || (exports.LowLightEnhanceMode = LowLightEnhanceMode = {}));
let LowLightEnhanceLevel;
/**
 * The low-light enhancement options.
 */
exports.LowLightEnhanceLevel = LowLightEnhanceLevel;
(function (LowLightEnhanceLevel) {
  LowLightEnhanceLevel[LowLightEnhanceLevel["LowLightEnhanceLevelHighQuality"] = 0] = "LowLightEnhanceLevelHighQuality";
  LowLightEnhanceLevel[LowLightEnhanceLevel["LowLightEnhanceLevelFast"] = 1] = "LowLightEnhanceLevelFast";
})(LowLightEnhanceLevel || (exports.LowLightEnhanceLevel = LowLightEnhanceLevel = {}));
class LowlightEnhanceOptions {
  constructor() {
    _defineProperty(this, "mode", void 0);
    _defineProperty(this, "level", void 0);
  }
}

/**
 * Video noise reduction mode.
 */
exports.LowlightEnhanceOptions = LowlightEnhanceOptions;
let VideoDenoiserMode;
/**
 * The video noise reduction level.
 */
exports.VideoDenoiserMode = VideoDenoiserMode;
(function (VideoDenoiserMode) {
  VideoDenoiserMode[VideoDenoiserMode["VideoDenoiserAuto"] = 0] = "VideoDenoiserAuto";
  VideoDenoiserMode[VideoDenoiserMode["VideoDenoiserManual"] = 1] = "VideoDenoiserManual";
})(VideoDenoiserMode || (exports.VideoDenoiserMode = VideoDenoiserMode = {}));
let VideoDenoiserLevel;
/**
 * Video noise reduction options.
 */
exports.VideoDenoiserLevel = VideoDenoiserLevel;
(function (VideoDenoiserLevel) {
  VideoDenoiserLevel[VideoDenoiserLevel["VideoDenoiserLevelHighQuality"] = 0] = "VideoDenoiserLevelHighQuality";
  VideoDenoiserLevel[VideoDenoiserLevel["VideoDenoiserLevelFast"] = 1] = "VideoDenoiserLevelFast";
  VideoDenoiserLevel[VideoDenoiserLevel["VideoDenoiserLevelStrength"] = 2] = "VideoDenoiserLevelStrength";
})(VideoDenoiserLevel || (exports.VideoDenoiserLevel = VideoDenoiserLevel = {}));
class VideoDenoiserOptions {
  constructor() {
    _defineProperty(this, "mode", void 0);
    _defineProperty(this, "level", void 0);
  }
}

/**
 * The color enhancement options.
 */
exports.VideoDenoiserOptions = VideoDenoiserOptions;
class ColorEnhanceOptions {
  constructor() {
    _defineProperty(this, "strengthLevel", void 0);
    _defineProperty(this, "skinProtectLevel", void 0);
  }
}

/**
 * The type of the custom background image.
 */
exports.ColorEnhanceOptions = ColorEnhanceOptions;
let BackgroundSourceType;
/**
 * The degree of blurring applied to the custom background image.
 */
exports.BackgroundSourceType = BackgroundSourceType;
(function (BackgroundSourceType) {
  BackgroundSourceType[BackgroundSourceType["BackgroundColor"] = 1] = "BackgroundColor";
  BackgroundSourceType[BackgroundSourceType["BackgroundImg"] = 2] = "BackgroundImg";
  BackgroundSourceType[BackgroundSourceType["BackgroundBlur"] = 3] = "BackgroundBlur";
})(BackgroundSourceType || (exports.BackgroundSourceType = BackgroundSourceType = {}));
let BackgroundBlurDegree;
/**
 * The custom background image.
 */
exports.BackgroundBlurDegree = BackgroundBlurDegree;
(function (BackgroundBlurDegree) {
  BackgroundBlurDegree[BackgroundBlurDegree["BlurDegreeLow"] = 1] = "BlurDegreeLow";
  BackgroundBlurDegree[BackgroundBlurDegree["BlurDegreeMedium"] = 2] = "BlurDegreeMedium";
  BackgroundBlurDegree[BackgroundBlurDegree["BlurDegreeHigh"] = 3] = "BlurDegreeHigh";
})(BackgroundBlurDegree || (exports.BackgroundBlurDegree = BackgroundBlurDegree = {}));
class VirtualBackgroundSource {
  constructor() {
    _defineProperty(this, "background_source_type", void 0);
    _defineProperty(this, "color", void 0);
    _defineProperty(this, "source", void 0);
    _defineProperty(this, "blur_degree", void 0);
  }
}

/**
 * The type of algorithms to user for background processing.
 */
exports.VirtualBackgroundSource = VirtualBackgroundSource;
let SegModelType;
/**
 * Processing properties for background images.
 */
exports.SegModelType = SegModelType;
(function (SegModelType) {
  SegModelType[SegModelType["SegModelAi"] = 1] = "SegModelAi";
  SegModelType[SegModelType["SegModelGreen"] = 2] = "SegModelGreen";
})(SegModelType || (exports.SegModelType = SegModelType = {}));
class SegmentationProperty {
  constructor() {
    _defineProperty(this, "modelType", void 0);
    _defineProperty(this, "greenCapacity", void 0);
  }
}

/**
 * The options for SDK preset voice beautifier effects.
 */
exports.SegmentationProperty = SegmentationProperty;
let VoiceBeautifierPreset;
/**
 * Preset audio effects.
 * To get better audio effects, Agora recommends calling setAudioProfile and setting the profile parameter as recommended below before using the preset audio effects.
 */
exports.VoiceBeautifierPreset = VoiceBeautifierPreset;
(function (VoiceBeautifierPreset) {
  VoiceBeautifierPreset[VoiceBeautifierPreset["VoiceBeautifierOff"] = 0] = "VoiceBeautifierOff";
  VoiceBeautifierPreset[VoiceBeautifierPreset["ChatBeautifierMagnetic"] = 16843008] = "ChatBeautifierMagnetic";
  VoiceBeautifierPreset[VoiceBeautifierPreset["ChatBeautifierFresh"] = 16843264] = "ChatBeautifierFresh";
  VoiceBeautifierPreset[VoiceBeautifierPreset["ChatBeautifierVitality"] = 16843520] = "ChatBeautifierVitality";
  VoiceBeautifierPreset[VoiceBeautifierPreset["SingingBeautifier"] = 16908544] = "SingingBeautifier";
  VoiceBeautifierPreset[VoiceBeautifierPreset["TimbreTransformationVigorous"] = 16974080] = "TimbreTransformationVigorous";
  VoiceBeautifierPreset[VoiceBeautifierPreset["TimbreTransformationDeep"] = 16974336] = "TimbreTransformationDeep";
  VoiceBeautifierPreset[VoiceBeautifierPreset["TimbreTransformationMellow"] = 16974592] = "TimbreTransformationMellow";
  VoiceBeautifierPreset[VoiceBeautifierPreset["TimbreTransformationFalsetto"] = 16974848] = "TimbreTransformationFalsetto";
  VoiceBeautifierPreset[VoiceBeautifierPreset["TimbreTransformationFull"] = 16975104] = "TimbreTransformationFull";
  VoiceBeautifierPreset[VoiceBeautifierPreset["TimbreTransformationClear"] = 16975360] = "TimbreTransformationClear";
  VoiceBeautifierPreset[VoiceBeautifierPreset["TimbreTransformationResounding"] = 16975616] = "TimbreTransformationResounding";
  VoiceBeautifierPreset[VoiceBeautifierPreset["TimbreTransformationRinging"] = 16975872] = "TimbreTransformationRinging";
  VoiceBeautifierPreset[VoiceBeautifierPreset["UltraHighQualityVoice"] = 17039616] = "UltraHighQualityVoice";
})(VoiceBeautifierPreset || (exports.VoiceBeautifierPreset = VoiceBeautifierPreset = {}));
let AudioEffectPreset;
/**
 * The options for SDK preset voice conversion effects.
 */
exports.AudioEffectPreset = AudioEffectPreset;
(function (AudioEffectPreset) {
  AudioEffectPreset[AudioEffectPreset["AudioEffectOff"] = 0] = "AudioEffectOff";
  AudioEffectPreset[AudioEffectPreset["RoomAcousticsKtv"] = 33620224] = "RoomAcousticsKtv";
  AudioEffectPreset[AudioEffectPreset["RoomAcousticsVocalConcert"] = 33620480] = "RoomAcousticsVocalConcert";
  AudioEffectPreset[AudioEffectPreset["RoomAcousticsStudio"] = 33620736] = "RoomAcousticsStudio";
  AudioEffectPreset[AudioEffectPreset["RoomAcousticsPhonograph"] = 33620992] = "RoomAcousticsPhonograph";
  AudioEffectPreset[AudioEffectPreset["RoomAcousticsVirtualStereo"] = 33621248] = "RoomAcousticsVirtualStereo";
  AudioEffectPreset[AudioEffectPreset["RoomAcousticsSpacial"] = 33621504] = "RoomAcousticsSpacial";
  AudioEffectPreset[AudioEffectPreset["RoomAcousticsEthereal"] = 33621760] = "RoomAcousticsEthereal";
  AudioEffectPreset[AudioEffectPreset["RoomAcoustics3dVoice"] = 33622016] = "RoomAcoustics3dVoice";
  AudioEffectPreset[AudioEffectPreset["RoomAcousticsVirtualSurroundSound"] = 33622272] = "RoomAcousticsVirtualSurroundSound";
  AudioEffectPreset[AudioEffectPreset["VoiceChangerEffectUncle"] = 33685760] = "VoiceChangerEffectUncle";
  AudioEffectPreset[AudioEffectPreset["VoiceChangerEffectOldman"] = 33686016] = "VoiceChangerEffectOldman";
  AudioEffectPreset[AudioEffectPreset["VoiceChangerEffectBoy"] = 33686272] = "VoiceChangerEffectBoy";
  AudioEffectPreset[AudioEffectPreset["VoiceChangerEffectSister"] = 33686528] = "VoiceChangerEffectSister";
  AudioEffectPreset[AudioEffectPreset["VoiceChangerEffectGirl"] = 33686784] = "VoiceChangerEffectGirl";
  AudioEffectPreset[AudioEffectPreset["VoiceChangerEffectPigking"] = 33687040] = "VoiceChangerEffectPigking";
  AudioEffectPreset[AudioEffectPreset["VoiceChangerEffectHulk"] = 33687296] = "VoiceChangerEffectHulk";
  AudioEffectPreset[AudioEffectPreset["StyleTransformationRnb"] = 33751296] = "StyleTransformationRnb";
  AudioEffectPreset[AudioEffectPreset["StyleTransformationPopular"] = 33751552] = "StyleTransformationPopular";
  AudioEffectPreset[AudioEffectPreset["PitchCorrection"] = 33816832] = "PitchCorrection";
})(AudioEffectPreset || (exports.AudioEffectPreset = AudioEffectPreset = {}));
let VoiceConversionPreset;
/**
 * Preset headphone equalizer types.
 */
exports.VoiceConversionPreset = VoiceConversionPreset;
(function (VoiceConversionPreset) {
  VoiceConversionPreset[VoiceConversionPreset["VoiceConversionOff"] = 0] = "VoiceConversionOff";
  VoiceConversionPreset[VoiceConversionPreset["VoiceChangerNeutral"] = 50397440] = "VoiceChangerNeutral";
  VoiceConversionPreset[VoiceConversionPreset["VoiceChangerSweet"] = 50397696] = "VoiceChangerSweet";
  VoiceConversionPreset[VoiceConversionPreset["VoiceChangerSolid"] = 50397952] = "VoiceChangerSolid";
  VoiceConversionPreset[VoiceConversionPreset["VoiceChangerBass"] = 50398208] = "VoiceChangerBass";
})(VoiceConversionPreset || (exports.VoiceConversionPreset = VoiceConversionPreset = {}));
let HeadphoneEqualizerPreset;
/**
 * @ignore
 */
exports.HeadphoneEqualizerPreset = HeadphoneEqualizerPreset;
(function (HeadphoneEqualizerPreset) {
  HeadphoneEqualizerPreset[HeadphoneEqualizerPreset["HeadphoneEqualizerOff"] = 0] = "HeadphoneEqualizerOff";
  HeadphoneEqualizerPreset[HeadphoneEqualizerPreset["HeadphoneEqualizerOverear"] = 67108865] = "HeadphoneEqualizerOverear";
  HeadphoneEqualizerPreset[HeadphoneEqualizerPreset["HeadphoneEqualizerInear"] = 67108866] = "HeadphoneEqualizerInear";
})(HeadphoneEqualizerPreset || (exports.HeadphoneEqualizerPreset = HeadphoneEqualizerPreset = {}));
class ScreenCaptureParameters {
  constructor() {
    _defineProperty(this, "dimensions", void 0);
    _defineProperty(this, "frameRate", void 0);
    _defineProperty(this, "bitrate", void 0);
    _defineProperty(this, "captureMouseCursor", void 0);
    _defineProperty(this, "windowFocus", void 0);
    _defineProperty(this, "excludeWindowList", void 0);
    _defineProperty(this, "excludeWindowCount", void 0);
    _defineProperty(this, "highLightWidth", void 0);
    _defineProperty(this, "highLightColor", void 0);
    _defineProperty(this, "enableHighLight", void 0);
  }
}

/**
 * Recording quality.
 */
exports.ScreenCaptureParameters = ScreenCaptureParameters;
let AudioRecordingQualityType;
/**
 * Recording content. Set in startAudioRecording .
 */
exports.AudioRecordingQualityType = AudioRecordingQualityType;
(function (AudioRecordingQualityType) {
  AudioRecordingQualityType[AudioRecordingQualityType["AudioRecordingQualityLow"] = 0] = "AudioRecordingQualityLow";
  AudioRecordingQualityType[AudioRecordingQualityType["AudioRecordingQualityMedium"] = 1] = "AudioRecordingQualityMedium";
  AudioRecordingQualityType[AudioRecordingQualityType["AudioRecordingQualityHigh"] = 2] = "AudioRecordingQualityHigh";
  AudioRecordingQualityType[AudioRecordingQualityType["AudioRecordingQualityUltraHigh"] = 3] = "AudioRecordingQualityUltraHigh";
})(AudioRecordingQualityType || (exports.AudioRecordingQualityType = AudioRecordingQualityType = {}));
let AudioFileRecordingType;
/**
 * Audio profile.
 */
exports.AudioFileRecordingType = AudioFileRecordingType;
(function (AudioFileRecordingType) {
  AudioFileRecordingType[AudioFileRecordingType["AudioFileRecordingMic"] = 1] = "AudioFileRecordingMic";
  AudioFileRecordingType[AudioFileRecordingType["AudioFileRecordingPlayback"] = 2] = "AudioFileRecordingPlayback";
  AudioFileRecordingType[AudioFileRecordingType["AudioFileRecordingMixed"] = 3] = "AudioFileRecordingMixed";
})(AudioFileRecordingType || (exports.AudioFileRecordingType = AudioFileRecordingType = {}));
let AudioEncodedFrameObserverPosition;
/**
 * Recording configuration.
 */
exports.AudioEncodedFrameObserverPosition = AudioEncodedFrameObserverPosition;
(function (AudioEncodedFrameObserverPosition) {
  AudioEncodedFrameObserverPosition[AudioEncodedFrameObserverPosition["AudioEncodedFrameObserverPositionRecord"] = 1] = "AudioEncodedFrameObserverPositionRecord";
  AudioEncodedFrameObserverPosition[AudioEncodedFrameObserverPosition["AudioEncodedFrameObserverPositionPlayback"] = 2] = "AudioEncodedFrameObserverPositionPlayback";
  AudioEncodedFrameObserverPosition[AudioEncodedFrameObserverPosition["AudioEncodedFrameObserverPositionMixed"] = 3] = "AudioEncodedFrameObserverPositionMixed";
})(AudioEncodedFrameObserverPosition || (exports.AudioEncodedFrameObserverPosition = AudioEncodedFrameObserverPosition = {}));
class AudioRecordingConfiguration {
  constructor() {
    _defineProperty(this, "filePath", void 0);
    _defineProperty(this, "encode", void 0);
    _defineProperty(this, "sampleRate", void 0);
    _defineProperty(this, "fileRecordingType", void 0);
    _defineProperty(this, "quality", void 0);
    _defineProperty(this, "recordingChannel", void 0);
  }
}

/**
 * Observer settings for encoded audio.
 */
exports.AudioRecordingConfiguration = AudioRecordingConfiguration;
class AudioEncodedFrameObserverConfig {
  constructor() {
    _defineProperty(this, "postionType", void 0);
    _defineProperty(this, "encodingType", void 0);
  }
}

/**
 * The encoded audio observer.
 */
exports.AudioEncodedFrameObserverConfig = AudioEncodedFrameObserverConfig;
/**
 * The region for connection, which is the region where the server the SDK connects to is located.
 */
let AreaCode;
/**
 * @ignore
 */
exports.AreaCode = AreaCode;
(function (AreaCode) {
  AreaCode[AreaCode["AreaCodeCn"] = 1] = "AreaCodeCn";
  AreaCode[AreaCode["AreaCodeNa"] = 2] = "AreaCodeNa";
  AreaCode[AreaCode["AreaCodeEu"] = 4] = "AreaCodeEu";
  AreaCode[AreaCode["AreaCodeAs"] = 8] = "AreaCodeAs";
  AreaCode[AreaCode["AreaCodeJp"] = 16] = "AreaCodeJp";
  AreaCode[AreaCode["AreaCodeIn"] = 32] = "AreaCodeIn";
  AreaCode[AreaCode["AreaCodeGlob"] = 4294967295] = "AreaCodeGlob";
})(AreaCode || (exports.AreaCode = AreaCode = {}));
let AreaCodeEx;
/**
 * The error code of the channel media relay.
 */
exports.AreaCodeEx = AreaCodeEx;
(function (AreaCodeEx) {
  AreaCodeEx[AreaCodeEx["AreaCodeOc"] = 64] = "AreaCodeOc";
  AreaCodeEx[AreaCodeEx["AreaCodeSa"] = 128] = "AreaCodeSa";
  AreaCodeEx[AreaCodeEx["AreaCodeAf"] = 256] = "AreaCodeAf";
  AreaCodeEx[AreaCodeEx["AreaCodeKr"] = 512] = "AreaCodeKr";
  AreaCodeEx[AreaCodeEx["AreaCodeHkmc"] = 1024] = "AreaCodeHkmc";
  AreaCodeEx[AreaCodeEx["AreaCodeUs"] = 2048] = "AreaCodeUs";
  AreaCodeEx[AreaCodeEx["AreaCodeOvs"] = 4294967294] = "AreaCodeOvs";
})(AreaCodeEx || (exports.AreaCodeEx = AreaCodeEx = {}));
let ChannelMediaRelayError;
/**
 * The event code of channel media relay.
 */
exports.ChannelMediaRelayError = ChannelMediaRelayError;
(function (ChannelMediaRelayError) {
  ChannelMediaRelayError[ChannelMediaRelayError["RelayOk"] = 0] = "RelayOk";
  ChannelMediaRelayError[ChannelMediaRelayError["RelayErrorServerErrorResponse"] = 1] = "RelayErrorServerErrorResponse";
  ChannelMediaRelayError[ChannelMediaRelayError["RelayErrorServerNoResponse"] = 2] = "RelayErrorServerNoResponse";
  ChannelMediaRelayError[ChannelMediaRelayError["RelayErrorNoResourceAvailable"] = 3] = "RelayErrorNoResourceAvailable";
  ChannelMediaRelayError[ChannelMediaRelayError["RelayErrorFailedJoinSrc"] = 4] = "RelayErrorFailedJoinSrc";
  ChannelMediaRelayError[ChannelMediaRelayError["RelayErrorFailedJoinDest"] = 5] = "RelayErrorFailedJoinDest";
  ChannelMediaRelayError[ChannelMediaRelayError["RelayErrorFailedPacketReceivedFromSrc"] = 6] = "RelayErrorFailedPacketReceivedFromSrc";
  ChannelMediaRelayError[ChannelMediaRelayError["RelayErrorFailedPacketSentToDest"] = 7] = "RelayErrorFailedPacketSentToDest";
  ChannelMediaRelayError[ChannelMediaRelayError["RelayErrorServerConnectionLost"] = 8] = "RelayErrorServerConnectionLost";
  ChannelMediaRelayError[ChannelMediaRelayError["RelayErrorInternalError"] = 9] = "RelayErrorInternalError";
  ChannelMediaRelayError[ChannelMediaRelayError["RelayErrorSrcTokenExpired"] = 10] = "RelayErrorSrcTokenExpired";
  ChannelMediaRelayError[ChannelMediaRelayError["RelayErrorDestTokenExpired"] = 11] = "RelayErrorDestTokenExpired";
})(ChannelMediaRelayError || (exports.ChannelMediaRelayError = ChannelMediaRelayError = {}));
let ChannelMediaRelayEvent;
/**
 * The state code of the channel media relay.
 */
exports.ChannelMediaRelayEvent = ChannelMediaRelayEvent;
(function (ChannelMediaRelayEvent) {
  ChannelMediaRelayEvent[ChannelMediaRelayEvent["RelayEventNetworkDisconnected"] = 0] = "RelayEventNetworkDisconnected";
  ChannelMediaRelayEvent[ChannelMediaRelayEvent["RelayEventNetworkConnected"] = 1] = "RelayEventNetworkConnected";
  ChannelMediaRelayEvent[ChannelMediaRelayEvent["RelayEventPacketJoinedSrcChannel"] = 2] = "RelayEventPacketJoinedSrcChannel";
  ChannelMediaRelayEvent[ChannelMediaRelayEvent["RelayEventPacketJoinedDestChannel"] = 3] = "RelayEventPacketJoinedDestChannel";
  ChannelMediaRelayEvent[ChannelMediaRelayEvent["RelayEventPacketSentToDestChannel"] = 4] = "RelayEventPacketSentToDestChannel";
  ChannelMediaRelayEvent[ChannelMediaRelayEvent["RelayEventPacketReceivedVideoFromSrc"] = 5] = "RelayEventPacketReceivedVideoFromSrc";
  ChannelMediaRelayEvent[ChannelMediaRelayEvent["RelayEventPacketReceivedAudioFromSrc"] = 6] = "RelayEventPacketReceivedAudioFromSrc";
  ChannelMediaRelayEvent[ChannelMediaRelayEvent["RelayEventPacketUpdateDestChannel"] = 7] = "RelayEventPacketUpdateDestChannel";
  ChannelMediaRelayEvent[ChannelMediaRelayEvent["RelayEventPacketUpdateDestChannelRefused"] = 8] = "RelayEventPacketUpdateDestChannelRefused";
  ChannelMediaRelayEvent[ChannelMediaRelayEvent["RelayEventPacketUpdateDestChannelNotChange"] = 9] = "RelayEventPacketUpdateDestChannelNotChange";
  ChannelMediaRelayEvent[ChannelMediaRelayEvent["RelayEventPacketUpdateDestChannelIsNull"] = 10] = "RelayEventPacketUpdateDestChannelIsNull";
  ChannelMediaRelayEvent[ChannelMediaRelayEvent["RelayEventVideoProfileUpdate"] = 11] = "RelayEventVideoProfileUpdate";
  ChannelMediaRelayEvent[ChannelMediaRelayEvent["RelayEventPauseSendPacketToDestChannelSuccess"] = 12] = "RelayEventPauseSendPacketToDestChannelSuccess";
  ChannelMediaRelayEvent[ChannelMediaRelayEvent["RelayEventPauseSendPacketToDestChannelFailed"] = 13] = "RelayEventPauseSendPacketToDestChannelFailed";
  ChannelMediaRelayEvent[ChannelMediaRelayEvent["RelayEventResumeSendPacketToDestChannelSuccess"] = 14] = "RelayEventResumeSendPacketToDestChannelSuccess";
  ChannelMediaRelayEvent[ChannelMediaRelayEvent["RelayEventResumeSendPacketToDestChannelFailed"] = 15] = "RelayEventResumeSendPacketToDestChannelFailed";
})(ChannelMediaRelayEvent || (exports.ChannelMediaRelayEvent = ChannelMediaRelayEvent = {}));
let ChannelMediaRelayState;
/**
 * Channel media information.
 */
exports.ChannelMediaRelayState = ChannelMediaRelayState;
(function (ChannelMediaRelayState) {
  ChannelMediaRelayState[ChannelMediaRelayState["RelayStateIdle"] = 0] = "RelayStateIdle";
  ChannelMediaRelayState[ChannelMediaRelayState["RelayStateConnecting"] = 1] = "RelayStateConnecting";
  ChannelMediaRelayState[ChannelMediaRelayState["RelayStateRunning"] = 2] = "RelayStateRunning";
  ChannelMediaRelayState[ChannelMediaRelayState["RelayStateFailure"] = 3] = "RelayStateFailure";
})(ChannelMediaRelayState || (exports.ChannelMediaRelayState = ChannelMediaRelayState = {}));
class ChannelMediaInfo {
  constructor() {
    _defineProperty(this, "channelName", void 0);
    _defineProperty(this, "token", void 0);
    _defineProperty(this, "uid", void 0);
  }
}

/**
 * Configuration information of relaying media streams across channels.
 */
exports.ChannelMediaInfo = ChannelMediaInfo;
class ChannelMediaRelayConfiguration {
  constructor() {
    _defineProperty(this, "srcInfo", void 0);
    _defineProperty(this, "destInfos", void 0);
    _defineProperty(this, "destCount", void 0);
  }
}

/**
 * The uplink network information.
 */
exports.ChannelMediaRelayConfiguration = ChannelMediaRelayConfiguration;
class UplinkNetworkInfo {
  constructor() {
    _defineProperty(this, "video_encoder_target_bitrate_bps", void 0);
  }
}

/**
 * @ignore
 */
exports.UplinkNetworkInfo = UplinkNetworkInfo;
class PeerDownlinkInfo {
  constructor() {
    _defineProperty(this, "uid", void 0);
    _defineProperty(this, "stream_type", void 0);
    _defineProperty(this, "current_downscale_level", void 0);
    _defineProperty(this, "expected_bitrate_bps", void 0);
  }
}

/**
 * @ignore
 */
exports.PeerDownlinkInfo = PeerDownlinkInfo;
class DownlinkNetworkInfo {
  constructor() {
    _defineProperty(this, "lastmile_buffer_delay_time_ms", void 0);
    _defineProperty(this, "bandwidth_estimation_bps", void 0);
    _defineProperty(this, "total_downscale_level_count", void 0);
    _defineProperty(this, "peer_downlink_info", void 0);
    _defineProperty(this, "total_received_video_count", void 0);
  }
}

/**
 * The built-in encryption mode.
 * Agora recommends using Aes128Gcm2 or Aes256Gcm2 encrypted mode. These two modes support the use of salt for higher security.
 */
exports.DownlinkNetworkInfo = DownlinkNetworkInfo;
let EncryptionMode;
/**
 * Built-in encryption configurations.
 */
exports.EncryptionMode = EncryptionMode;
(function (EncryptionMode) {
  EncryptionMode[EncryptionMode["Aes128Xts"] = 1] = "Aes128Xts";
  EncryptionMode[EncryptionMode["Aes128Ecb"] = 2] = "Aes128Ecb";
  EncryptionMode[EncryptionMode["Aes256Xts"] = 3] = "Aes256Xts";
  EncryptionMode[EncryptionMode["Sm4128Ecb"] = 4] = "Sm4128Ecb";
  EncryptionMode[EncryptionMode["Aes128Gcm"] = 5] = "Aes128Gcm";
  EncryptionMode[EncryptionMode["Aes256Gcm"] = 6] = "Aes256Gcm";
  EncryptionMode[EncryptionMode["Aes128Gcm2"] = 7] = "Aes128Gcm2";
  EncryptionMode[EncryptionMode["Aes256Gcm2"] = 8] = "Aes256Gcm2";
  EncryptionMode[EncryptionMode["ModeEnd"] = 9] = "ModeEnd";
})(EncryptionMode || (exports.EncryptionMode = EncryptionMode = {}));
class EncryptionConfig {
  constructor() {
    _defineProperty(this, "encryptionMode", void 0);
    _defineProperty(this, "encryptionKey", void 0);
    _defineProperty(this, "encryptionKdfSalt", void 0);
  }
}

/**
 * Encryption error type.
 */
exports.EncryptionConfig = EncryptionConfig;
let EncryptionErrorType;
/**
 * @ignore
 */
exports.EncryptionErrorType = EncryptionErrorType;
(function (EncryptionErrorType) {
  EncryptionErrorType[EncryptionErrorType["EncryptionErrorInternalFailure"] = 0] = "EncryptionErrorInternalFailure";
  EncryptionErrorType[EncryptionErrorType["EncryptionErrorDecryptionFailure"] = 1] = "EncryptionErrorDecryptionFailure";
  EncryptionErrorType[EncryptionErrorType["EncryptionErrorEncryptionFailure"] = 2] = "EncryptionErrorEncryptionFailure";
})(EncryptionErrorType || (exports.EncryptionErrorType = EncryptionErrorType = {}));
let UploadErrorReason;
/**
 * The type of the device permission.
 */
exports.UploadErrorReason = UploadErrorReason;
(function (UploadErrorReason) {
  UploadErrorReason[UploadErrorReason["UploadSuccess"] = 0] = "UploadSuccess";
  UploadErrorReason[UploadErrorReason["UploadNetError"] = 1] = "UploadNetError";
  UploadErrorReason[UploadErrorReason["UploadServerError"] = 2] = "UploadServerError";
})(UploadErrorReason || (exports.UploadErrorReason = UploadErrorReason = {}));
let PermissionType;
/**
 * The maximum length of the user account.
 */
exports.PermissionType = PermissionType;
(function (PermissionType) {
  PermissionType[PermissionType["RecordAudio"] = 0] = "RecordAudio";
  PermissionType[PermissionType["Camera"] = 1] = "Camera";
  PermissionType[PermissionType["ScreenCapture"] = 2] = "ScreenCapture";
})(PermissionType || (exports.PermissionType = PermissionType = {}));
let MaxUserAccountLengthType;
/**
 * The subscribing state.
 */
exports.MaxUserAccountLengthType = MaxUserAccountLengthType;
(function (MaxUserAccountLengthType) {
  MaxUserAccountLengthType[MaxUserAccountLengthType["MaxUserAccountLength"] = 256] = "MaxUserAccountLength";
})(MaxUserAccountLengthType || (exports.MaxUserAccountLengthType = MaxUserAccountLengthType = {}));
let StreamSubscribeState;
/**
 * The publishing state.
 */
exports.StreamSubscribeState = StreamSubscribeState;
(function (StreamSubscribeState) {
  StreamSubscribeState[StreamSubscribeState["SubStateIdle"] = 0] = "SubStateIdle";
  StreamSubscribeState[StreamSubscribeState["SubStateNoSubscribed"] = 1] = "SubStateNoSubscribed";
  StreamSubscribeState[StreamSubscribeState["SubStateSubscribing"] = 2] = "SubStateSubscribing";
  StreamSubscribeState[StreamSubscribeState["SubStateSubscribed"] = 3] = "SubStateSubscribed";
})(StreamSubscribeState || (exports.StreamSubscribeState = StreamSubscribeState = {}));
let StreamPublishState;
/**
 * The configuration of the audio and video call loop test.
 */
exports.StreamPublishState = StreamPublishState;
(function (StreamPublishState) {
  StreamPublishState[StreamPublishState["PubStateIdle"] = 0] = "PubStateIdle";
  StreamPublishState[StreamPublishState["PubStateNoPublished"] = 1] = "PubStateNoPublished";
  StreamPublishState[StreamPublishState["PubStatePublishing"] = 2] = "PubStatePublishing";
  StreamPublishState[StreamPublishState["PubStatePublished"] = 3] = "PubStatePublished";
})(StreamPublishState || (exports.StreamPublishState = StreamPublishState = {}));
class EchoTestConfiguration {
  constructor() {
    _defineProperty(this, "view", void 0);
    _defineProperty(this, "enableAudio", void 0);
    _defineProperty(this, "enableVideo", void 0);
    _defineProperty(this, "token", void 0);
    _defineProperty(this, "channelId", void 0);
  }
}

/**
 * The information of the user.
 */
exports.EchoTestConfiguration = EchoTestConfiguration;
class UserInfo {
  constructor() {
    _defineProperty(this, "uid", void 0);
    _defineProperty(this, "userAccount", void 0);
  }
}

/**
 * The audio filter of in-ear monitoring.
 */
exports.UserInfo = UserInfo;
let EarMonitoringFilterType;
/**
 * @ignore
 */
exports.EarMonitoringFilterType = EarMonitoringFilterType;
(function (EarMonitoringFilterType) {
  EarMonitoringFilterType[EarMonitoringFilterType["EarMonitoringFilterNone"] = 1] = "EarMonitoringFilterNone";
  EarMonitoringFilterType[EarMonitoringFilterType["EarMonitoringFilterBuiltInAudioFilters"] = 2] = "EarMonitoringFilterBuiltInAudioFilters";
  EarMonitoringFilterType[EarMonitoringFilterType["EarMonitoringFilterNoiseSuppression"] = 4] = "EarMonitoringFilterNoiseSuppression";
})(EarMonitoringFilterType || (exports.EarMonitoringFilterType = EarMonitoringFilterType = {}));
let ThreadPriorityType;
/**
 * The video configuration for the shared screen stream.
 */
exports.ThreadPriorityType = ThreadPriorityType;
(function (ThreadPriorityType) {
  ThreadPriorityType[ThreadPriorityType["Lowest"] = 0] = "Lowest";
  ThreadPriorityType[ThreadPriorityType["Low"] = 1] = "Low";
  ThreadPriorityType[ThreadPriorityType["Normal"] = 2] = "Normal";
  ThreadPriorityType[ThreadPriorityType["High"] = 3] = "High";
  ThreadPriorityType[ThreadPriorityType["Highest"] = 4] = "Highest";
  ThreadPriorityType[ThreadPriorityType["Critical"] = 5] = "Critical";
})(ThreadPriorityType || (exports.ThreadPriorityType = ThreadPriorityType = {}));
class ScreenVideoParameters {
  constructor() {
    _defineProperty(this, "dimensions", void 0);
    _defineProperty(this, "frameRate", void 0);
    _defineProperty(this, "bitrate", void 0);
    _defineProperty(this, "contentHint", void 0);
  }
}

/**
 * The audio configuration for the shared screen stream.
 * Only available where captureAudio is true.
 */
exports.ScreenVideoParameters = ScreenVideoParameters;
class ScreenAudioParameters {
  constructor() {
    _defineProperty(this, "sampleRate", void 0);
    _defineProperty(this, "channels", void 0);
    _defineProperty(this, "captureSignalVolume", void 0);
  }
}

/**
 * Screen sharing configurations.
 */
exports.ScreenAudioParameters = ScreenAudioParameters;
class ScreenCaptureParameters2 {
  constructor() {
    _defineProperty(this, "captureAudio", void 0);
    _defineProperty(this, "audioParams", void 0);
    _defineProperty(this, "captureVideo", void 0);
    _defineProperty(this, "videoParams", void 0);
  }
}

/**
 * The spatial audio parameters.
 */
exports.ScreenCaptureParameters2 = ScreenCaptureParameters2;
class SpatialAudioParams {
  constructor() {
    _defineProperty(this, "speaker_azimuth", void 0);
    _defineProperty(this, "speaker_elevation", void 0);
    _defineProperty(this, "speaker_distance", void 0);
    _defineProperty(this, "speaker_orientation", void 0);
    _defineProperty(this, "enable_blur", void 0);
    _defineProperty(this, "enable_air_absorb", void 0);
    _defineProperty(this, "speaker_attenuation", void 0);
    _defineProperty(this, "enable_doppler", void 0);
  }
}
exports.SpatialAudioParams = SpatialAudioParams;
//# sourceMappingURL=AgoraBase.js.map