import { IMediaEngine } from '../IAgoraMediaEngine';
import { IAudioFrameObserver, IVideoFrameObserver, IVideoEncodedFrameObserver, MediaSourceType, AudioFrame, ExternalVideoSourceType, ExternalVideoFrame } from '../AgoraMediaBase';
import { SenderOptions, EncodedVideoFrameInfo } from '../AgoraBase';
export declare class IMediaEngineImpl implements IMediaEngine {
    registerAudioFrameObserver(observer: IAudioFrameObserver): number;
    protected getApiTypeFromRegisterAudioFrameObserver(observer: IAudioFrameObserver): string;
    registerVideoFrameObserver(observer: IVideoFrameObserver): number;
    protected getApiTypeFromRegisterVideoFrameObserver(observer: IVideoFrameObserver): string;
    registerVideoEncodedFrameObserver(observer: IVideoEncodedFrameObserver): number;
    protected getApiTypeFromRegisterVideoEncodedFrameObserver(observer: IVideoEncodedFrameObserver): string;
    pushAudioFrame(type: MediaSourceType, frame: AudioFrame, wrap?: boolean, sourceId?: number): number;
    protected getApiTypeFromPushAudioFrame(type: MediaSourceType, frame: AudioFrame, wrap?: boolean, sourceId?: number): string;
    pushCaptureAudioFrame(frame: AudioFrame): number;
    protected getApiTypeFromPushCaptureAudioFrame(frame: AudioFrame): string;
    pushReverseAudioFrame(frame: AudioFrame): number;
    protected getApiTypeFromPushReverseAudioFrame(frame: AudioFrame): string;
    pushDirectAudioFrame(frame: AudioFrame): number;
    protected getApiTypeFromPushDirectAudioFrame(frame: AudioFrame): string;
    pullAudioFrame(): AudioFrame;
    protected getApiTypeFromPullAudioFrame(): string;
    setExternalVideoSource(enabled: boolean, useTexture: boolean, sourceType?: ExternalVideoSourceType, encodedVideoOption?: SenderOptions): number;
    protected getApiTypeFromSetExternalVideoSource(enabled: boolean, useTexture: boolean, sourceType?: ExternalVideoSourceType, encodedVideoOption?: SenderOptions): string;
    setExternalAudioSource(enabled: boolean, sampleRate: number, channels: number, sourceNumber?: number, localPlayback?: boolean, publish?: boolean): number;
    protected getApiTypeFromSetExternalAudioSource(enabled: boolean, sampleRate: number, channels: number, sourceNumber?: number, localPlayback?: boolean, publish?: boolean): string;
    setExternalAudioSink(enabled: boolean, sampleRate: number, channels: number): number;
    protected getApiTypeFromSetExternalAudioSink(enabled: boolean, sampleRate: number, channels: number): string;
    enableCustomAudioLocalPlayback(sourceId: number, enabled: boolean): number;
    protected getApiTypeFromEnableCustomAudioLocalPlayback(sourceId: number, enabled: boolean): string;
    setDirectExternalAudioSource(enable: boolean, localPlayback?: boolean): number;
    protected getApiTypeFromSetDirectExternalAudioSource(enable: boolean, localPlayback?: boolean): string;
    pushVideoFrame(frame: ExternalVideoFrame, videoTrackId?: number): number;
    protected getApiTypeFromPushVideoFrame(frame: ExternalVideoFrame, videoTrackId?: number): string;
    pushEncodedVideoImage(imageBuffer: Uint8Array, length: number, videoEncodedFrameInfo: EncodedVideoFrameInfo, videoTrackId?: number): number;
    protected getApiTypeFromPushEncodedVideoImage(imageBuffer: Uint8Array, length: number, videoEncodedFrameInfo: EncodedVideoFrameInfo, videoTrackId?: number): string;
    release(): void;
    protected getApiTypeFromRelease(): string;
    unregisterAudioFrameObserver(observer: IAudioFrameObserver): number;
    protected getApiTypeFromUnregisterAudioFrameObserver(observer: IAudioFrameObserver): string;
    unregisterVideoFrameObserver(observer: IVideoFrameObserver): number;
    protected getApiTypeFromUnregisterVideoFrameObserver(observer: IVideoFrameObserver): string;
    unregisterVideoEncodedFrameObserver(observer: IVideoEncodedFrameObserver): number;
    protected getApiTypeFromUnregisterVideoEncodedFrameObserver(observer: IVideoEncodedFrameObserver): string;
}
//# sourceMappingURL=IAgoraMediaEngineImpl.d.ts.map