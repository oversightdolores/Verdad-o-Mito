import { IAudioEncodedFrameObserver } from '../AgoraBase';
import { IAudioFrameObserver, IAudioSpectrumObserver, IMediaRecorderObserver, IVideoEncodedFrameObserver, IVideoFrameObserver } from '../AgoraMediaBase';
import { IDirectCdnStreamingEventHandler, IMetadataObserver, IRtcEngineEventHandler } from '../IAgoraRtcEngine';
import { IMediaPlayerAudioFrameObserver, IMediaPlayerVideoFrameObserver } from '../IAgoraMediaPlayer';
import { IMediaPlayerSourceObserver } from '../IAgoraMediaPlayerSource';
import { IMusicContentCenterEventHandler } from '../IAgoraMusicContentCenter';
import { processIAudioEncodedFrameObserver } from '../impl/AgoraBaseImpl';
import { processIAudioFrameObserver, processIAudioSpectrumObserver, processIMediaRecorderObserver, processIVideoEncodedFrameObserver, processIVideoFrameObserver } from '../impl/AgoraMediaBaseImpl';
import { processIDirectCdnStreamingEventHandler, processIMetadataObserver, processIRtcEngineEventHandler } from '../impl/IAgoraRtcEngineImpl';
import { processIMediaPlayerAudioFrameObserver, processIMediaPlayerVideoFrameObserver } from '../impl/IAgoraMediaPlayerImpl';
import { processIMediaPlayerSourceObserver } from '../impl/IAgoraMediaPlayerSourceImpl';
import { processIMusicContentCenterEventHandler } from '../impl/IAgoraMusicContentCenterImpl';
export declare const DeviceEventEmitter: any;
/**
 * @internal
 */
export declare function setDebuggable(flag: boolean): void;
/**
 * @internal
 */
export declare function isDebuggable(): boolean;
/**
 * @internal
 */
export declare type EventProcessor = {
    suffix: string;
    type: EVENT_TYPE;
    func: Function[];
    preprocess?: (event: string, data: any, buffers: Uint8Array[]) => void;
    handlers: (data: any) => (IAudioFrameObserver | IVideoFrameObserver | IAudioSpectrumObserver | IAudioEncodedFrameObserver | IVideoEncodedFrameObserver | IMediaPlayerSourceObserver | IMediaPlayerAudioFrameObserver | IMediaPlayerVideoFrameObserver | IMediaRecorderObserver | IMetadataObserver | IDirectCdnStreamingEventHandler | IRtcEngineEventHandler | IMusicContentCenterEventHandler)[];
};
export declare enum EVENT_TYPE {
    IMediaEngine = 0,
    IMediaPlayer = 1,
    IMediaRecorder = 2,
    IRtcEngine = 3,
    IMusicContentCenter = 4
}
/**
 * @internal
 */
export declare const EVENT_PROCESSORS: {
    IAudioFrameObserver: {
        suffix: string;
        type: EVENT_TYPE;
        func: (typeof processIAudioFrameObserver)[];
        preprocess: (event: string, data: any, buffers: Uint8Array[]) => void;
        handlers: () => IAudioFrameObserver[];
    };
    IVideoFrameObserver: {
        suffix: string;
        type: EVENT_TYPE;
        func: (typeof processIVideoFrameObserver)[];
        preprocess: (event: string, data: any, buffers: Uint8Array[]) => void;
        handlers: () => IVideoFrameObserver[];
    };
    IAudioSpectrumObserver: {
        suffix: string;
        type: EVENT_TYPE;
        func: (typeof processIAudioSpectrumObserver)[];
        preprocess: (event: string, data: any, buffers: Uint8Array[]) => void;
        handlers: (data: any) => IAudioSpectrumObserver[] | undefined;
    };
    IMediaPlayerAudioSpectrumObserver: {
        suffix: string;
        type: EVENT_TYPE;
        func: (typeof processIAudioSpectrumObserver)[];
        preprocess: (event: string, data: any, buffers: Uint8Array[]) => void;
        handlers: (data: any) => IAudioSpectrumObserver[] | undefined;
    };
    IAudioEncodedFrameObserver: {
        suffix: string;
        type: EVENT_TYPE;
        func: (typeof processIAudioEncodedFrameObserver)[];
        preprocess: (event: string, data: any, buffers: Uint8Array[]) => void;
        handlers: () => IAudioEncodedFrameObserver[];
    };
    IVideoEncodedFrameObserver: {
        suffix: string;
        type: EVENT_TYPE;
        func: (typeof processIVideoEncodedFrameObserver)[];
        preprocess: (event: string, data: any, buffers: Uint8Array[]) => void;
        handlers: () => IVideoEncodedFrameObserver[];
    };
    IMediaPlayerSourceObserver: {
        suffix: string;
        type: EVENT_TYPE;
        func: (typeof processIMediaPlayerSourceObserver)[];
        handlers: (data: any) => IMediaPlayerSourceObserver[] | undefined;
    };
    IMediaPlayerAudioFrameObserver: {
        suffix: string;
        type: EVENT_TYPE;
        func: (typeof processIMediaPlayerAudioFrameObserver)[];
        preprocess: (event: string, data: any, buffers: Uint8Array[]) => void;
        handlers: (data: any) => IMediaPlayerAudioFrameObserver[] | undefined;
    };
    IMediaPlayerVideoFrameObserver: {
        suffix: string;
        type: EVENT_TYPE;
        func: (typeof processIMediaPlayerVideoFrameObserver)[];
        preprocess: (event: string, data: any, buffers: Uint8Array[]) => void;
        handlers: (data: any) => IMediaPlayerVideoFrameObserver[] | undefined;
    };
    IMediaRecorderObserver: {
        suffix: string;
        type: EVENT_TYPE;
        func: (typeof processIMediaRecorderObserver)[];
        handlers: (data: any) => (IMediaRecorderObserver | undefined)[];
    };
    IMetadataObserver: {
        suffix: string;
        type: EVENT_TYPE;
        func: (typeof processIMetadataObserver)[];
        preprocess: (event: string, data: any, buffers: Uint8Array[]) => void;
        handlers: () => IMetadataObserver[];
    };
    IDirectCdnStreamingEventHandler: {
        suffix: string;
        type: EVENT_TYPE;
        func: (typeof processIDirectCdnStreamingEventHandler)[];
        handlers: () => IDirectCdnStreamingEventHandler[];
    };
    IRtcEngineEventHandler: {
        suffix: string;
        type: EVENT_TYPE;
        func: (typeof processIRtcEngineEventHandler)[];
        preprocess: (event: string, data: any, buffers: Uint8Array[]) => void;
        handlers: () => IRtcEngineEventHandler[];
    };
    IMusicContentCenterEventHandler: {
        suffix: string;
        type: EVENT_TYPE;
        func: (typeof processIMusicContentCenterEventHandler)[];
        preprocess: (event: string, data: any, buffers: Uint8Array[]) => void;
        handlers: () => IMusicContentCenterEventHandler[];
    };
};
/**
 * @internal
 */
export declare function callIrisApi<T>(funcName: string, params: any): any;
/**
 * @internal
 */
export declare function emitEvent(eventType: string, ...params: any[]): void;
//# sourceMappingURL=IrisApiEngine.d.ts.map