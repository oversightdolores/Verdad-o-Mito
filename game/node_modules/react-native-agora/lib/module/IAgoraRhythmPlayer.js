function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
import './extension/IAgoraRhythmPlayerExtension';
/**
 * Virtual metronome state.
 */
export let RhythmPlayerStateType;

/**
 * Virtual Metronome error message.
 */
(function (RhythmPlayerStateType) {
  RhythmPlayerStateType[RhythmPlayerStateType["RhythmPlayerStateIdle"] = 810] = "RhythmPlayerStateIdle";
  RhythmPlayerStateType[RhythmPlayerStateType["RhythmPlayerStateOpening"] = 811] = "RhythmPlayerStateOpening";
  RhythmPlayerStateType[RhythmPlayerStateType["RhythmPlayerStateDecoding"] = 812] = "RhythmPlayerStateDecoding";
  RhythmPlayerStateType[RhythmPlayerStateType["RhythmPlayerStatePlaying"] = 813] = "RhythmPlayerStatePlaying";
  RhythmPlayerStateType[RhythmPlayerStateType["RhythmPlayerStateFailed"] = 814] = "RhythmPlayerStateFailed";
})(RhythmPlayerStateType || (RhythmPlayerStateType = {}));
export let RhythmPlayerErrorType;

/**
 * The metronome configuration.
 */
(function (RhythmPlayerErrorType) {
  RhythmPlayerErrorType[RhythmPlayerErrorType["RhythmPlayerErrorOk"] = 0] = "RhythmPlayerErrorOk";
  RhythmPlayerErrorType[RhythmPlayerErrorType["RhythmPlayerErrorFailed"] = 1] = "RhythmPlayerErrorFailed";
  RhythmPlayerErrorType[RhythmPlayerErrorType["RhythmPlayerErrorCanNotOpen"] = 801] = "RhythmPlayerErrorCanNotOpen";
  RhythmPlayerErrorType[RhythmPlayerErrorType["RhythmPlayerErrorCanNotPlay"] = 802] = "RhythmPlayerErrorCanNotPlay";
  RhythmPlayerErrorType[RhythmPlayerErrorType["RhythmPlayerErrorFileOverDurationLimit"] = 803] = "RhythmPlayerErrorFileOverDurationLimit";
})(RhythmPlayerErrorType || (RhythmPlayerErrorType = {}));
export class AgoraRhythmPlayerConfig {
  constructor() {
    _defineProperty(this, "beatsPerMeasure", void 0);
    _defineProperty(this, "beatsPerMinute", void 0);
  }
}
//# sourceMappingURL=IAgoraRhythmPlayer.js.map