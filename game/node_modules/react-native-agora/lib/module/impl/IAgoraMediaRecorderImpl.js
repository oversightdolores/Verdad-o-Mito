import { callIrisApi } from '../internal/IrisApiEngine';
// @ts-ignore
export class IMediaRecorderImpl {
  setMediaRecorderObserver(connection, callback) {
    const apiType = this.getApiTypeFromSetMediaRecorderObserver(connection, callback);
    const jsonParams = {
      connection: connection,
      callback: callback,
      toJSON: () => {
        return {
          connection: connection
        };
      }
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromSetMediaRecorderObserver(connection, callback) {
    return 'MediaRecorder_setMediaRecorderObserver';
  }
  startRecording(connection, config) {
    const apiType = this.getApiTypeFromStartRecording(connection, config);
    const jsonParams = {
      connection: connection,
      config: config,
      toJSON: () => {
        return {
          connection: connection,
          config: config
        };
      }
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromStartRecording(connection, config) {
    return 'MediaRecorder_startRecording';
  }
  stopRecording(connection) {
    const apiType = this.getApiTypeFromStopRecording(connection);
    const jsonParams = {
      connection: connection,
      toJSON: () => {
        return {
          connection: connection
        };
      }
    };
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return jsonResults.result;
  }
  getApiTypeFromStopRecording(connection) {
    return 'MediaRecorder_stopRecording';
  }
  release() {
    const apiType = this.getApiTypeFromRelease();
    const jsonParams = {};
    callIrisApi.call(this, apiType, jsonParams);
  }
  getApiTypeFromRelease() {
    return 'MediaRecorder_release';
  }
}
//# sourceMappingURL=IAgoraMediaRecorderImpl.js.map