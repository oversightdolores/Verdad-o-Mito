function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
import './extension/IAgoraRtcEngineExtension';
/**
 * Media device types.
 */
export let MediaDeviceType;

/**
 * The playback state of the music file.
 */
(function (MediaDeviceType) {
  MediaDeviceType[MediaDeviceType["UnknownAudioDevice"] = -1] = "UnknownAudioDevice";
  MediaDeviceType[MediaDeviceType["AudioPlayoutDevice"] = 0] = "AudioPlayoutDevice";
  MediaDeviceType[MediaDeviceType["AudioRecordingDevice"] = 1] = "AudioRecordingDevice";
  MediaDeviceType[MediaDeviceType["VideoRenderDevice"] = 2] = "VideoRenderDevice";
  MediaDeviceType[MediaDeviceType["VideoCaptureDevice"] = 3] = "VideoCaptureDevice";
  MediaDeviceType[MediaDeviceType["AudioApplicationPlayoutDevice"] = 4] = "AudioApplicationPlayoutDevice";
})(MediaDeviceType || (MediaDeviceType = {}));
export let AudioMixingStateType;

/**
 * The reason why the playback state of the music file changes. Reported in the onAudioMixingStateChanged callback.
 */
(function (AudioMixingStateType) {
  AudioMixingStateType[AudioMixingStateType["AudioMixingStatePlaying"] = 710] = "AudioMixingStatePlaying";
  AudioMixingStateType[AudioMixingStateType["AudioMixingStatePaused"] = 711] = "AudioMixingStatePaused";
  AudioMixingStateType[AudioMixingStateType["AudioMixingStateStopped"] = 713] = "AudioMixingStateStopped";
  AudioMixingStateType[AudioMixingStateType["AudioMixingStateFailed"] = 714] = "AudioMixingStateFailed";
})(AudioMixingStateType || (AudioMixingStateType = {}));
export let AudioMixingReasonType;

/**
 * @ignore
 */
(function (AudioMixingReasonType) {
  AudioMixingReasonType[AudioMixingReasonType["AudioMixingReasonCanNotOpen"] = 701] = "AudioMixingReasonCanNotOpen";
  AudioMixingReasonType[AudioMixingReasonType["AudioMixingReasonTooFrequentCall"] = 702] = "AudioMixingReasonTooFrequentCall";
  AudioMixingReasonType[AudioMixingReasonType["AudioMixingReasonInterruptedEof"] = 703] = "AudioMixingReasonInterruptedEof";
  AudioMixingReasonType[AudioMixingReasonType["AudioMixingReasonOneLoopCompleted"] = 721] = "AudioMixingReasonOneLoopCompleted";
  AudioMixingReasonType[AudioMixingReasonType["AudioMixingReasonAllLoopsCompleted"] = 723] = "AudioMixingReasonAllLoopsCompleted";
  AudioMixingReasonType[AudioMixingReasonType["AudioMixingReasonStoppedByUser"] = 724] = "AudioMixingReasonStoppedByUser";
  AudioMixingReasonType[AudioMixingReasonType["AudioMixingReasonOk"] = 0] = "AudioMixingReasonOk";
})(AudioMixingReasonType || (AudioMixingReasonType = {}));
export let InjectStreamStatus;

/**
 * The midrange frequency for audio equalization.
 */
(function (InjectStreamStatus) {
  InjectStreamStatus[InjectStreamStatus["InjectStreamStatusStartSuccess"] = 0] = "InjectStreamStatusStartSuccess";
  InjectStreamStatus[InjectStreamStatus["InjectStreamStatusStartAlreadyExists"] = 1] = "InjectStreamStatusStartAlreadyExists";
  InjectStreamStatus[InjectStreamStatus["InjectStreamStatusStartUnauthorized"] = 2] = "InjectStreamStatusStartUnauthorized";
  InjectStreamStatus[InjectStreamStatus["InjectStreamStatusStartTimedout"] = 3] = "InjectStreamStatusStartTimedout";
  InjectStreamStatus[InjectStreamStatus["InjectStreamStatusStartFailed"] = 4] = "InjectStreamStatusStartFailed";
  InjectStreamStatus[InjectStreamStatus["InjectStreamStatusStopSuccess"] = 5] = "InjectStreamStatusStopSuccess";
  InjectStreamStatus[InjectStreamStatus["InjectStreamStatusStopNotFound"] = 6] = "InjectStreamStatusStopNotFound";
  InjectStreamStatus[InjectStreamStatus["InjectStreamStatusStopUnauthorized"] = 7] = "InjectStreamStatusStopUnauthorized";
  InjectStreamStatus[InjectStreamStatus["InjectStreamStatusStopTimedout"] = 8] = "InjectStreamStatusStopTimedout";
  InjectStreamStatus[InjectStreamStatus["InjectStreamStatusStopFailed"] = 9] = "InjectStreamStatusStopFailed";
  InjectStreamStatus[InjectStreamStatus["InjectStreamStatusBroken"] = 10] = "InjectStreamStatusBroken";
})(InjectStreamStatus || (InjectStreamStatus = {}));
export let AudioEqualizationBandFrequency;

/**
 * Audio reverberation types.
 */
(function (AudioEqualizationBandFrequency) {
  AudioEqualizationBandFrequency[AudioEqualizationBandFrequency["AudioEqualizationBand31"] = 0] = "AudioEqualizationBand31";
  AudioEqualizationBandFrequency[AudioEqualizationBandFrequency["AudioEqualizationBand62"] = 1] = "AudioEqualizationBand62";
  AudioEqualizationBandFrequency[AudioEqualizationBandFrequency["AudioEqualizationBand125"] = 2] = "AudioEqualizationBand125";
  AudioEqualizationBandFrequency[AudioEqualizationBandFrequency["AudioEqualizationBand250"] = 3] = "AudioEqualizationBand250";
  AudioEqualizationBandFrequency[AudioEqualizationBandFrequency["AudioEqualizationBand500"] = 4] = "AudioEqualizationBand500";
  AudioEqualizationBandFrequency[AudioEqualizationBandFrequency["AudioEqualizationBand1k"] = 5] = "AudioEqualizationBand1k";
  AudioEqualizationBandFrequency[AudioEqualizationBandFrequency["AudioEqualizationBand2k"] = 6] = "AudioEqualizationBand2k";
  AudioEqualizationBandFrequency[AudioEqualizationBandFrequency["AudioEqualizationBand4k"] = 7] = "AudioEqualizationBand4k";
  AudioEqualizationBandFrequency[AudioEqualizationBandFrequency["AudioEqualizationBand8k"] = 8] = "AudioEqualizationBand8k";
  AudioEqualizationBandFrequency[AudioEqualizationBandFrequency["AudioEqualizationBand16k"] = 9] = "AudioEqualizationBand16k";
})(AudioEqualizationBandFrequency || (AudioEqualizationBandFrequency = {}));
export let AudioReverbType;

/**
 * @ignore
 */
(function (AudioReverbType) {
  AudioReverbType[AudioReverbType["AudioReverbDryLevel"] = 0] = "AudioReverbDryLevel";
  AudioReverbType[AudioReverbType["AudioReverbWetLevel"] = 1] = "AudioReverbWetLevel";
  AudioReverbType[AudioReverbType["AudioReverbRoomSize"] = 2] = "AudioReverbRoomSize";
  AudioReverbType[AudioReverbType["AudioReverbWetDelay"] = 3] = "AudioReverbWetDelay";
  AudioReverbType[AudioReverbType["AudioReverbStrength"] = 4] = "AudioReverbStrength";
})(AudioReverbType || (AudioReverbType = {}));
export let StreamFallbackOptions;

/**
 * @ignore
 */
(function (StreamFallbackOptions) {
  StreamFallbackOptions[StreamFallbackOptions["StreamFallbackOptionDisabled"] = 0] = "StreamFallbackOptionDisabled";
  StreamFallbackOptions[StreamFallbackOptions["StreamFallbackOptionVideoStreamLow"] = 1] = "StreamFallbackOptionVideoStreamLow";
  StreamFallbackOptions[StreamFallbackOptions["StreamFallbackOptionAudioOnly"] = 2] = "StreamFallbackOptionAudioOnly";
})(StreamFallbackOptions || (StreamFallbackOptions = {}));
export let PriorityType;

/**
 * The statistics of the local video stream.
 */
(function (PriorityType) {
  PriorityType[PriorityType["PriorityHigh"] = 50] = "PriorityHigh";
  PriorityType[PriorityType["PriorityNormal"] = 100] = "PriorityNormal";
})(PriorityType || (PriorityType = {}));
export class LocalVideoStats {
  constructor() {
    _defineProperty(this, "uid", void 0);
    _defineProperty(this, "sentBitrate", void 0);
    _defineProperty(this, "sentFrameRate", void 0);
    _defineProperty(this, "captureFrameRate", void 0);
    _defineProperty(this, "captureFrameWidth", void 0);
    _defineProperty(this, "captureFrameHeight", void 0);
    _defineProperty(this, "regulatedCaptureFrameRate", void 0);
    _defineProperty(this, "regulatedCaptureFrameWidth", void 0);
    _defineProperty(this, "regulatedCaptureFrameHeight", void 0);
    _defineProperty(this, "encoderOutputFrameRate", void 0);
    _defineProperty(this, "encodedFrameWidth", void 0);
    _defineProperty(this, "encodedFrameHeight", void 0);
    _defineProperty(this, "rendererOutputFrameRate", void 0);
    _defineProperty(this, "targetBitrate", void 0);
    _defineProperty(this, "targetFrameRate", void 0);
    _defineProperty(this, "qualityAdaptIndication", void 0);
    _defineProperty(this, "encodedBitrate", void 0);
    _defineProperty(this, "encodedFrameCount", void 0);
    _defineProperty(this, "codecType", void 0);
    _defineProperty(this, "txPacketLossRate", void 0);
    _defineProperty(this, "captureBrightnessLevel", void 0);
    _defineProperty(this, "dualStreamEnabled", void 0);
    _defineProperty(this, "hwEncoderAccelerating", void 0);
  }
}

/**
 * Statistics of the remote video stream.
 */
export class RemoteVideoStats {
  constructor() {
    _defineProperty(this, "uid", void 0);
    _defineProperty(this, "delay", void 0);
    _defineProperty(this, "width", void 0);
    _defineProperty(this, "height", void 0);
    _defineProperty(this, "receivedBitrate", void 0);
    _defineProperty(this, "decoderOutputFrameRate", void 0);
    _defineProperty(this, "rendererOutputFrameRate", void 0);
    _defineProperty(this, "frameLossRate", void 0);
    _defineProperty(this, "packetLossRate", void 0);
    _defineProperty(this, "rxStreamType", void 0);
    _defineProperty(this, "totalFrozenTime", void 0);
    _defineProperty(this, "frozenRate", void 0);
    _defineProperty(this, "avSyncTimeMs", void 0);
    _defineProperty(this, "totalActiveTime", void 0);
    _defineProperty(this, "publishDuration", void 0);
    _defineProperty(this, "superResolutionType", void 0);
    _defineProperty(this, "mosValue", void 0);
  }
}

/**
 * @ignore
 */
export class Region {
  constructor() {
    _defineProperty(this, "uid", void 0);
    _defineProperty(this, "x", void 0);
    _defineProperty(this, "y", void 0);
    _defineProperty(this, "width", void 0);
    _defineProperty(this, "height", void 0);
    _defineProperty(this, "zOrder", void 0);
    _defineProperty(this, "alpha", void 0);
    _defineProperty(this, "renderMode", void 0);
  }
}

/**
 * @ignore
 */
export class VideoCompositingLayout {
  constructor() {
    _defineProperty(this, "canvasWidth", void 0);
    _defineProperty(this, "canvasHeight", void 0);
    _defineProperty(this, "backgroundColor", void 0);
    _defineProperty(this, "regions", void 0);
    _defineProperty(this, "regionCount", void 0);
    _defineProperty(this, "appData", void 0);
    _defineProperty(this, "appDataLength", void 0);
  }
}

/**
 * @ignore
 */
export class InjectStreamConfig {
  constructor() {
    _defineProperty(this, "width", void 0);
    _defineProperty(this, "height", void 0);
    _defineProperty(this, "videoGop", void 0);
    _defineProperty(this, "videoFramerate", void 0);
    _defineProperty(this, "videoBitrate", void 0);
    _defineProperty(this, "audioSampleRate", void 0);
    _defineProperty(this, "audioBitrate", void 0);
    _defineProperty(this, "audioChannels", void 0);
  }
}

/**
 * Lifecycle of the CDN live video stream.
 * Deprecated
 */
export let RtmpStreamLifeCycleType;

/**
 * @ignore
 */
(function (RtmpStreamLifeCycleType) {
  RtmpStreamLifeCycleType[RtmpStreamLifeCycleType["RtmpStreamLifeCycleBind2channel"] = 1] = "RtmpStreamLifeCycleBind2channel";
  RtmpStreamLifeCycleType[RtmpStreamLifeCycleType["RtmpStreamLifeCycleBind2owner"] = 2] = "RtmpStreamLifeCycleBind2owner";
})(RtmpStreamLifeCycleType || (RtmpStreamLifeCycleType = {}));
export class PublisherConfiguration {
  constructor() {
    _defineProperty(this, "width", void 0);
    _defineProperty(this, "height", void 0);
    _defineProperty(this, "framerate", void 0);
    _defineProperty(this, "bitrate", void 0);
    _defineProperty(this, "defaultLayout", void 0);
    _defineProperty(this, "lifecycle", void 0);
    _defineProperty(this, "owner", void 0);
    _defineProperty(this, "injectStreamWidth", void 0);
    _defineProperty(this, "injectStreamHeight", void 0);
    _defineProperty(this, "injectStreamUrl", void 0);
    _defineProperty(this, "publishUrl", void 0);
    _defineProperty(this, "rawStreamUrl", void 0);
    _defineProperty(this, "extraInfo", void 0);
  }
}

/**
 * @ignore
 */
export class AudioTrackConfig {
  constructor() {
    _defineProperty(this, "enableLocalPlayback", void 0);
  }
}

/**
 * The camera direction.
 */
export let CameraDirection;

/**
 * The cloud proxy type.
 */
(function (CameraDirection) {
  CameraDirection[CameraDirection["CameraRear"] = 0] = "CameraRear";
  CameraDirection[CameraDirection["CameraFront"] = 1] = "CameraFront";
})(CameraDirection || (CameraDirection = {}));
export let CloudProxyType;

/**
 * The camera capturer preference.
 */
(function (CloudProxyType) {
  CloudProxyType[CloudProxyType["NoneProxy"] = 0] = "NoneProxy";
  CloudProxyType[CloudProxyType["UdpProxy"] = 1] = "UdpProxy";
  CloudProxyType[CloudProxyType["TcpProxy"] = 2] = "TcpProxy";
})(CloudProxyType || (CloudProxyType = {}));
export class CameraCapturerConfiguration {
  constructor() {
    _defineProperty(this, "cameraDirection", void 0);
    _defineProperty(this, "deviceId", void 0);
    _defineProperty(this, "format", void 0);
    _defineProperty(this, "followEncodeDimensionRatio", void 0);
  }
}

/**
 * @ignore
 */
export class ScreenCaptureConfiguration {
  constructor() {
    _defineProperty(this, "isCaptureWindow", void 0);
    _defineProperty(this, "displayId", void 0);
    _defineProperty(this, "screenRect", void 0);
    _defineProperty(this, "windowId", void 0);
    _defineProperty(this, "params", void 0);
    _defineProperty(this, "regionRect", void 0);
  }
}

/**
 * @ignore
 */
export class Size {
  constructor() {
    _defineProperty(this, "width", void 0);
    _defineProperty(this, "height", void 0);
  }
}

/**
 * The image content of the thumbnail or icon. Set in ScreenCaptureSourceInfo .
 * The default image is in the ARGB format. If you need to use another format, you need to convert the image on your own.
 */
export class ThumbImageBuffer {
  constructor() {
    _defineProperty(this, "buffer", void 0);
    _defineProperty(this, "length", void 0);
    _defineProperty(this, "width", void 0);
    _defineProperty(this, "height", void 0);
  }
}

/**
 * The type of the shared target. Set in ScreenCaptureSourceInfo .
 */
export let ScreenCaptureSourceType;

/**
 * The information about the specified shareable window or screen.
 */
(function (ScreenCaptureSourceType) {
  ScreenCaptureSourceType[ScreenCaptureSourceType["ScreencapturesourcetypeUnknown"] = -1] = "ScreencapturesourcetypeUnknown";
  ScreenCaptureSourceType[ScreenCaptureSourceType["ScreencapturesourcetypeWindow"] = 0] = "ScreencapturesourcetypeWindow";
  ScreenCaptureSourceType[ScreenCaptureSourceType["ScreencapturesourcetypeScreen"] = 1] = "ScreencapturesourcetypeScreen";
  ScreenCaptureSourceType[ScreenCaptureSourceType["ScreencapturesourcetypeCustom"] = 2] = "ScreencapturesourcetypeCustom";
})(ScreenCaptureSourceType || (ScreenCaptureSourceType = {}));
export class ScreenCaptureSourceInfo {
  constructor() {
    _defineProperty(this, "type", void 0);
    _defineProperty(this, "sourceId", void 0);
    _defineProperty(this, "sourceName", void 0);
    _defineProperty(this, "thumbImage", void 0);
    _defineProperty(this, "iconImage", void 0);
    _defineProperty(this, "processPath", void 0);
    _defineProperty(this, "sourceTitle", void 0);
    _defineProperty(this, "primaryMonitor", void 0);
    _defineProperty(this, "isOccluded", void 0);
    _defineProperty(this, "minimizeWindow", void 0);
  }
}

/**
 * The advanced options for audio.
 */
export class AdvancedAudioOptions {
  constructor() {
    _defineProperty(this, "audioProcessingChannels", void 0);
  }
}

/**
 * Image configurations
 */
export class ImageTrackOptions {
  constructor() {
    _defineProperty(this, "imageUrl", void 0);
    _defineProperty(this, "fps", void 0);
    _defineProperty(this, "mirrorMode", void 0);
  }
}

/**
 * The channel media options.
 * Agora supports publishing multiple audio streams and one video stream at the same time and in the same RtcConnection . For example, publishMicrophoneTrack, publishAudioTrack, publishCustomAudioTrack, and publishMediaPlayerAudioTrack can be set as true at the same time, but only one of publishCameraTrack, publishScreenTrack, publishCustomVideoTrack, or publishEncodedVideoTrack can be set as true.
 */
export class ChannelMediaOptions {
  constructor() {
    _defineProperty(this, "publishCameraTrack", void 0);
    _defineProperty(this, "publishSecondaryCameraTrack", void 0);
    _defineProperty(this, "publishMicrophoneTrack", void 0);
    _defineProperty(this, "publishScreenCaptureVideo", void 0);
    _defineProperty(this, "publishScreenCaptureAudio", void 0);
    _defineProperty(this, "publishScreenTrack", void 0);
    _defineProperty(this, "publishSecondaryScreenTrack", void 0);
    _defineProperty(this, "publishCustomAudioTrack", void 0);
    _defineProperty(this, "publishCustomAudioSourceId", void 0);
    _defineProperty(this, "publishCustomAudioTrackEnableAec", void 0);
    _defineProperty(this, "publishDirectCustomAudioTrack", void 0);
    _defineProperty(this, "publishCustomAudioTrackAec", void 0);
    _defineProperty(this, "publishCustomVideoTrack", void 0);
    _defineProperty(this, "publishEncodedVideoTrack", void 0);
    _defineProperty(this, "publishMediaPlayerAudioTrack", void 0);
    _defineProperty(this, "publishMediaPlayerVideoTrack", void 0);
    _defineProperty(this, "publishTrancodedVideoTrack", void 0);
    _defineProperty(this, "autoSubscribeAudio", void 0);
    _defineProperty(this, "autoSubscribeVideo", void 0);
    _defineProperty(this, "enableAudioRecordingOrPlayout", void 0);
    _defineProperty(this, "publishMediaPlayerId", void 0);
    _defineProperty(this, "clientRoleType", void 0);
    _defineProperty(this, "audienceLatencyLevel", void 0);
    _defineProperty(this, "defaultVideoStreamType", void 0);
    _defineProperty(this, "channelProfile", void 0);
    _defineProperty(this, "audioDelayMs", void 0);
    _defineProperty(this, "mediaPlayerAudioDelayMs", void 0);
    _defineProperty(this, "token", void 0);
    _defineProperty(this, "enableBuiltInMediaEncryption", void 0);
    _defineProperty(this, "publishRhythmPlayerTrack", void 0);
    _defineProperty(this, "isInteractiveAudience", void 0);
    _defineProperty(this, "customVideoTrackId", void 0);
    _defineProperty(this, "isAudioFilterable", void 0);
  }
}

/**
 * @ignore
 */
export let LocalProxyMode;

/**
 * The cloud proxy type.
 */
(function (LocalProxyMode) {
  LocalProxyMode[LocalProxyMode["ConnectivityFirst"] = 0] = "ConnectivityFirst";
  LocalProxyMode[LocalProxyMode["LocalOnly"] = 1] = "LocalOnly";
})(LocalProxyMode || (LocalProxyMode = {}));
export let ProxyType;

/**
 * @ignore
 */
(function (ProxyType) {
  ProxyType[ProxyType["NoneProxyType"] = 0] = "NoneProxyType";
  ProxyType[ProxyType["UdpProxyType"] = 1] = "UdpProxyType";
  ProxyType[ProxyType["TcpProxyType"] = 2] = "TcpProxyType";
  ProxyType[ProxyType["LocalProxyType"] = 3] = "LocalProxyType";
  ProxyType[ProxyType["TcpProxyAutoFallbackType"] = 4] = "TcpProxyAutoFallbackType";
})(ProxyType || (ProxyType = {}));
export class LogUploadServerInfo {
  constructor() {
    _defineProperty(this, "serverDomain", void 0);
    _defineProperty(this, "serverPath", void 0);
    _defineProperty(this, "serverPort", void 0);
    _defineProperty(this, "serverHttps", void 0);
  }
}

/**
 * @ignore
 */
export class AdvancedConfigInfo {
  constructor() {
    _defineProperty(this, "logUploadServer", void 0);
  }
}

/**
 * @ignore
 */
export class LocalAccessPointConfiguration {
  constructor() {
    _defineProperty(this, "ipList", void 0);
    _defineProperty(this, "ipListSize", void 0);
    _defineProperty(this, "domainList", void 0);
    _defineProperty(this, "domainListSize", void 0);
    _defineProperty(this, "verifyDomainName", void 0);
    _defineProperty(this, "mode", void 0);
    _defineProperty(this, "advancedConfig", void 0);
  }
}

/**
 * The options for leaving a channel.
 */
export class LeaveChannelOptions {
  constructor() {
    _defineProperty(this, "stopAudioMixing", void 0);
    _defineProperty(this, "stopAllEffect", void 0);
    _defineProperty(this, "stopMicrophoneRecording", void 0);
  }
}

/**
 * IRtcEngineEventHandlerThe SDK uses the interface to send event notifications to your app. Your app can get those notifications through methods that inherit this interface.
 */

/**
 * Video device management methods.
 */
export class IVideoDeviceManager {}

/**
 * Configurations for the RtcEngineContext instance.
 */
export class RtcEngineContext {
  constructor() {
    _defineProperty(this, "appId", void 0);
    _defineProperty(this, "channelProfile", void 0);
    _defineProperty(this, "license", void 0);
    _defineProperty(this, "audioScenario", void 0);
    _defineProperty(this, "areaCode", void 0);
    _defineProperty(this, "logConfig", void 0);
    _defineProperty(this, "threadPriority", void 0);
    _defineProperty(this, "useExternalEglContext", void 0);
    _defineProperty(this, "domainLimit", void 0);
  }
}

/**
 * Metadata type of the observer. We only support video metadata for now.
 */
export let MetadataType;

/**
 * @ignore
 */
(function (MetadataType) {
  MetadataType[MetadataType["UnknownMetadata"] = -1] = "UnknownMetadata";
  MetadataType[MetadataType["VideoMetadata"] = 0] = "VideoMetadata";
})(MetadataType || (MetadataType = {}));
export let MaxMetadataSizeType;

/**
 * Media metadata.
 */
(function (MaxMetadataSizeType) {
  MaxMetadataSizeType[MaxMetadataSizeType["InvalidMetadataSizeInByte"] = -1] = "InvalidMetadataSizeInByte";
  MaxMetadataSizeType[MaxMetadataSizeType["DefaultMetadataSizeInByte"] = 512] = "DefaultMetadataSizeInByte";
  MaxMetadataSizeType[MaxMetadataSizeType["MaxMetadataSizeInByte"] = 1024] = "MaxMetadataSizeInByte";
})(MaxMetadataSizeType || (MaxMetadataSizeType = {}));
export class Metadata {
  constructor() {
    _defineProperty(this, "uid", void 0);
    _defineProperty(this, "size", void 0);
    _defineProperty(this, "buffer", void 0);
    _defineProperty(this, "timeStampMs", void 0);
  }
}

/**
 * The metadata observer.
 */

/**
 * @ignore
 */
export let DirectCdnStreamingError;

/**
 * @ignore
 */
(function (DirectCdnStreamingError) {
  DirectCdnStreamingError[DirectCdnStreamingError["DirectCdnStreamingErrorOk"] = 0] = "DirectCdnStreamingErrorOk";
  DirectCdnStreamingError[DirectCdnStreamingError["DirectCdnStreamingErrorFailed"] = 1] = "DirectCdnStreamingErrorFailed";
  DirectCdnStreamingError[DirectCdnStreamingError["DirectCdnStreamingErrorAudioPublication"] = 2] = "DirectCdnStreamingErrorAudioPublication";
  DirectCdnStreamingError[DirectCdnStreamingError["DirectCdnStreamingErrorVideoPublication"] = 3] = "DirectCdnStreamingErrorVideoPublication";
  DirectCdnStreamingError[DirectCdnStreamingError["DirectCdnStreamingErrorNetConnect"] = 4] = "DirectCdnStreamingErrorNetConnect";
  DirectCdnStreamingError[DirectCdnStreamingError["DirectCdnStreamingErrorBadName"] = 5] = "DirectCdnStreamingErrorBadName";
})(DirectCdnStreamingError || (DirectCdnStreamingError = {}));
export let DirectCdnStreamingState;

/**
 * @ignore
 */
(function (DirectCdnStreamingState) {
  DirectCdnStreamingState[DirectCdnStreamingState["DirectCdnStreamingStateIdle"] = 0] = "DirectCdnStreamingStateIdle";
  DirectCdnStreamingState[DirectCdnStreamingState["DirectCdnStreamingStateRunning"] = 1] = "DirectCdnStreamingStateRunning";
  DirectCdnStreamingState[DirectCdnStreamingState["DirectCdnStreamingStateStopped"] = 2] = "DirectCdnStreamingStateStopped";
  DirectCdnStreamingState[DirectCdnStreamingState["DirectCdnStreamingStateFailed"] = 3] = "DirectCdnStreamingStateFailed";
  DirectCdnStreamingState[DirectCdnStreamingState["DirectCdnStreamingStateRecovering"] = 4] = "DirectCdnStreamingStateRecovering";
})(DirectCdnStreamingState || (DirectCdnStreamingState = {}));
export class DirectCdnStreamingStats {
  constructor() {
    _defineProperty(this, "videoWidth", void 0);
    _defineProperty(this, "videoHeight", void 0);
    _defineProperty(this, "fps", void 0);
    _defineProperty(this, "videoBitrate", void 0);
    _defineProperty(this, "audioBitrate", void 0);
  }
}

/**
 * @ignore
 */

/**
 * @ignore
 */
export class DirectCdnStreamingMediaOptions {
  constructor() {
    _defineProperty(this, "publishCameraTrack", void 0);
    _defineProperty(this, "publishMicrophoneTrack", void 0);
    _defineProperty(this, "publishCustomAudioTrack", void 0);
    _defineProperty(this, "publishCustomVideoTrack", void 0);
    _defineProperty(this, "publishMediaPlayerAudioTrack", void 0);
    _defineProperty(this, "publishMediaPlayerId", void 0);
    _defineProperty(this, "customVideoTrackId", void 0);
  }
}

/**
 * @ignore
 */
export class ExtensionInfo {
  constructor() {
    _defineProperty(this, "mediaSourceType", void 0);
    _defineProperty(this, "remoteUid", void 0);
    _defineProperty(this, "channelId", void 0);
    _defineProperty(this, "localUid", void 0);
  }
}

/**
 * The basic interface of the Agora SDK that implements the core functions of real-time communication.
 * IRtcEngine provides the main methods that your app can call.Before calling other APIs, you must call createAgoraRtcEngine to create an IRtcEngine object.
 */
export class IRtcEngine {}

/**
 * @ignore
 */
export let QualityReportFormatType;

/**
 * Media device states.
 */
(function (QualityReportFormatType) {
  QualityReportFormatType[QualityReportFormatType["QualityReportJson"] = 0] = "QualityReportJson";
  QualityReportFormatType[QualityReportFormatType["QualityReportHtml"] = 1] = "QualityReportHtml";
})(QualityReportFormatType || (QualityReportFormatType = {}));
export let MediaDeviceStateType;

/**
 * Video profile.
 */
(function (MediaDeviceStateType) {
  MediaDeviceStateType[MediaDeviceStateType["MediaDeviceStateIdle"] = 0] = "MediaDeviceStateIdle";
  MediaDeviceStateType[MediaDeviceStateType["MediaDeviceStateActive"] = 1] = "MediaDeviceStateActive";
  MediaDeviceStateType[MediaDeviceStateType["MediaDeviceStateDisabled"] = 2] = "MediaDeviceStateDisabled";
  MediaDeviceStateType[MediaDeviceStateType["MediaDeviceStateNotPresent"] = 4] = "MediaDeviceStateNotPresent";
  MediaDeviceStateType[MediaDeviceStateType["MediaDeviceStateUnplugged"] = 8] = "MediaDeviceStateUnplugged";
})(MediaDeviceStateType || (MediaDeviceStateType = {}));
export let VideoProfileType;

/**
 * SDK version information.
 */
(function (VideoProfileType) {
  VideoProfileType[VideoProfileType["VideoProfileLandscape120p"] = 0] = "VideoProfileLandscape120p";
  VideoProfileType[VideoProfileType["VideoProfileLandscape120p3"] = 2] = "VideoProfileLandscape120p3";
  VideoProfileType[VideoProfileType["VideoProfileLandscape180p"] = 10] = "VideoProfileLandscape180p";
  VideoProfileType[VideoProfileType["VideoProfileLandscape180p3"] = 12] = "VideoProfileLandscape180p3";
  VideoProfileType[VideoProfileType["VideoProfileLandscape180p4"] = 13] = "VideoProfileLandscape180p4";
  VideoProfileType[VideoProfileType["VideoProfileLandscape240p"] = 20] = "VideoProfileLandscape240p";
  VideoProfileType[VideoProfileType["VideoProfileLandscape240p3"] = 22] = "VideoProfileLandscape240p3";
  VideoProfileType[VideoProfileType["VideoProfileLandscape240p4"] = 23] = "VideoProfileLandscape240p4";
  VideoProfileType[VideoProfileType["VideoProfileLandscape360p"] = 30] = "VideoProfileLandscape360p";
  VideoProfileType[VideoProfileType["VideoProfileLandscape360p3"] = 32] = "VideoProfileLandscape360p3";
  VideoProfileType[VideoProfileType["VideoProfileLandscape360p4"] = 33] = "VideoProfileLandscape360p4";
  VideoProfileType[VideoProfileType["VideoProfileLandscape360p6"] = 35] = "VideoProfileLandscape360p6";
  VideoProfileType[VideoProfileType["VideoProfileLandscape360p7"] = 36] = "VideoProfileLandscape360p7";
  VideoProfileType[VideoProfileType["VideoProfileLandscape360p8"] = 37] = "VideoProfileLandscape360p8";
  VideoProfileType[VideoProfileType["VideoProfileLandscape360p9"] = 38] = "VideoProfileLandscape360p9";
  VideoProfileType[VideoProfileType["VideoProfileLandscape360p10"] = 39] = "VideoProfileLandscape360p10";
  VideoProfileType[VideoProfileType["VideoProfileLandscape360p11"] = 100] = "VideoProfileLandscape360p11";
  VideoProfileType[VideoProfileType["VideoProfileLandscape480p"] = 40] = "VideoProfileLandscape480p";
  VideoProfileType[VideoProfileType["VideoProfileLandscape480p3"] = 42] = "VideoProfileLandscape480p3";
  VideoProfileType[VideoProfileType["VideoProfileLandscape480p4"] = 43] = "VideoProfileLandscape480p4";
  VideoProfileType[VideoProfileType["VideoProfileLandscape480p6"] = 45] = "VideoProfileLandscape480p6";
  VideoProfileType[VideoProfileType["VideoProfileLandscape480p8"] = 47] = "VideoProfileLandscape480p8";
  VideoProfileType[VideoProfileType["VideoProfileLandscape480p9"] = 48] = "VideoProfileLandscape480p9";
  VideoProfileType[VideoProfileType["VideoProfileLandscape480p10"] = 49] = "VideoProfileLandscape480p10";
  VideoProfileType[VideoProfileType["VideoProfileLandscape720p"] = 50] = "VideoProfileLandscape720p";
  VideoProfileType[VideoProfileType["VideoProfileLandscape720p3"] = 52] = "VideoProfileLandscape720p3";
  VideoProfileType[VideoProfileType["VideoProfileLandscape720p5"] = 54] = "VideoProfileLandscape720p5";
  VideoProfileType[VideoProfileType["VideoProfileLandscape720p6"] = 55] = "VideoProfileLandscape720p6";
  VideoProfileType[VideoProfileType["VideoProfileLandscape1080p"] = 60] = "VideoProfileLandscape1080p";
  VideoProfileType[VideoProfileType["VideoProfileLandscape1080p3"] = 62] = "VideoProfileLandscape1080p3";
  VideoProfileType[VideoProfileType["VideoProfileLandscape1080p5"] = 64] = "VideoProfileLandscape1080p5";
  VideoProfileType[VideoProfileType["VideoProfileLandscape1440p"] = 66] = "VideoProfileLandscape1440p";
  VideoProfileType[VideoProfileType["VideoProfileLandscape1440p2"] = 67] = "VideoProfileLandscape1440p2";
  VideoProfileType[VideoProfileType["VideoProfileLandscape4k"] = 70] = "VideoProfileLandscape4k";
  VideoProfileType[VideoProfileType["VideoProfileLandscape4k3"] = 72] = "VideoProfileLandscape4k3";
  VideoProfileType[VideoProfileType["VideoProfilePortrait120p"] = 1000] = "VideoProfilePortrait120p";
  VideoProfileType[VideoProfileType["VideoProfilePortrait120p3"] = 1002] = "VideoProfilePortrait120p3";
  VideoProfileType[VideoProfileType["VideoProfilePortrait180p"] = 1010] = "VideoProfilePortrait180p";
  VideoProfileType[VideoProfileType["VideoProfilePortrait180p3"] = 1012] = "VideoProfilePortrait180p3";
  VideoProfileType[VideoProfileType["VideoProfilePortrait180p4"] = 1013] = "VideoProfilePortrait180p4";
  VideoProfileType[VideoProfileType["VideoProfilePortrait240p"] = 1020] = "VideoProfilePortrait240p";
  VideoProfileType[VideoProfileType["VideoProfilePortrait240p3"] = 1022] = "VideoProfilePortrait240p3";
  VideoProfileType[VideoProfileType["VideoProfilePortrait240p4"] = 1023] = "VideoProfilePortrait240p4";
  VideoProfileType[VideoProfileType["VideoProfilePortrait360p"] = 1030] = "VideoProfilePortrait360p";
  VideoProfileType[VideoProfileType["VideoProfilePortrait360p3"] = 1032] = "VideoProfilePortrait360p3";
  VideoProfileType[VideoProfileType["VideoProfilePortrait360p4"] = 1033] = "VideoProfilePortrait360p4";
  VideoProfileType[VideoProfileType["VideoProfilePortrait360p6"] = 1035] = "VideoProfilePortrait360p6";
  VideoProfileType[VideoProfileType["VideoProfilePortrait360p7"] = 1036] = "VideoProfilePortrait360p7";
  VideoProfileType[VideoProfileType["VideoProfilePortrait360p8"] = 1037] = "VideoProfilePortrait360p8";
  VideoProfileType[VideoProfileType["VideoProfilePortrait360p9"] = 1038] = "VideoProfilePortrait360p9";
  VideoProfileType[VideoProfileType["VideoProfilePortrait360p10"] = 1039] = "VideoProfilePortrait360p10";
  VideoProfileType[VideoProfileType["VideoProfilePortrait360p11"] = 1100] = "VideoProfilePortrait360p11";
  VideoProfileType[VideoProfileType["VideoProfilePortrait480p"] = 1040] = "VideoProfilePortrait480p";
  VideoProfileType[VideoProfileType["VideoProfilePortrait480p3"] = 1042] = "VideoProfilePortrait480p3";
  VideoProfileType[VideoProfileType["VideoProfilePortrait480p4"] = 1043] = "VideoProfilePortrait480p4";
  VideoProfileType[VideoProfileType["VideoProfilePortrait480p6"] = 1045] = "VideoProfilePortrait480p6";
  VideoProfileType[VideoProfileType["VideoProfilePortrait480p8"] = 1047] = "VideoProfilePortrait480p8";
  VideoProfileType[VideoProfileType["VideoProfilePortrait480p9"] = 1048] = "VideoProfilePortrait480p9";
  VideoProfileType[VideoProfileType["VideoProfilePortrait480p10"] = 1049] = "VideoProfilePortrait480p10";
  VideoProfileType[VideoProfileType["VideoProfilePortrait720p"] = 1050] = "VideoProfilePortrait720p";
  VideoProfileType[VideoProfileType["VideoProfilePortrait720p3"] = 1052] = "VideoProfilePortrait720p3";
  VideoProfileType[VideoProfileType["VideoProfilePortrait720p5"] = 1054] = "VideoProfilePortrait720p5";
  VideoProfileType[VideoProfileType["VideoProfilePortrait720p6"] = 1055] = "VideoProfilePortrait720p6";
  VideoProfileType[VideoProfileType["VideoProfilePortrait1080p"] = 1060] = "VideoProfilePortrait1080p";
  VideoProfileType[VideoProfileType["VideoProfilePortrait1080p3"] = 1062] = "VideoProfilePortrait1080p3";
  VideoProfileType[VideoProfileType["VideoProfilePortrait1080p5"] = 1064] = "VideoProfilePortrait1080p5";
  VideoProfileType[VideoProfileType["VideoProfilePortrait1440p"] = 1066] = "VideoProfilePortrait1440p";
  VideoProfileType[VideoProfileType["VideoProfilePortrait1440p2"] = 1067] = "VideoProfilePortrait1440p2";
  VideoProfileType[VideoProfileType["VideoProfilePortrait4k"] = 1070] = "VideoProfilePortrait4k";
  VideoProfileType[VideoProfileType["VideoProfilePortrait4k3"] = 1072] = "VideoProfilePortrait4k3";
  VideoProfileType[VideoProfileType["VideoProfileDefault"] = 30] = "VideoProfileDefault";
})(VideoProfileType || (VideoProfileType = {}));
export class SDKBuildInfo {
  constructor() {
    _defineProperty(this, "build", void 0);
    _defineProperty(this, "version", void 0);
  }
}

/**
 * The VideoDeviceInfo class that contains the ID and device name of the video devices.
 */
export class VideoDeviceInfo {
  constructor() {
    _defineProperty(this, "deviceId", void 0);
    _defineProperty(this, "deviceName", void 0);
  }
}

/**
 * The AudioDeviceInfo class that contains the ID and device name of the audio devices.
 */
export class AudioDeviceInfo {
  constructor() {
    _defineProperty(this, "deviceId", void 0);
    _defineProperty(this, "deviceName", void 0);
  }
}
//# sourceMappingURL=IAgoraRtcEngine.js.map