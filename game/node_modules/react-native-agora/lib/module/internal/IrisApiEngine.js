import { NativeEventEmitter, NativeModules } from 'react-native';
import base64 from 'base64-js';
import { Buffer } from 'buffer';
const JSON = require('json-bigint');
import { processIAudioEncodedFrameObserver } from '../impl/AgoraBaseImpl';
import { processIAudioFrameObserver, processIAudioFrameObserverBase, processIAudioSpectrumObserver, processIMediaRecorderObserver, processIVideoEncodedFrameObserver, processIVideoFrameObserver } from '../impl/AgoraMediaBaseImpl';
import { processIDirectCdnStreamingEventHandler, processIMetadataObserver, processIRtcEngineEventHandler } from '../impl/IAgoraRtcEngineImpl';
import { processIMediaPlayerAudioFrameObserver, processIMediaPlayerVideoFrameObserver } from '../impl/IAgoraMediaPlayerImpl';
import { processIMediaPlayerSourceObserver } from '../impl/IAgoraMediaPlayerSourceImpl';
import { processIMusicContentCenterEventHandler } from '../impl/IAgoraMusicContentCenterImpl';
import { MediaEngineInternal } from './MediaEngineInternal';
import { MediaPlayerInternal } from './MediaPlayerInternal';
import { MediaRecorderInternal } from './MediaRecorderInternal';
import { MusicCollectionInternal, MusicContentCenterInternal } from './MusicContentCenterInternal';
import { RtcEngineExInternal } from './RtcEngineExInternal';
import EventEmitter from './emitter/EventEmitter';

// @ts-ignore
export const DeviceEventEmitter = new EventEmitter();
const {
  AgoraRtcNg
} = NativeModules;
const AgoraEventEmitter = new NativeEventEmitter(AgoraRtcNg);
AgoraEventEmitter.addListener('AgoraRtcNg:onEvent', handleEvent);
let debuggable = false;

/**
 * @internal
 */
export function setDebuggable(flag) {
  debuggable = flag;
}

/**
 * @internal
 */
export function isDebuggable() {
  return debuggable && __DEV__;
}

/**
 * @internal
 */

export let EVENT_TYPE;

/**
 * @internal
 */
(function (EVENT_TYPE) {
  EVENT_TYPE[EVENT_TYPE["IMediaEngine"] = 0] = "IMediaEngine";
  EVENT_TYPE[EVENT_TYPE["IMediaPlayer"] = 1] = "IMediaPlayer";
  EVENT_TYPE[EVENT_TYPE["IMediaRecorder"] = 2] = "IMediaRecorder";
  EVENT_TYPE[EVENT_TYPE["IRtcEngine"] = 3] = "IRtcEngine";
  EVENT_TYPE[EVENT_TYPE["IMusicContentCenter"] = 4] = "IMusicContentCenter";
})(EVENT_TYPE || (EVENT_TYPE = {}));
export const EVENT_PROCESSORS = {
  IAudioFrameObserver: {
    suffix: 'AudioFrameObserver_',
    type: EVENT_TYPE.IMediaEngine,
    func: [processIAudioFrameObserver, processIAudioFrameObserverBase],
    preprocess: (event, data, buffers) => {
      if (data.audioFrame) {
        data.audioFrame.buffer = buffers[0];
      }
    },
    handlers: () => MediaEngineInternal._audio_frame_observers
  },
  IVideoFrameObserver: {
    suffix: 'VideoFrameObserver_',
    type: EVENT_TYPE.IMediaEngine,
    func: [processIVideoFrameObserver],
    preprocess: (event, data, buffers) => {
      if (data.videoFrame) {
        data.videoFrame.yBuffer = buffers[0];
        data.videoFrame.uBuffer = buffers[1];
        data.videoFrame.vBuffer = buffers[2];
        data.videoFrame.metadata_buffer = buffers[3];
        data.videoFrame.alphaBuffer = buffers[4];
      }
    },
    handlers: () => MediaEngineInternal._video_frame_observers
  },
  IAudioSpectrumObserver: {
    suffix: 'AudioSpectrumObserver_',
    type: EVENT_TYPE.IRtcEngine,
    func: [processIAudioSpectrumObserver],
    preprocess: (event, data, buffers) => {
      // if (data.data) {
      //   (data.data as AudioSpectrumData).audioSpectrumData = buffers[0];
      // }
    },
    handlers: data => data.playerId === 0 ? RtcEngineExInternal._audio_spectrum_observers : undefined
  },
  IMediaPlayerAudioSpectrumObserver: {
    suffix: 'AudioSpectrumObserver_',
    type: EVENT_TYPE.IMediaPlayer,
    func: [processIAudioSpectrumObserver],
    preprocess: (event, data, buffers) => {
      // if (data.data) {
      //   (data.data as AudioSpectrumData).audioSpectrumData = buffers[0];
      // }
    },
    handlers: data => data.playerId !== 0 ? MediaPlayerInternal._audio_spectrum_observers.get(data.playerId) : undefined
  },
  IAudioEncodedFrameObserver: {
    suffix: 'AudioEncodedFrameObserver_',
    type: EVENT_TYPE.IRtcEngine,
    func: [processIAudioEncodedFrameObserver],
    preprocess: (event, data, buffers) => {
      switch (event) {
        case 'OnRecordAudioEncodedFrame':
        case 'OnPlaybackAudioEncodedFrame':
        case 'OnMixedAudioEncodedFrame':
          data.frameBuffer = buffers[0];
          break;
      }
    },
    handlers: () => RtcEngineExInternal._audio_encoded_frame_observers
  },
  IVideoEncodedFrameObserver: {
    suffix: 'VideoEncodedFrameObserver_',
    type: EVENT_TYPE.IMediaEngine,
    func: [processIVideoEncodedFrameObserver],
    preprocess: (event, data, buffers) => {
      switch (event) {
        case 'onEncodedVideoFrameReceived':
          data.imageBuffer = buffers[0];
          break;
      }
    },
    handlers: () => MediaEngineInternal._video_encoded_frame_observers
  },
  IMediaPlayerSourceObserver: {
    suffix: 'MediaPlayerSourceObserver_',
    type: EVENT_TYPE.IMediaPlayer,
    func: [processIMediaPlayerSourceObserver],
    handlers: data => MediaPlayerInternal._source_observers.get(data.playerId)
  },
  IMediaPlayerAudioFrameObserver: {
    suffix: 'MediaPlayer_AudioFrameObserver_',
    type: EVENT_TYPE.IMediaPlayer,
    func: [processIMediaPlayerAudioFrameObserver],
    preprocess: (event, data, buffers) => {
      if (data.frame) {
        data.frame.data_ = Array.from(buffers[0] ?? []);
      }
    },
    handlers: data => MediaPlayerInternal._audio_frame_observers.get(data.playerId)
  },
  IMediaPlayerVideoFrameObserver: {
    suffix: 'MediaPlayer_VideoFrameObserver_',
    type: EVENT_TYPE.IMediaPlayer,
    func: [processIMediaPlayerVideoFrameObserver],
    preprocess: (event, data, buffers) => {
      if (data.frame) {
        data.frame.yBuffer = buffers[0];
        data.frame.uBuffer = buffers[1];
        data.frame.vBuffer = buffers[2];
        data.frame.metadata_buffer = buffers[3];
        data.frame.alphaBuffer = buffers[4];
      }
    },
    handlers: data => MediaPlayerInternal._video_frame_observers.get(data.playerId)
  },
  IMediaRecorderObserver: {
    suffix: 'MediaRecorderObserver_',
    type: EVENT_TYPE.IMediaRecorder,
    func: [processIMediaRecorderObserver],
    handlers: data => [MediaRecorderInternal._observers.get((data.connection.channelId ?? '') + data.connection.localUid)]
  },
  IMetadataObserver: {
    suffix: 'MetadataObserver_',
    type: EVENT_TYPE.IRtcEngine,
    func: [processIMetadataObserver],
    preprocess: (event, data, buffers) => {
      switch (event) {
        case 'onMetadataReceived':
          if (data.metadata) {
            data.metadata.buffer = buffers[0];
          }
          break;
      }
    },
    handlers: () => RtcEngineExInternal._metadata_observer
  },
  IDirectCdnStreamingEventHandler: {
    suffix: 'DirectCdnStreamingEventHandler_',
    type: EVENT_TYPE.IRtcEngine,
    func: [processIDirectCdnStreamingEventHandler],
    handlers: () => RtcEngineExInternal._direct_cdn_streaming_event_handler
  },
  IRtcEngineEventHandler: {
    suffix: 'RtcEngineEventHandler_',
    type: EVENT_TYPE.IRtcEngine,
    func: [processIRtcEngineEventHandler],
    preprocess: (event, data, buffers) => {
      switch (event) {
        case 'onStreamMessage':
        case 'onStreamMessageEx':
          data.data = buffers[0];
          break;
      }
    },
    handlers: () => RtcEngineExInternal._event_handlers
  },
  IMusicContentCenterEventHandler: {
    suffix: 'MusicContentCenterEventHandler_',
    type: EVENT_TYPE.IMusicContentCenter,
    func: [processIMusicContentCenterEventHandler],
    preprocess: (event, data, buffers) => {
      switch (event) {
        case 'onMusicCollectionResult':
          {
            const result = data.result;
            data.result = new MusicCollectionInternal(result);
            break;
          }
      }
    },
    handlers: () => MusicContentCenterInternal._event_handlers
  }
};
function handleEvent(_ref) {
  var _processor$handlers;
  let {
    event,
    data,
    buffers
  } = _ref;
  if (debuggable) {
    console.info('onEvent', event, data, buffers);
  }
  let _data;
  try {
    _data = JSON.parse(data) ?? {};
  } catch (e) {
    _data = {};
  }
  let _event = event;
  let processor = EVENT_PROCESSORS.IRtcEngineEventHandler;
  Object.values(EVENT_PROCESSORS).some(it => {
    // @ts-ignore
    const p = it;
    if (_event.startsWith(p.suffix) && processor.handlers(_data) !== undefined) {
      processor = p;
      const reg = new RegExp(`^${processor.suffix}`, 'g');
      _event = _event.replace(reg, '');
      return true;
    }
    return false;
  });
  if (_event.endsWith('Ex')) {
    _event = _event.replace(/Ex$/g, '');
  }
  const _buffers = buffers === null || buffers === void 0 ? void 0 : buffers.map(value => {
    return Buffer.from(value, 'base64');
  });
  if (processor.preprocess) processor.preprocess(_event, _data, _buffers);
  (_processor$handlers = processor.handlers(_data)) === null || _processor$handlers === void 0 ? void 0 : _processor$handlers.map(value => {
    if (value) {
      processor.func.map(it => {
        it(value, _event, _data);
      });
    }
  });
  emitEvent(_event, processor.type, _data);
}

/**
 * @internal
 */
export function callIrisApi(funcName, params) {
  try {
    const buffers = [];
    if (funcName.startsWith('MediaEngine_')) {
      switch (funcName) {
        case 'MediaEngine_pushAudioFrame':
        case 'MediaEngine_pushCaptureAudioFrame':
        case 'MediaEngine_pushReverseAudioFrame':
        case 'MediaEngine_pushDirectAudioFrame':
          // frame.buffer
          buffers.push(base64.fromByteArray(params.frame.buffer));
          break;
        case 'MediaEngine_pushVideoFrame':
          // frame.buffer
          buffers.push(base64.fromByteArray(params.frame.buffer));
          // frame.eglContext
          buffers.push(base64.fromByteArray(Buffer.from('')));
          // frame.metadata_buffer
          buffers.push(base64.fromByteArray(Buffer.from('')));
          break;
        case 'MediaEngine_pushEncodedVideoImage':
          // imageBuffer
          buffers.push(base64.fromByteArray(params.imageBuffer));
          break;
      }
    } else if (funcName.startsWith('MediaPlayer_') || funcName.startsWith('MusicPlayer_')) {
      var _params$toJSON;
      // @ts-ignore
      params.mediaPlayerId = this.getMediaPlayerId();
      const json = (_params$toJSON = params.toJSON) === null || _params$toJSON === void 0 ? void 0 : _params$toJSON.call();
      params.toJSON = function () {
        return {
          ...json,
          playerId: params.mediaPlayerId
        };
      };
    } else if (funcName.startsWith('RtcEngine_')) {
      switch (funcName) {
        case 'RtcEngine_initialize':
          AgoraRtcNg.newIrisApiEngine();
          break;
        case 'RtcEngine_release':
          AgoraRtcNg.callApi({
            funcName,
            params: JSON.stringify(params),
            buffers
          });
          AgoraRtcNg.destroyIrisApiEngine();
          return;
        case 'RtcEngine_sendMetaData':
          // metadata.buffer
          buffers.push(base64.fromByteArray(params.metadata.buffer));
          break;
        case 'RtcEngine_sendStreamMessage':
        case 'RtcEngine_sendStreamMessageEx':
          // data
          buffers.push(base64.fromByteArray(params.data));
          break;
        case 'RtcEngine_destroyMediaPlayer':
          // @ts-ignore
          params.mediaPlayerId = params.media_player.getMediaPlayerId();
          params.toJSON = function () {
            return {
              playerId: params.mediaPlayerId
            };
          };
          break;
      }
    }
    let ret = AgoraRtcNg.callApi({
      funcName,
      params: JSON.stringify(params),
      buffers
    });
    if (ret !== undefined && ret !== null && ret !== '') {
      ret = JSON.parse(ret);
      if (isDebuggable()) {
        if (typeof ret.result === 'number' && ret.result < 0) {
          console.error('callApi', funcName, JSON.stringify(params), ret);
        } else {
          console.debug('callApi', funcName, JSON.stringify(params), ret);
        }
      }
      return ret;
    }
  } catch (e) {
    if (isDebuggable()) {
      console.error('callApi', funcName, JSON.stringify(params), e);
    } else {
      console.warn('callApi', funcName, JSON.stringify(params), e);
    }
  }
  return {};
}

/**
 * @internal
 */
export function emitEvent(eventType) {
  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    params[_key - 1] = arguments[_key];
  }
  DeviceEventEmitter.emit(eventType, ...params);
}
//# sourceMappingURL=IrisApiEngine.js.map