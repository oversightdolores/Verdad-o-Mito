function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
import { createCheckers } from 'ts-interface-checker';
import { VideoSourceType } from '../AgoraBase';
import { processIAudioEncodedFrameObserver } from '../impl/AgoraBaseImpl';
import { processIAudioSpectrumObserver } from '../impl/AgoraMediaBaseImpl';
import { IRtcEngineExImpl } from '../impl/IAgoraRtcEngineExImpl';
import { processIDirectCdnStreamingEventHandler, processIMetadataObserver, processIRtcEngineEventHandler } from '../impl/IAgoraRtcEngineImpl';
import AgoraBaseTI from '../ti/AgoraBase-ti';
import AgoraMediaBaseTI from '../ti/AgoraMediaBase-ti';
import IAgoraRtcEngineTI from '../ti/IAgoraRtcEngine-ti';
const checkers = createCheckers(AgoraBaseTI, AgoraMediaBaseTI, IAgoraRtcEngineTI);
import { LocalSpatialAudioEngineInternal } from './LocalSpatialAudioEngineInternal';
import { MediaEngineInternal } from './MediaEngineInternal';
import { MediaPlayerInternal } from './MediaPlayerInternal';
import { MediaRecorderInternal } from './MediaRecorderInternal';
import { MusicContentCenterInternal } from './MusicContentCenterInternal';
import { callIrisApi, DeviceEventEmitter, EVENT_TYPE } from './IrisApiEngine';
export class RtcEngineExInternal extends IRtcEngineExImpl {
  constructor() {
    super(...arguments);
    _defineProperty(this, "_media_engine", new MediaEngineInternal());
    _defineProperty(this, "_media_recorder", new MediaRecorderInternal());
    _defineProperty(this, "_music_content_center", new MusicContentCenterInternal());
    _defineProperty(this, "_local_spatial_audio_engine", new LocalSpatialAudioEngineInternal());
    _defineProperty(this, "_events", new Map());
  }
  initialize(context) {
    const ret = super.initialize(context);
    callIrisApi.call(this, 'RtcEngine_setAppType', {
      appType: 8
    });
    return ret;
  }
  release() {
    let sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    this._media_engine.release();
    this._media_recorder.release();
    this._local_spatial_audio_engine.release();
    RtcEngineExInternal._event_handlers = [];
    RtcEngineExInternal._direct_cdn_streaming_event_handler = [];
    RtcEngineExInternal._metadata_observer = [];
    RtcEngineExInternal._audio_encoded_frame_observers = [];
    RtcEngineExInternal._audio_spectrum_observers = [];
    MediaPlayerInternal._source_observers.clear();
    MediaPlayerInternal._audio_frame_observers.clear();
    MediaPlayerInternal._video_frame_observers.clear();
    MediaPlayerInternal._audio_spectrum_observers.clear();
    this.removeAllListeners();
    super.release(sync);
  }
  _addListenerPreCheck(eventType) {
    var _checkers$IRtcEngineE, _checkers$IDirectCdnS, _checkers$IMetadataOb, _checkers$IAudioEncod, _checkers$IAudioSpect;
    if ((_checkers$IRtcEngineE = checkers.IRtcEngineEventHandler) !== null && _checkers$IRtcEngineE !== void 0 && _checkers$IRtcEngineE.strictTest({
      [eventType]: undefined
    })) {
      if (RtcEngineExInternal._event_handlers.length === 0) {
        this.registerEventHandler({});
      }
    }
    if ((_checkers$IDirectCdnS = checkers.IDirectCdnStreamingEventHandler) !== null && _checkers$IDirectCdnS !== void 0 && _checkers$IDirectCdnS.strictTest({
      [eventType]: undefined
    })) {
      if (RtcEngineExInternal._direct_cdn_streaming_event_handler.length === 0) {
        console.error('Please call `startDirectCdnStreaming` before you want to receive event by `addListener`');
        return false;
      }
    }
    if ((_checkers$IMetadataOb = checkers.IMetadataObserver) !== null && _checkers$IMetadataOb !== void 0 && _checkers$IMetadataOb.strictTest({
      [eventType]: undefined
    })) {
      if (RtcEngineExInternal._metadata_observer.length === 0) {
        console.error('Please call `registerMediaMetadataObserver` before you want to receive event by `addListener`');
        return false;
      }
    }
    if ((_checkers$IAudioEncod = checkers.IAudioEncodedFrameObserver) !== null && _checkers$IAudioEncod !== void 0 && _checkers$IAudioEncod.strictTest({
      [eventType]: undefined
    })) {
      if (RtcEngineExInternal._audio_encoded_frame_observers.length === 0) {
        console.error('Please call `registerAudioEncodedFrameObserver` before you want to receive event by `addListener`');
        return false;
      }
    }
    if ((_checkers$IAudioSpect = checkers.IAudioSpectrumObserver) !== null && _checkers$IAudioSpect !== void 0 && _checkers$IAudioSpect.strictTest({
      [eventType]: undefined
    })) {
      if (RtcEngineExInternal._audio_spectrum_observers.length === 0) {
        this.registerAudioSpectrumObserver({});
      }
    }
    return true;
  }
  addListener(eventType, listener) {
    this._addListenerPreCheck(eventType);
    const callback = function () {
      if ((arguments.length <= 0 ? undefined : arguments[0]) !== EVENT_TYPE.IRtcEngine) {
        return;
      }
      processIRtcEngineEventHandler({
        [eventType]: listener
      }, eventType, arguments.length <= 1 ? undefined : arguments[1]);
      processIDirectCdnStreamingEventHandler({
        [eventType]: listener
      }, eventType, arguments.length <= 1 ? undefined : arguments[1]);
      processIMetadataObserver({
        [eventType]: listener
      }, eventType, arguments.length <= 1 ? undefined : arguments[1]);
      processIAudioEncodedFrameObserver({
        [eventType]: listener
      }, eventType, arguments.length <= 1 ? undefined : arguments[1]);
      processIAudioSpectrumObserver({
        [eventType]: listener
      }, eventType, arguments.length <= 1 ? undefined : arguments[1]);
    };
    const subscription = DeviceEventEmitter.addListener(eventType, callback);
    this._events.set(listener, {
      eventType,
      subscription
    });
    return subscription;
  }
  removeListener(eventType, listener) {
    if (!this._events.has(listener)) return;
    DeviceEventEmitter.removeSubscription(this._events.get(listener).subscription);
    this._events.delete(listener);
  }
  removeAllListeners(eventType) {
    if (eventType === undefined) {
      this._events.forEach(value => {
        DeviceEventEmitter.removeAllListeners(value.eventType);
      });
      this._events.clear();
    } else {
      DeviceEventEmitter.removeAllListeners(eventType);
      this._events.forEach((value, key) => {
        if (value.eventType === eventType) {
          this._events.delete(key);
        }
      });
    }
  }
  getVersion() {
    const apiType = 'RtcEngine_getVersion';
    const jsonParams = {};
    const jsonResults = callIrisApi.call(this, apiType, jsonParams);
    return {
      build: jsonResults.build,
      version: jsonResults.result
    };
  }
  registerEventHandler(eventHandler) {
    if (!RtcEngineExInternal._event_handlers.find(value => value === eventHandler)) {
      RtcEngineExInternal._event_handlers.push(eventHandler);
    }
    return super.registerEventHandler(eventHandler);
  }
  unregisterEventHandler(eventHandler) {
    RtcEngineExInternal._event_handlers = RtcEngineExInternal._event_handlers.filter(value => value !== eventHandler);
    return super.unregisterEventHandler(eventHandler);
  }
  createMediaPlayer() {
    // @ts-ignore
    const mediaPlayerId = super.createMediaPlayer();
    return new MediaPlayerInternal(mediaPlayerId);
  }
  destroyMediaPlayer(mediaPlayer) {
    var _mediaPlayer$release;
    const ret = super.destroyMediaPlayer(mediaPlayer);
    (_mediaPlayer$release = mediaPlayer.release) === null || _mediaPlayer$release === void 0 ? void 0 : _mediaPlayer$release.call(mediaPlayer);
    return ret;
  }
  startDirectCdnStreaming(eventHandler, publishUrl, options) {
    if (!RtcEngineExInternal._direct_cdn_streaming_event_handler.find(value => value === eventHandler)) {
      RtcEngineExInternal._direct_cdn_streaming_event_handler.push(eventHandler);
    }
    return super.startDirectCdnStreaming(eventHandler, publishUrl, options);
  }
  registerMediaMetadataObserver(observer, type) {
    if (!RtcEngineExInternal._metadata_observer.find(value => value === observer)) {
      RtcEngineExInternal._metadata_observer.push(observer);
    }
    return super.registerMediaMetadataObserver(observer, type);
  }
  unregisterMediaMetadataObserver(observer, type) {
    RtcEngineExInternal._metadata_observer = RtcEngineExInternal._metadata_observer.filter(value => value !== observer);
    return super.unregisterMediaMetadataObserver(observer, type);
  }
  getApiTypeFromJoinChannel(token, channelId, uid, options) {
    return 'RtcEngine_joinChannel2';
  }
  getApiTypeFromLeaveChannel(options) {
    return options === undefined ? 'RtcEngine_leaveChannel' : 'RtcEngine_leaveChannel2';
  }
  getApiTypeFromSetClientRole(role, options) {
    return options === undefined ? 'RtcEngine_setClientRole' : 'RtcEngine_setClientRole2';
  }
  getApiTypeFromStartEchoTest() {
    let intervalInSeconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
    return 'RtcEngine_startEchoTest2';
  }
  getApiTypeFromStartPreview() {
    let sourceType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : VideoSourceType.VideoSourceCameraPrimary;
    return 'RtcEngine_startPreview2';
  }
  getApiTypeFromStopPreview() {
    let sourceType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : VideoSourceType.VideoSourceCameraPrimary;
    return 'RtcEngine_stopPreview2';
  }
  getApiTypeFromStartAudioRecording(config) {
    return 'RtcEngine_startAudioRecording3';
  }
  getApiTypeFromStartAudioMixing(filePath, loopback, cycle) {
    let startPos = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    return 'RtcEngine_startAudioMixing2';
  }
  getApiTypeFromEnableDualStreamMode(enabled, streamConfig) {
    return streamConfig === undefined ? 'RtcEngine_enableDualStreamMode' : 'RtcEngine_enableDualStreamMode2';
  }
  getApiTypeFromSetDualStreamMode(mode, streamConfig) {
    return streamConfig === undefined ? 'RtcEngine_setDualStreamMode' : 'RtcEngine_setDualStreamMode2';
  }
  getApiTypeFromLeaveChannelEx(connection, options) {
    return 'RtcEngineEx_leaveChannelEx2';
  }
  getApiTypeFromCreateDataStream(config) {
    return 'RtcEngine_createDataStream2';
  }
  getApiTypeFromAddVideoWatermark(watermarkUrl, options) {
    return 'RtcEngine_addVideoWatermark2';
  }
  getApiTypeFromJoinChannelWithUserAccount(token, channelId, userAccount, options) {
    return options === undefined ? 'RtcEngine_joinChannelWithUserAccount' : 'RtcEngine_joinChannelWithUserAccount2';
  }
  getApiTypeFromCreateDataStreamEx(config, connection) {
    return 'RtcEngineEx_createDataStreamEx2';
  }
  getAudioDeviceManager() {
    throw 'Not support';
  }
  getVideoDeviceManager() {
    throw 'Not support';
  }
  getMediaEngine() {
    return this._media_engine;
  }
  getMediaRecorder() {
    return this._media_recorder;
  }
  getMusicContentCenter() {
    return this._music_content_center;
  }
  getLocalSpatialAudioEngine() {
    return this._local_spatial_audio_engine;
  }
  registerAudioEncodedFrameObserver(config, observer) {
    if (!RtcEngineExInternal._audio_encoded_frame_observers.find(value => value === observer)) {
      RtcEngineExInternal._audio_encoded_frame_observers.push(observer);
    }
    return super.registerAudioEncodedFrameObserver(config, observer);
  }
  unregisterAudioEncodedFrameObserver(observer) {
    RtcEngineExInternal._audio_encoded_frame_observers = RtcEngineExInternal._audio_encoded_frame_observers.filter(value => value !== observer);
    return super.unregisterAudioEncodedFrameObserver(observer);
  }
  registerAudioSpectrumObserver(observer) {
    if (!RtcEngineExInternal._audio_spectrum_observers.find(value => value === observer)) {
      RtcEngineExInternal._audio_spectrum_observers.push(observer);
    }
    return super.registerAudioSpectrumObserver(observer);
  }
  unregisterAudioSpectrumObserver(observer) {
    RtcEngineExInternal._audio_spectrum_observers = RtcEngineExInternal._audio_spectrum_observers.filter(value => value !== observer);
    return super.unregisterAudioSpectrumObserver(observer);
  }
}
_defineProperty(RtcEngineExInternal, "_event_handlers", []);
_defineProperty(RtcEngineExInternal, "_direct_cdn_streaming_event_handler", []);
_defineProperty(RtcEngineExInternal, "_metadata_observer", []);
_defineProperty(RtcEngineExInternal, "_audio_encoded_frame_observers", []);
_defineProperty(RtcEngineExInternal, "_audio_spectrum_observers", []);
//# sourceMappingURL=RtcEngineExInternal.js.map