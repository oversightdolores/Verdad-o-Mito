function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { Component } from 'react';
import { VideoSourceType } from '../AgoraBase';
export default class IAgoraRtcRenderView extends Component {
  get funcName() {
    let funcName;
    const {
      canvas,
      connection
    } = this.props;
    if (canvas.sourceType === undefined) {
      if (canvas.uid) {
        funcName = 'RtcEngine_setupRemoteVideo';
      } else {
        funcName = 'RtcEngine_setupLocalVideo';
      }
    } else if (canvas.sourceType === VideoSourceType.VideoSourceMediaPlayer) {
      funcName = 'MediaPlayer_setView';
    } else if (canvas.sourceType === VideoSourceType.VideoSourceRemote) {
      funcName = 'RtcEngine_setupRemoteVideo';
    } else {
      funcName = 'RtcEngine_setupLocalVideo';
    }
    if (funcName === 'RtcEngine_setupRemoteVideo' && connection) {
      funcName = 'RtcEngineEx_setupRemoteVideoEx';
    }
    return funcName;
  }
  params(props) {
    return {
      funcName: this.funcName,
      params: JSON.stringify({
        canvas: props.canvas,
        connection: props.connection,
        playerId: props.canvas.uid
      })
    };
  }
  render() {
    const {
      canvas,
      connection,
      ...others
    } = this.props;
    const AgoraRtcRenderer = this.view;
    return (
      /*#__PURE__*/
      // @ts-ignore
      React.createElement(AgoraRtcRenderer, _extends({
        callApi: this.params({
          canvas,
          connection
        })
      }, others))
    );
  }
}
//# sourceMappingURL=IAgoraRtcRenderView.js.map