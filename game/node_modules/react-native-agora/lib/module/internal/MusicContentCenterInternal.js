function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
import { createCheckers } from 'ts-interface-checker';
import { IMusicContentCenterImpl, IMusicPlayerImpl, MusicCollectionImpl, processIMusicContentCenterEventHandler } from '../impl/IAgoraMusicContentCenterImpl';
import IAgoraMusicContentCenterTI from '../ti/IAgoraMusicContentCenter-ti';
const checkers = createCheckers(IAgoraMusicContentCenterTI);
import { MediaPlayerInternal } from './MediaPlayerInternal';
import { DeviceEventEmitter, EVENT_TYPE } from './IrisApiEngine';
export class MusicContentCenterInternal extends IMusicContentCenterImpl {
  constructor() {
    super(...arguments);
    _defineProperty(this, "_events", new Map());
  }
  _addListenerPreCheck(eventType) {
    var _checkers$IMusicConte;
    if ((_checkers$IMusicConte = checkers.IMusicContentCenterEventHandler) !== null && _checkers$IMusicConte !== void 0 && _checkers$IMusicConte.strictTest({
      [eventType]: undefined
    })) {
      if (MusicContentCenterInternal._event_handlers.length === 0) {
        this.registerEventHandler({});
      }
    }
    return true;
  }
  addListener(eventType, listener) {
    this._addListenerPreCheck(eventType);
    const callback = function () {
      if ((arguments.length <= 0 ? undefined : arguments[0]) !== EVENT_TYPE.IMusicContentCenter) {
        return;
      }
      processIMusicContentCenterEventHandler({
        [eventType]: listener
      }, eventType, arguments.length <= 1 ? undefined : arguments[1]);
    };
    const subscription = DeviceEventEmitter.addListener(eventType, callback);
    this._events.set(listener, {
      eventType,
      subscription
    });
    return subscription;
  }
  removeListener(eventType, listener) {
    if (!this._events.has(listener)) return;
    DeviceEventEmitter.removeSubscription(this._events.get(listener).subscription);
    this._events.delete(listener);
  }
  removeAllListeners(eventType) {
    if (eventType === undefined) {
      this._events.forEach(value => {
        DeviceEventEmitter.removeAllListeners(value.eventType);
      });
      this._events.clear();
    } else {
      DeviceEventEmitter.removeAllListeners(eventType);
      this._events.forEach((value, key) => {
        if (value.eventType === eventType) {
          this._events.delete(key);
        }
      });
    }
  }
  registerEventHandler(eventHandler) {
    if (!MusicContentCenterInternal._event_handlers.find(value => value === eventHandler)) {
      MusicContentCenterInternal._event_handlers.push(eventHandler);
    }
    return super.registerEventHandler(eventHandler);
  }
  unregisterEventHandler() {
    MusicContentCenterInternal._event_handlers = [];
    return super.unregisterEventHandler();
  }
  release() {
    MusicContentCenterInternal._event_handlers = [];
    super.release();
  }
  createMusicPlayer() {
    // @ts-ignore
    const mediaPlayerId = super.createMusicPlayer();
    return new MusicPlayerInternal(mediaPlayerId);
  }
}
_defineProperty(MusicContentCenterInternal, "_event_handlers", []);
class _MusicPlayerInternal extends IMusicPlayerImpl {
  constructor(mediaPlayerId) {
    super();
    _defineProperty(this, "_mediaPlayerId", void 0);
    this._mediaPlayerId = mediaPlayerId;
  }
  getMediaPlayerId() {
    return this._mediaPlayerId;
  }
  getApiTypeFromOpenWithSongCode(songCode) {
    let startPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return 'MusicPlayer_open';
  }
}
export class MusicPlayerInternal extends MediaPlayerInternal {
  constructor(mediaPlayerId) {
    super(mediaPlayerId);
    // @ts-ignore
    _defineProperty(this, "_musicPlayer", void 0);
    this._musicPlayer = new _MusicPlayerInternal(mediaPlayerId);
  }
  openWithSongCode(songCode, startPos) {
    return this._musicPlayer.openWithSongCode(songCode, startPos);
  }
}
export class MusicCollectionInternal extends MusicCollectionImpl {
  constructor(musicCollection) {
    super();
    _defineProperty(this, "_musicCollection", void 0);
    this._musicCollection = musicCollection;
  }
  getCount() {
    return this._musicCollection.count;
  }
  getMusic(index) {
    return this._musicCollection.music[index] ?? {};
  }
  getPage() {
    return this._musicCollection.page;
  }
  getPageSize() {
    return this._musicCollection.pageSize;
  }
  getTotal() {
    return this._musicCollection.total;
  }
}
//# sourceMappingURL=MusicContentCenterInternal.js.map