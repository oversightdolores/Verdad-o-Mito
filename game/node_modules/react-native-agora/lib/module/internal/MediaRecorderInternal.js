function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
import { createCheckers } from 'ts-interface-checker';
import { ErrorCodeType } from '../AgoraBase';
import { processIMediaRecorderObserver } from '../impl/AgoraMediaBaseImpl';
import { IMediaRecorderImpl } from '../impl/IAgoraMediaRecorderImpl';
import AgoraMediaBaseTI from '../ti/AgoraMediaBase-ti';
const checkers = createCheckers(AgoraMediaBaseTI);
import { DeviceEventEmitter, EVENT_TYPE } from './IrisApiEngine';
export class MediaRecorderInternal extends IMediaRecorderImpl {
  constructor() {
    super(...arguments);
    _defineProperty(this, "_events", new Map());
  }
  setMediaRecorderObserver(connection, callback) {
    const key = (connection.channelId ?? '') + connection.localUid;
    if (MediaRecorderInternal._observers.has(key)) {
      return ErrorCodeType.ErrOk;
    }
    MediaRecorderInternal._observers.set(key, callback);
    return super.setMediaRecorderObserver(connection, callback);
  }
  release() {
    MediaRecorderInternal._observers.clear();
    this.removeAllListeners();
    super.release();
  }
  _addListenerPreCheck(eventType) {
    var _checkers$IMediaRecor;
    if ((_checkers$IMediaRecor = checkers.IMediaRecorderObserver) !== null && _checkers$IMediaRecor !== void 0 && _checkers$IMediaRecor.strictTest({
      [eventType]: undefined
    })) {
      if (MediaRecorderInternal._observers.size === 0) {
        console.error('Please call `setMediaRecorderObserver` before you want to receive event by `addListener`');
        return false;
      }
    }
    return true;
  }
  addListener(eventType, listener) {
    this._addListenerPreCheck(eventType);
    const callback = function () {
      if ((arguments.length <= 0 ? undefined : arguments[0]) !== EVENT_TYPE.IMediaRecorder) {
        return;
      }
      processIMediaRecorderObserver({
        [eventType]: listener
      }, eventType, arguments.length <= 1 ? undefined : arguments[1]);
    };
    const subscription = DeviceEventEmitter.addListener(eventType, callback);
    this._events.set(listener, {
      eventType,
      subscription
    });
    return subscription;
  }
  removeListener(eventType, listener) {
    if (!this._events.has(listener)) return;
    DeviceEventEmitter.removeSubscription(this._events.get(listener).subscription);
    this._events.delete(listener);
  }
  removeAllListeners(eventType) {
    if (eventType === undefined) {
      this._events.forEach(value => {
        DeviceEventEmitter.removeAllListeners(value.eventType);
      });
      this._events.clear();
    } else {
      DeviceEventEmitter.removeAllListeners(eventType);
      this._events.forEach((value, key) => {
        if (value.eventType === eventType) {
          this._events.delete(key);
        }
      });
    }
  }
}
_defineProperty(MediaRecorderInternal, "_observers", new Map());
//# sourceMappingURL=MediaRecorderInternal.js.map