function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
import { createCheckers } from 'ts-interface-checker';
import { processIAudioFrameObserver, processIVideoEncodedFrameObserver, processIVideoFrameObserver } from '../impl/AgoraMediaBaseImpl';
import { IMediaEngineImpl } from '../impl/IAgoraMediaEngineImpl';
import AgoraMediaBaseTI from '../ti/AgoraMediaBase-ti';
const checkers = createCheckers(AgoraMediaBaseTI);
import { DeviceEventEmitter, EVENT_TYPE } from './IrisApiEngine';
export class MediaEngineInternal extends IMediaEngineImpl {
  constructor() {
    super(...arguments);
    _defineProperty(this, "_events", new Map());
  }
  registerAudioFrameObserver(observer) {
    if (!MediaEngineInternal._audio_frame_observers.find(value => value === observer)) {
      MediaEngineInternal._audio_frame_observers.push(observer);
    }
    return super.registerAudioFrameObserver(observer);
  }
  unregisterAudioFrameObserver(observer) {
    MediaEngineInternal._audio_frame_observers = MediaEngineInternal._audio_frame_observers.filter(value => value !== observer);
    return super.unregisterAudioFrameObserver(observer);
  }
  registerVideoFrameObserver(observer) {
    if (!MediaEngineInternal._video_frame_observers.find(value => value === observer)) {
      MediaEngineInternal._video_frame_observers.push(observer);
    }
    return super.registerVideoFrameObserver(observer);
  }
  unregisterVideoFrameObserver(observer) {
    MediaEngineInternal._video_frame_observers = MediaEngineInternal._video_frame_observers.filter(value => value !== observer);
    return super.unregisterVideoFrameObserver(observer);
  }
  registerVideoEncodedFrameObserver(observer) {
    if (!MediaEngineInternal._video_encoded_frame_observers.find(value => value === observer)) {
      MediaEngineInternal._video_encoded_frame_observers.push(observer);
    }
    return super.registerVideoEncodedFrameObserver(observer);
  }
  unregisterVideoEncodedFrameObserver(observer) {
    MediaEngineInternal._video_encoded_frame_observers = MediaEngineInternal._video_encoded_frame_observers.filter(value => value !== observer);
    return super.unregisterVideoEncodedFrameObserver(observer);
  }
  release() {
    MediaEngineInternal._audio_frame_observers = [];
    MediaEngineInternal._video_frame_observers = [];
    MediaEngineInternal._video_encoded_frame_observers = [];
    this.removeAllListeners();
    super.release();
  }
  _addListenerPreCheck(eventType) {
    var _checkers$IAudioFrame, _checkers$IVideoFrame, _checkers$IVideoEncod;
    if ((_checkers$IAudioFrame = checkers.IAudioFrameObserver) !== null && _checkers$IAudioFrame !== void 0 && _checkers$IAudioFrame.strictTest({
      [eventType]: undefined
    })) {
      if (MediaEngineInternal._audio_frame_observers.length === 0) {
        this.registerAudioFrameObserver({});
      }
    }
    if ((_checkers$IVideoFrame = checkers.IVideoFrameObserver) !== null && _checkers$IVideoFrame !== void 0 && _checkers$IVideoFrame.strictTest({
      [eventType]: undefined
    })) {
      if (MediaEngineInternal._video_frame_observers.length === 0) {
        this.registerVideoFrameObserver({});
      }
    }
    if ((_checkers$IVideoEncod = checkers.IVideoEncodedFrameObserver) !== null && _checkers$IVideoEncod !== void 0 && _checkers$IVideoEncod.strictTest({
      [eventType]: undefined
    })) {
      if (MediaEngineInternal._video_encoded_frame_observers.length === 0) {
        this.registerVideoEncodedFrameObserver({});
      }
    }
    return true;
  }
  addListener(eventType, listener) {
    this._addListenerPreCheck(eventType);
    const callback = function () {
      if ((arguments.length <= 0 ? undefined : arguments[0]) !== EVENT_TYPE.IMediaEngine) {
        return;
      }
      processIAudioFrameObserver({
        [eventType]: listener
      }, eventType, arguments.length <= 1 ? undefined : arguments[1]);
      processIVideoFrameObserver({
        [eventType]: listener
      }, eventType, arguments.length <= 1 ? undefined : arguments[1]);
      processIVideoEncodedFrameObserver({
        [eventType]: listener
      }, eventType, arguments.length <= 1 ? undefined : arguments[1]);
    };
    const subscription = DeviceEventEmitter.addListener(eventType, callback);
    this._events.set(listener, {
      eventType,
      subscription
    });
    return subscription;
  }
  removeListener(eventType, listener) {
    if (!this._events.has(listener)) return;
    DeviceEventEmitter.removeSubscription(this._events.get(listener).subscription);
    this._events.delete(listener);
  }
  removeAllListeners(eventType) {
    if (eventType === undefined) {
      this._events.forEach(value => {
        DeviceEventEmitter.removeAllListeners(value.eventType);
      });
      this._events.clear();
    } else {
      DeviceEventEmitter.removeAllListeners(eventType);
      this._events.forEach((value, key) => {
        if (value.eventType === eventType) {
          this._events.delete(key);
        }
      });
    }
  }
}
_defineProperty(MediaEngineInternal, "_audio_frame_observers", []);
_defineProperty(MediaEngineInternal, "_video_frame_observers", []);
_defineProperty(MediaEngineInternal, "_video_encoded_frame_observers", []);
//# sourceMappingURL=MediaEngineInternal.js.map