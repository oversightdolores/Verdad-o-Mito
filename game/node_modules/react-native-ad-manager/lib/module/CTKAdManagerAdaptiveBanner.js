function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React from 'react';
import { requireNativeComponent, UIManager, findNodeHandle } from 'react-native';
import { createErrorFromErrorData } from './utils';
import { LINKING_ERROR } from './Constants';
const ComponentName = 'CTKAdaptiveBannerView';
const AdManagerAdaptiveBannerView = UIManager.getViewManagerConfig(ComponentName) != null ? requireNativeComponent(ComponentName) : () => {
  throw new Error(LINKING_ERROR);
};
export class AdaptiveBanner extends React.Component {
  constructor(props) {
    super(props);
    this.handleSizeChange = this.handleSizeChange.bind(this);
    this.state = {
      style: {}
    };
  }
  shouldComponentUpdate(nextProps, nextState) {
    if (Object.entries(this.state.style).toString() === Object.entries(nextState.style).toString() && Object.entries(this.props).toString() === Object.entries(nextProps).toString()) {
      return false;
    }
    return true;
  }
  componentDidMount() {
    this.loadBanner();
  }
  loadBanner() {
    UIManager.dispatchViewManagerCommand(findNodeHandle(this), UIManager.getViewManagerConfig(ComponentName).Commands.loadBanner, []);
  }
  handleSizeChange(_ref) {
    let {
      nativeEvent
    } = _ref;
    const {
      height,
      width
    } = nativeEvent;
    this.setState({
      style: {
        width,
        height
      }
    });
    this.props.onSizeChange && this.props.onSizeChange(nativeEvent);
  }
  render() {
    return /*#__PURE__*/React.createElement(AdManagerAdaptiveBannerView, _extends({}, this.props, {
      style: [this.props.style, this.state.style],
      onSizeChange: this.handleSizeChange,
      onAdLoaded: event => this.props.onAdLoaded && this.props.onAdLoaded(event.nativeEvent),
      onAdFailedToLoad: event => this.props.onAdFailedToLoad && this.props.onAdFailedToLoad(createErrorFromErrorData(event.nativeEvent.error)),
      onAppEvent: event => this.props.onAppEvent && this.props.onAppEvent(event.nativeEvent),
      onAdOpened: event => this.props.onAdOpened && this.props.onAdOpened(event.nativeEvent),
      onAdClosed: event => this.props.onAdClosed && this.props.onAdClosed(event.nativeEvent)
    }));
  }
}
//# sourceMappingURL=CTKAdManagerAdaptiveBanner.js.map