{"version":3,"names":["NativeEventEmitter","NativeModules","createErrorFromErrorData","LINKING_ERROR","CTKInterstitial","Proxy","get","Error","eventEmitter","eventMap","adLoaded","adFailedToLoad","adOpened","adClosed","_subscriptions","Map","addEventListener","event","handler","mappedEvent","listener","addListener","error","set","remove","removeEventListener","console","warn","_event","delete","removeAllListeners","forEach","key","map","simulatorId","setAdUnitID","adUnitID","setTestDevices","testDevices","setTargeting","targeting","requestAd","showAd","isReady","callback"],"sources":["CTKAdManagerInterstitial.ts"],"sourcesContent":["import { NativeEventEmitter, NativeModules } from 'react-native';\nimport { createErrorFromErrorData } from './utils';\nimport type {\n  IAdManagerEventBase,\n  IAdManagerEventErrorPayload,\n  IAdManagerEventLoadedInterstitial,\n} from './AdManagerEvent';\nimport { LINKING_ERROR } from './Constants';\nimport type { IAdManagerTargeting } from './AdManagerTypes';\n\nconst CTKInterstitial = NativeModules.CTKInterstitial\n  ? NativeModules.CTKInterstitial\n  : new Proxy(\n      {},\n      {\n        get() {\n          throw new Error(LINKING_ERROR);\n        },\n      }\n    );\n\nconst eventEmitter = new NativeEventEmitter(CTKInterstitial);\n\nconst eventMap = {\n  adLoaded: 'interstitialAdLoaded',\n  adFailedToLoad: 'interstitialAdFailedToLoad',\n  adOpened: 'interstitialAdOpened',\n  adClosed: 'interstitialAdClosed',\n};\n\ntype TAdManagerInterstitialEvent =\n  | 'adLoaded'\n  | 'adFailedToLoad'\n  | 'adOpened'\n  | 'adClosed';\n\ntype TAdManagerInterstitialHandler = (\n  event: Error | IAdManagerEventBase | IAdManagerEventLoadedInterstitial\n) => void;\n\nconst _subscriptions = new Map();\n\nconst addEventListener = (\n  event: TAdManagerInterstitialEvent,\n  handler: TAdManagerInterstitialHandler\n) => {\n  const mappedEvent = eventMap[event];\n  if (mappedEvent) {\n    let listener;\n    if (event === 'adFailedToLoad') {\n      listener = eventEmitter.addListener(\n        mappedEvent,\n        (error: IAdManagerEventErrorPayload) =>\n          handler(createErrorFromErrorData(error))\n      );\n    } else {\n      listener = eventEmitter.addListener(mappedEvent, handler);\n    }\n    _subscriptions.set(handler, listener);\n    return {\n      remove: () => removeEventListener(event, handler),\n    };\n  } else {\n    console.warn(`Trying to subscribe to unknown event: \"${event}\"`);\n    return {\n      remove: () => {},\n    };\n  }\n};\n\nconst removeEventListener = (\n  _event: TAdManagerInterstitialEvent,\n  handler: TAdManagerInterstitialHandler\n) => {\n  const listener = _subscriptions.get(handler);\n  if (!listener) {\n    return;\n  }\n  listener.remove();\n  _subscriptions.delete(handler);\n};\n\nconst removeAllListeners = () => {\n  _subscriptions.forEach((listener, key, map) => {\n    listener.remove();\n    map.delete(key);\n  });\n};\n\nconst simulatorId = 'SIMULATOR';\n\nconst setAdUnitID = (adUnitID: string) => {\n  CTKInterstitial.setAdUnitID(adUnitID);\n};\n\nconst setTestDevices = (testDevices: string[]) => {\n  CTKInterstitial.setTestDevices(testDevices);\n};\n\nconst setTargeting = (targeting: IAdManagerTargeting) => {\n  CTKInterstitial.setTargeting(targeting);\n};\n\nconst requestAd = (): Promise<null> => {\n  return CTKInterstitial.requestAd();\n}\n\nconst showAd = (): Promise<null> => {\n  return CTKInterstitial.showAd();\n}\n\nconst isReady = (callback: (isReady: number) => void): Promise<null> => {\n  return CTKInterstitial.isReady(callback);\n}\n\nexport default {\n  addEventListener,\n  removeEventListener,\n  removeAllListeners,\n  simulatorId,\n  setAdUnitID,\n  setTestDevices,\n  setTargeting,\n  requestAd,\n  showAd,\n  isReady\n}\n"],"mappings":"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"}