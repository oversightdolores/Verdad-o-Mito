import type { IAdManagerEventBase, IAdManagerEventLoadedInterstitial } from './AdManagerEvent';
import type { IAdManagerTargeting } from './AdManagerTypes';
type TAdManagerInterstitialEvent = 'adLoaded' | 'adFailedToLoad' | 'adOpened' | 'adClosed';
type TAdManagerInterstitialHandler = (event: Error | IAdManagerEventBase | IAdManagerEventLoadedInterstitial) => void;
declare const _default: {
    addEventListener: (event: TAdManagerInterstitialEvent, handler: TAdManagerInterstitialHandler) => {
        remove: () => void;
    };
    removeEventListener: (_event: TAdManagerInterstitialEvent, handler: TAdManagerInterstitialHandler) => void;
    removeAllListeners: () => void;
    simulatorId: string;
    setAdUnitID: (adUnitID: string) => void;
    setTestDevices: (testDevices: string[]) => void;
    setTargeting: (targeting: IAdManagerTargeting) => void;
    requestAd: () => Promise<null>;
    showAd: () => Promise<null>;
    isReady: (callback: (isReady: number) => void) => Promise<null>;
};
export default _default;
