function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { View, StyleSheet } from 'react-native';
import React from 'react';
import Animated, { Easing, Extrapolate, interpolate, runOnJS, useAnimatedGestureHandler, useAnimatedStyle, useDerivedValue, useSharedValue, withTiming } from 'react-native-reanimated';
import { PanGestureHandler, GestureHandlerRootView } from 'react-native-gesture-handler';
import { snapPoint } from 'react-native-redash';
import MaskedView from '@react-native-masked-view/masked-view';

const Picker = _ref => {
  let {
    itemHeight = 30,
    pickerData,
    visible = 5,
    textStyle,
    maskedComponents,
    contentContainerStyle,
    initialIndex = 0,
    onSelected,
    ...props
  } = _ref;
  return /*#__PURE__*/React.createElement(View, _extends({}, props, {
    style: [styles.container]
  }), /*#__PURE__*/React.createElement(PickerItem, {
    itemHeight: itemHeight,
    pickerData: pickerData,
    visible: visible,
    textStyle: textStyle !== null && textStyle !== void 0 ? textStyle : {},
    maskedComponents: maskedComponents,
    contentContainerStyle: contentContainerStyle,
    initialIndex: initialIndex,
    onSelected: onSelected
  }));
};

const duration = 1000;

const PickerItem = _ref2 => {
  let {
    itemHeight,
    pickerData,
    visible,
    textStyle,
    maskedComponents,
    contentContainerStyle,
    initialIndex,
    onSelected
  } = _ref2;
  const translateY = useSharedValue(-itemHeight * initialIndex);
  const snapPoints = new Array(pickerData.length).fill(0).map((_, i) => i * -itemHeight);
  const timingConfig = {
    duration: duration,
    easing: Easing.bezier(0.35, 1, 0.35, 1)
  };

  const wrapper = index => {
    onSelected && onSelected(pickerData[index], index);
  };

  const onGestureEvent = useAnimatedGestureHandler({
    onStart: (_event, ctx) => {
      // @ts-ignore
      ctx.y = translateY.value; // triggered at the start of the pan gesture
    },
    onActive: (_ref3, ctx) => {
      let {
        translationY
      } = _ref3;
      // @ts-ignore
      translateY.value = translationY + ctx.y; // triggered on every frame of the pan gesture
    },
    onEnd: _ref4 => {
      let {
        velocityY
      } = _ref4;
      const snapPointY = snapPoint(translateY.value, velocityY, snapPoints);
      const index = Math.abs(snapPointY / itemHeight);
      translateY.value = withTiming(snapPointY, timingConfig);
      runOnJS(wrapper)(index); // triggered at the end of the pan gesture
    }
  });
  const animatedStyle = useAnimatedStyle(() => ({
    transform: [{
      translateY: translateY.value
    }]
  }));
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MaskedView, {
    androidRenderingMode: "software",
    maskElement: /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(Animated.View, {
      style: [animatedStyle, contentContainerStyle, {
        height: itemHeight * visible,
        paddingTop: itemHeight * visible / 2 - itemHeight / 2
      }]
    }, pickerData.map((item, index) => /*#__PURE__*/React.createElement(Item, {
      key: index,
      translateY: translateY,
      index: index,
      itemHeight: itemHeight,
      visible: visible,
      data: item,
      textStyle: textStyle
    }))))
  }, maskedComponents ? maskedComponents : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(View // eslint-disable-next-line react-native/no-inline-styles
  , {
    style: {
      height: itemHeight * Math.trunc(visible / 2),
      backgroundColor: 'grey'
    }
  }), /*#__PURE__*/React.createElement(View // eslint-disable-next-line react-native/no-inline-styles
  , {
    style: {
      height: itemHeight,
      backgroundColor: 'white'
    }
  }), /*#__PURE__*/React.createElement(View // eslint-disable-next-line react-native/no-inline-styles
  , {
    style: {
      height: itemHeight * Math.trunc(visible / 2),
      backgroundColor: 'grey'
    }
  }))), /*#__PURE__*/React.createElement(GestureHandlerRootView, {
    style: StyleSheet.absoluteFillObject
  }, /*#__PURE__*/React.createElement(PanGestureHandler, {
    onGestureEvent: onGestureEvent
  }, /*#__PURE__*/React.createElement(Animated.View, {
    // eslint-disable-next-line react-native/no-inline-styles
    style: {
      flex: 1
    }
  }))));
};

const Item = _ref5 => {
  let {
    translateY,
    index,
    itemHeight,
    visible,
    data,
    textStyle
  } = _ref5;
  // const y = useDerivedValue(() => translateY.value, [translateY.value]);
  const y = useDerivedValue(() => interpolate(translateY.value / -itemHeight, [index - visible / 2, index, index + visible / 2], [-1, 0, 1], Extrapolate.CLAMP));
  const textAnimation = useAnimatedStyle(() => {
    return {
      opacity: 1 / (1 + Math.abs(y.value)),
      transform: [{
        scale: 1 - 0.1 * Math.abs(y.value)
      }, {
        perspective: 500
      }, {
        rotateX: `${65 * y.value}deg`
      }]
    };
  });
  return /*#__PURE__*/React.createElement(View, {
    style: [styles.textContainer, {
      height: itemHeight
    }]
  }, /*#__PURE__*/React.createElement(Animated.Text, {
    style: [textAnimation, textStyle]
  }, data.title));
};

export default Picker;
const styles = StyleSheet.create({
  container: {
    overflow: 'hidden',
    justifyContent: 'center',
    flex: 1
  },
  textContainer: {
    alignItems: 'center',
    justifyContent: 'center'
  }
});
//# sourceMappingURL=Picker.js.map